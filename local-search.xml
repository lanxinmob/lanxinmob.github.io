<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Knuth-Morris-Pratt（KMP）算法【详解】</title>
    <link href="/2025/01/11/Knuth-Morris-Pratt%EF%BC%88KMP%EF%BC%89%E7%AE%97%E6%B3%95%E3%80%90%E8%AF%A6%E8%A7%A3%E3%80%91/"/>
    <url>/2025/01/11/Knuth-Morris-Pratt%EF%BC%88KMP%EF%BC%89%E7%AE%97%E6%B3%95%E3%80%90%E8%AF%A6%E8%A7%A3%E3%80%91/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>笔者在学习字符串的过程中，接触到求子字符串位置的问题，除了暴力解法外了解到有一种名为KMP（烤馍片）的巧妙算法也顺便了解了一下发明者之一的“神”Kunth的履历，但不在此赘述。虽然网上有很多详细图解之类，但我还是不能充分理解。在看完Tushar Roy的讲解后才恍然大悟，本文主要根据他的讲解，结合自己的思考在此写出我的理解。</p><hr><h1 id="一、从问题谈起，如何最直接地搜索一个字符串？"><a href="#一、从问题谈起，如何最直接地搜索一个字符串？" class="headerlink" title="一、从问题谈起，如何最直接地搜索一个字符串？"></a>一、从问题谈起，如何最直接地搜索一个字符串？</h1><ul><li>示例：<br>给定字符串是<code>absdglx</code>,目标字符串是<code>sdgl</code>，给每个字符标上序号，分别是<code>m0,m1,m2,m3,m4,m5,m6</code>,<code>n0,n1,n2,n3</code>。最直接的搜索并定位目标字符串的方法就是将目标字符串的每个字符给定字符串的字符逐一比较。</li><li>从<code>m0</code>，<code>n0</code>开始，若匹配则两字符串都从比较的字符往后移动一个字符，继续进行比较；若不相同，则给定字符串回到从起始比较位往后移动一个字符的位置，目标字符串回到<code>n0</code>从头开始比较，直到在给定字符串超过最后一个字符<code>m7</code>前，目标字符串匹配完最后一个字符<code>n3</code>，即搜索到目标字符串。</li><li>要将上述过程通过编程实现，我们可以用两个指针<code>i,j</code>分别指向给定字符串和目标字符串，按上述过程进行指针的后移和回退，直到<code>i</code>或<code>j</code>指向字符串的最后一个字符。</li></ul><h1 id="二、实现优化的kmp算法如何操作？"><a href="#二、实现优化的kmp算法如何操作？" class="headerlink" title="二、实现优化的kmp算法如何操作？"></a>二、实现优化的kmp算法如何操作？</h1><p>我们可以发现上文朴素(暴力)算法的不便和存在大量低效、重复的匹配操作，那么我们可不可以通过某些目标字符串本身特性来减少回退而多进行回溯，提高效率。</p><h2 id="1-引入前缀数组"><a href="#1-引入前缀数组" class="headerlink" title="1.引入前缀数组"></a>1.引入前缀数组</h2><ul><li><p>前缀数组的每个元素对应着目标字符串的每个字符，其元素表示了该字符前的子字符串（包括该字符）中的最长的相等的前缀和后缀的长度，即前文所指的目标字符串的某些特性。<br>  举例：<code>abcabcd</code>的前缀数组可以用下面这个表格来表示。</p><table><thead><tr><th>a</th><th>b</th><th>c</th><th>a</th><th>b</th><th>c</th><th>d</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>1</td><td>2</td><td>3</td><td>0</td></tr></tbody></table></li><li><p>我们用一个例子来详细解释如何手推前缀数组,过程中会用到前缀和回溯的思想。<br> 1.<code>abcdabca</code>使用两个指针<code>i,j</code>分别指向<code>a,b</code>,i和j指向的元素显然为0，将<code>j</code>向后移动，<code>j</code>移动到j移动到第二个<code>a</code>时有了相同前后缀元素记为1，然后将<code>i</code>和<code>j</code>都向后移动j指向<code>b</code>相同前后缀长为2，数组元素记为2，再次将<code>i</code>和<code>j</code>向后移动，<code>j</code>指向<code>c</code>同理，当<code>j</code>指向末尾的<code>a</code>时两指针所指字符不同，需要进行回溯。观察到<code>j</code>指针所指字符的前一个字符对应元素为0，即没有相同前后缀，则将<code>j</code>回退至首字符，此时<code>i</code>和<code>j</code>所指字符均为<code>a</code>，则<code>i</code>所指字符对应元素记为1。该字符串前缀数组即为<strong>00001231</strong>。</p></li></ul><h2 id="2-给定字符串和目标字符串分别如何回溯？"><a href="#2-给定字符串和目标字符串分别如何回溯？" class="headerlink" title="2.给定字符串和目标字符串分别如何回溯？"></a>2.给定字符串和目标字符串分别如何回溯？</h2><ul><li>举例：给定字符串<code>abxabcabcaby</code>,目标字符串<code>abcaby</code>,对应前缀数组为<strong>000120</strong>。（同样使用<code>i</code> <code>j</code>指针但分别指向给定字符串和目标字符串）<br>两字符串前两个字符匹配，第三个字符分别为<code>x</code>和<code>c</code>不匹配，<code>j</code>前一字符对应元素为0，<code>j</code>回到首位指向<code>a</code>仍与<code>x</code>不匹配，<code>j</code>不移动，将<code>i</code>往后移动指向<code>a</code>与<code>j</code>所指匹配，<code>i</code>和<code>j</code>都往后移动。同理继续匹配直到<code>i</code>指向<code>c</code>，<code>j</code>指向<code>y</code>不匹配，<code>j</code>前一字符对应元素为2，<code>j</code>回溯到第三个字符<code>c</code>与<code>i</code>匹配，<code>i</code>和<code>j</code>都往后移动继续匹配直到最后完成匹配。</li></ul><h1 id="三、如何用代码来实现kmp算法？"><a href="#三、如何用代码来实现kmp算法？" class="headerlink" title="三、如何用代码来实现kmp算法？"></a>三、如何用代码来实现kmp算法？</h1><p>同样主要分为两步，</p><h2 id="1-计算目标字符串的前缀数组"><a href="#1-计算目标字符串的前缀数组" class="headerlink" title="1. 计算目标字符串的前缀数组"></a>1. 计算目标字符串的前缀数组</h2><ul><li>前缀数组定义为<code>prefix[]</code>,<code>j</code>和<code>i</code>分别指向第一、二个字符，让<code>i</code>遍历目标字符串每个字符，<code>j = prefix[j-1]</code>就是<code>j</code>回溯至<code>j</code>所指前一个字符对应元素的位置。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"> <span class="hljs-type">void</span> <span class="hljs-title function_">Prefix</span><span class="hljs-params">(<span class="hljs-type">char</span>* pattern, <span class="hljs-type">int</span>* prefix, <span class="hljs-type">int</span> len)</span><br>&#123;<br>    <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>    prefix[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> i= <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(i&lt;len)&#123;<br>        <span class="hljs-keyword">if</span>(pattern[i]==pattern[j])&#123;<br>            j++;<br>            prefix[i] = j;<br>            i++;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span> (j!=<span class="hljs-number">0</span>)<br>            &#123;   <br>                j = prefix[j<span class="hljs-number">-1</span>];<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                prefix[i] = <span class="hljs-number">0</span>;<br>                i++;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="2-借助前缀数组进行字符串的匹配"><a href="#2-借助前缀数组进行字符串的匹配" class="headerlink" title="2.借助前缀数组进行字符串的匹配"></a>2.借助前缀数组进行字符串的匹配</h2><ul><li><code>pattern</code>为目标字符串，<code>text</code>为给定字符串，<code>i</code>和<code>j</code>分别指向给定字符串和目标字符串，同样遍历给定字符串，若j指向了目标字符串最后一个字符，则<code>i-j</code>为<code>text</code>中<code>pattern</code>的首字符位置。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">kmpsearch</span><span class="hljs-params">(<span class="hljs-type">char</span>*text,<span class="hljs-type">char</span>*pattern)</span><br>&#123; <br>    <span class="hljs-type">int</span> len = <span class="hljs-built_in">strlen</span>(pattern);<br>    <span class="hljs-type">int</span> wid = <span class="hljs-built_in">strlen</span>(text);<br>    <span class="hljs-type">int</span> prefix[len];<br>    Prefix(pattern,prefix,len);<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">while</span> (i &lt; wid)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(pattern[j]==text[i])&#123;<br>            i++;<br>            j++;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(j==len)&#123;<br>           <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,i-j);<br>           j = prefix[j<span class="hljs-number">-1</span>];<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i&lt;wid&amp;&amp;pattern[j]!=text[i])&#123;<br>           <span class="hljs-keyword">if</span>(j!=<span class="hljs-number">0</span>)&#123;<br>            j = prefix[j<span class="hljs-number">-1</span>];<br>           &#125;<span class="hljs-keyword">else</span>&#123;<br>            i++;<br>           &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文详细解释了kmp算法如何实现，kmp算法通过目标字符串由自身特性生成的前缀数组来减少回溯的过程，建议亲自动手推一推生成前缀数组和模式匹配的过程，这样可以更好地理解其思想和原理。</p><blockquote><p>如果发现文章中存在错误敬请批评指正，感谢您的阅读。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>About</title>
    <link href="/2025/01/08/about/"/>
    <url>/2025/01/08/about/</url>
    
    <content type="html"><![CDATA[<p>欢迎来到我的博客！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>LaTex笔记</title>
    <link href="/2025/01/08/latex/"/>
    <url>/2025/01/08/latex/</url>
    
    <content type="html"><![CDATA[<h2 id="一、LaTex中常见希腊字母"><a href="#一、LaTex中常见希腊字母" class="headerlink" title="一、LaTex中常见希腊字母"></a>一、LaTex中常见希腊字母</h2><blockquote><p>\alpha \beta \gamma \delta \epsilon \zeta \eta \pi \sigma \tau \phi \psi \chi</p></blockquote><h2 id="二、LaTex常用指令"><a href="#二、LaTex常用指令" class="headerlink" title="二、LaTex常用指令"></a>二、LaTex常用指令</h2><table><thead><tr><th>名称</th><th>指令</th><th>名称</th><th>指令</th></tr></thead><tbody><tr><td>分数</td><td>\frac{分子}{分母}</td><td>乘号</td><td>\times</td></tr><tr><td>开方</td><td>\sqrt[m]{n}</td><td>求和</td><td>\sum</td></tr><tr><td>求积</td><td>\prod</td><td>积分</td><td>\int</td></tr><tr><td>上标</td><td>^</td><td>下标</td><td>_</td></tr><tr><td>小于等于</td><td>\leq</td><td>大于等于</td><td>\geq</td></tr><tr><td>除法</td><td>\div</td><td>点乘</td><td>\cdot</td></tr></tbody></table><h2 id="三、数学符号"><a href="#三、数学符号" class="headerlink" title="三、数学符号"></a>三、数学符号</h2><table><thead><tr><th>$\vec a$</th><th>\vec a</th><th>$\int_{i&#x3D;m}^{n}$</th><th>\int_{i&#x3D;m}^{n}</th></tr></thead><tbody><tr><td>$\sum_{i&#x3D;m}^{n}$</td><td>\sum_{i&#x3D;m}^{n}</td><td>$\prod_{i&#x3D;m}^{n}$</td><td>\prod_{i&#x3D;m}^{n}</td></tr><tr><td>$\binom53$</td><td>\binom53</td><td>$\forall$</td><td>forall</td></tr><tr><td>$\partial$</td><td>\partial</td><td>$\mathop{\lim}_{n\to\infty}f(x)$</td><td>\mathop{\lim}_{n\to\infty}f(x)</td></tr><tr><td>$\sum_{n&#x3D;0}^{\infty}$</td><td>sum_{n&#x3D;0}^{\infty}</td><td>$\oint$</td><td>\oint</td></tr><tr><td>$\oiint$</td><td>\oiint</td><td>$\oiiint$</td><td>\oiiint</td></tr><tr><td>$\sqrt[3]{1000}$</td><td>\sqrt[3]{1000}</td><td>$\int_a^bf(x)$</td><td>\int_a^bf(x)</td></tr><tr><td>$\left\langle\right\rangle$</td><td>\left\langle    \right\rangle</td><td>{}</td><td>\left{ \right}</td></tr></tbody></table><h2 id="四、简单数学公式"><a href="#四、简单数学公式" class="headerlink" title="四、简单数学公式"></a>四、简单数学公式</h2><p>$$<br>y &#x3D; x^2<br>$$<br>$$<br>E &#x3D; mc^2<br>$$<br>$$<br>e^x&#x3D;\sum_{n&#x3D;0}^\infty\frac{1}{n!}x^i<br>$$</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-built_in">$</span>e<span class="hljs-built_in">^</span>x=<span class="hljs-keyword">\sum</span><span class="hljs-built_in">_</span>&#123;n=0&#125;<span class="hljs-built_in">^</span><span class="hljs-keyword">\infty</span><span class="hljs-keyword">\frac</span>&#123;1&#125;&#123;n!&#125;x<span class="hljs-built_in">^</span>i<span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure><p>$$<br>\begin{equation}<br>S_{n+1} &#x3D; S_{n} + S_{n},<br>S_{n} &#x3D; 1 &#x3D;2^{n}<br>\end{equation}<br>$$</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br><span class="hljs-keyword">\begin</span>&#123;equation&#125;<br>S<span class="hljs-built_in">_</span>&#123;n+1&#125; = S<span class="hljs-built_in">_</span>&#123;n&#125; + S<span class="hljs-built_in">_</span>&#123;n&#125;,<br>S<span class="hljs-built_in">_</span>&#123;n&#125; = 1 =2<span class="hljs-built_in">^</span>&#123;n&#125;<br><span class="hljs-keyword">\end</span>&#123;equation&#125;<br><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure><h2 id="五、矩阵"><a href="#五、矩阵" class="headerlink" title="五、矩阵"></a>五、矩阵</h2><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br><span class="hljs-keyword">\begin</span>&#123;pmatrix&#125;<br>1      <span class="hljs-built_in">&amp;</span> a<span class="hljs-built_in">_</span>1    <span class="hljs-built_in">&amp;</span> a<span class="hljs-built_in">_</span>1<span class="hljs-built_in">^</span>2  <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\cdots</span> <span class="hljs-built_in">&amp;</span> a<span class="hljs-built_in">_</span>1<span class="hljs-built_in">^</span>n <span class="hljs-keyword">\\</span><br>1      <span class="hljs-built_in">&amp;</span> a<span class="hljs-built_in">_</span>2    <span class="hljs-built_in">&amp;</span> a<span class="hljs-built_in">_</span>2<span class="hljs-built_in">^</span>2  <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\cdots</span> <span class="hljs-built_in">&amp;</span> a<span class="hljs-built_in">_</span>2<span class="hljs-built_in">^</span>n <span class="hljs-keyword">\\</span><br><span class="hljs-keyword">\vdots</span> <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\vdots</span> <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\vdots</span> <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\ddots</span> <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\vdots</span><span class="hljs-keyword">\\</span><br>1      <span class="hljs-built_in">&amp;</span> a<span class="hljs-built_in">_</span>m    <span class="hljs-built_in">&amp;</span> a<span class="hljs-built_in">_</span>m<span class="hljs-built_in">^</span>2  <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\cdots</span> <span class="hljs-built_in">&amp;</span> a<span class="hljs-built_in">_</span>m<span class="hljs-built_in">^</span>n <span class="hljs-keyword">\\</span><br><span class="hljs-keyword">\end</span>&#123;pmatrix&#125;<br><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure><p><img src="/images/image-20250108141320306.png"></p><h2 id="六-、方程组"><a href="#六-、方程组" class="headerlink" title="六 、方程组"></a>六 、方程组</h2><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br><span class="hljs-keyword">\left</span><span class="hljs-keyword">\&#123;</span><br><span class="hljs-keyword">\begin</span>&#123;array&#125;&#123;c&#125;<br>a<span class="hljs-built_in">_</span>1x+b<span class="hljs-built_in">_</span>1y+c<span class="hljs-built_in">_</span>1z = d<span class="hljs-built_in">_</span>1 <span class="hljs-keyword">\\</span><br>a<span class="hljs-built_in">_</span>2x+b<span class="hljs-built_in">_</span>2y+c<span class="hljs-built_in">_</span>2z = d<span class="hljs-built_in">_</span>2 <span class="hljs-keyword">\\</span><br>a<span class="hljs-built_in">_</span>3x+b<span class="hljs-built_in">_</span>3y+c<span class="hljs-built_in">_</span>3z = d<span class="hljs-built_in">_</span>3 <span class="hljs-keyword">\\</span><br><span class="hljs-keyword">\end</span>&#123;array&#125;<br><span class="hljs-keyword">\right</span>.<br><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure><p><img src="/images/image-20250108141449757.png"></p>]]></content>
    
    
    <categories>
      
      <category>LaTex</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>指针的const限定</title>
    <link href="/2025/01/07/c%20review/"/>
    <url>/2025/01/07/c%20review/</url>
    
    <content type="html"><![CDATA[<h1 id="指针的const限定"><a href="#指针的const限定" class="headerlink" title="指针的const限定"></a>指针的<code>const</code>限定</h1><h2 id="1-指向const对象的指针"><a href="#1-指向const对象的指针" class="headerlink" title="1.指向const对象的指针"></a>1.指向<code>const</code>对象的指针</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">const</span> <span class="hljs-type">int</span> *p;<span class="hljs-comment">//或int const *p;</span><br><span class="hljs-type">int</span> a;<br>p = &amp;a;<span class="hljs-comment">//正确，p不是只读的</span><br>*p = <span class="hljs-number">42</span>;<span class="hljs-comment">//错误,*p是只读的</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> *cptrf = &amp;f;<span class="hljs-comment">//正确</span><br><span class="hljs-type">int</span> *ptr = &amp;p;<span class="hljs-comment">//错误</span><br></code></pre></td></tr></table></figure><ul><li>非<code>const</code>对象指针的地址可以赋给<code>const</code>对象的指针，<code>const</code>对象指针的地址不能赋给非<code>const</code>对象的指针。</li><li><strong>不能使用指向<code>const</code>对象的指针修改指向对象。</strong></li><li><strong>不能保证指向<code>const</code>的指针所指对象的值一定不被其他方式该改变</strong>（如果指向对象是一个普通变量就可以直接修改）。</li></ul><h2 id="2-const指针"><a href="#2-const指针" class="headerlink" title="2.const指针"></a>2.<code>const</code>指针</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> *<span class="hljs-type">const</span> ptr;<br></code></pre></td></tr></table></figure><ul><li>这表示 <code>ptr</code>是一个常量指针，指针本身的地址不能修改，但可以通过指针修改它所指向的对象的值。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">ptr = &amp;b;<br>ptr = pc;<br>ptr++;<span class="hljs-comment">//均错误，ptr是只读的</span><br></code></pre></td></tr></table></figure></li><li>与任何<code>const</code>量一样，<code>const</code>指针必须在定义时初始化。</li></ul><h2 id="3-指向const对象的const指针"><a href="#3-指向const对象的const指针" class="headerlink" title="3.指向const对象的const指针"></a>3.指向<code>const</code>对象的<code>const</code>指针</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">const</span> <span class="hljs-type">double</span> <span class="hljs-type">const</span>* pi = <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><ul><li>这表示<code>pi</code>是一个常量指针，指向的对象是常量。不能通过<code>pi</code>修改所指向对象的值，并且指针本身的地址也不能修改。</li></ul>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/01/07/hello-world/"/>
    <url>/2025/01/07/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
