<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>OSI模型</title>
    <link href="/2025/04/26/OSI%E6%A8%A1%E5%9E%8B/"/>
    <url>/2025/04/26/OSI%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="OSI模型"><a href="#OSI模型" class="headerlink" title="OSI模型"></a>OSI模型</h2><p>网络层 IP地址</p><p>数据链路层 MAC地址（12位十六进制数）网卡的硬件地址，理论上不可更改</p>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AI</title>
    <link href="/2025/04/18/AI/"/>
    <url>/2025/04/18/AI/</url>
    
    <content type="html"><![CDATA[<p>图里奖得主杨立昆：AI在这四个方向还有更多有意思的东西，</p><ul><li>如何让机器理解物理世界？</li><li>如何做到没有多少人谈论的拥有持续记忆</li><li>如何实现推理能力和规划能力</li></ul>]]></content>
    
    
    <categories>
      
      <category>AI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ssh协议</title>
    <link href="/2025/04/15/ssh/"/>
    <url>/2025/04/15/ssh/</url>
    
    <content type="html"><![CDATA[<h2 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h2><ul><li><p>Secure Shell，由IETF的网络小组所制定，是建立在应用层基础上的安全协议。</p><ul><li><p>对称加密</p></li><li><p>非对称加密</p></li></ul></li><li><p>为了使用上述两种方法把密钥安全地发送给对方，而不让别人知道具体的密钥，使用DH（Diffie Hellman）密钥交换。</p><p>我给箱子上把锁发给对方，对方上把锁发回来，我把我的锁打开再发过去，对方安全打开自己的锁。</p></li><li><p>但是有可能中间人截取上一把自己的锁发回来</p></li><li><p>为了证明信息没有被纂改，我们需要对信息进行哈希运算，得出同种算法的唯一哈希值。</p></li><li></li></ul>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IP地址和子网掩码</title>
    <link href="/2025/04/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <url>/2025/04/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<h2 id="IP-地址"><a href="#IP-地址" class="headerlink" title="IP 地址"></a>IP 地址</h2><ul><li><p>IP地址:32位二进制数组成 网络号+主机号</p></li><li><p>用于网络通信，路由器和交换机通过IP地址来转发数据包，确保数据的正确传输。</p><table><thead><tr><th>类</th><th>范围</th><th>网络数</th><th>主机数</th></tr></thead><tbody><tr><td>A</td><td>0.0.0.0 ~ 127.255.255.255</td><td>128</td><td>16777216</td></tr><tr><td>B</td><td>128.0.0.0 ~ 191.255.255.255</td><td>16384</td><td>65536</td></tr><tr><td>C</td><td>192.0.0.0 ~ 223.255.255.255</td><td>2097152</td><td>256</td></tr></tbody></table><p>A类第一个字节表示网络号，B类前两个字节，C类前三个字节。</p></li><li><p>还有特殊的D类（多播：同时发送给多个接收者）和E类（保留未来使用）。</p></li><li><p>为了解决简单分类导致的IP分配不合理（可能只有四台主机不需要给该网络分配256个），诞生了子网掩码。</p></li></ul><h2 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h2><ul><li><p>那么就需要用一种方法来表示这四个IP地址同属一个网络，</p><p>相同的部分锁定为1，不同的部分为0，192.168.0.0~192.168.0.3子网掩码即为255.255.255.252，</p><p>把子网掩码和IP地址放在一起别人就能知道网络号和主机号的界限了。这个掩码很长可以用一种叫CIDR的方法来表示，</p><p>这里有30个1就用192.168.0.0&#x2F;30表示。</p></li><li><p>这里说的都是IPv4，但互联网发展迅猛，于是有了IPv6。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>The modification report of the academic presentation</title>
    <link href="/2025/04/05/modification%20report/"/>
    <url>/2025/04/05/modification%20report/</url>
    
    <content type="html"><![CDATA[<ul><li><p>The language of our report is not academic enough and need to be more academic and formal,so we should employ more terminology and academic phrases such as:</p><p>“The hypothesis suggests…” “The evidence indicates…””In contrast to…” </p></li><li><p>While the content coverage is relatively comprehensive,the logical flow requires strengthening and the structure lacks smooth transitions. I recommend organizing the content in the way that first introduces the problem through observed phenomena,then analyses the symptoms and causes,and finally examines existing solutions,and explores alternative approaches.</p></li><li><p>Our citations lack consistency and need proper format. I suggest ensuring that all data claims have explicit references and adhere to the IEEE format guidance.</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>English learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛笔记</title>
    <link href="/2025/03/20/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E7%AC%94%E8%AE%B0/"/>
    <url>/2025/03/20/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>贪心：根据某个最优策略选出一个方案，这个方案就是最优解，通常就是排序</p><p>动态规划：多决策问题中，寻找最多或最少情况</p><p>暴力：双指针、BFS\DFS </p><p>数学题：</p><ul><li>打表：用电脑找一些合法答案，然后在这些合法答案中找规律</li></ul><p>tips：</p><ul><li>排序时确保元素都已经初始化</li></ul><p>一定要注意不满足条件输出“-1”的情况</p>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端经验</title>
    <link href="/2025/03/07/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    <url>/2025/03/07/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><ul><li><code>&lt;script src=&quot;...&quot;&gt;</code>标签用于加载并执行外部<code>JavaScript</code>文件，浏览器会下载并执行<code>src</code>属性指定的<code>URL</code>中的<code>JavaScript</code>代码。</li><li><code>&lt;script&gt;</code>标签内部代码通常会当作<code>JavaScript</code>代码来执行，但是如果<code>&lt;script&gt;</code>标签具有<code>src</code>属性，浏览器会忽略标签内部内容，只执行<code>src</code>属性指定的外部<code>JavaScript</code>文件。</li><li><code>console.log(&quot;Hello, world!&quot;);</code>用于在控制台输出信息。</li></ul><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><ul><li><p><code>#waifu-tips</code>的样式如果已经在<code>waifu.css</code>中设置, 那么自定义的<code>css</code>不会生效,因为<code>waifu.css</code>中的规则优先级更高,如果需要改变样式就要在自定义的<code>styles.css</code>中写更具体的选择器, 或者使用<code>!important</code>.</p></li><li><p>将<code>#write</code>(用于<code>typora</code>)改为<code>.markdown-body</code>,F12看<code>elements</code>标签<code>class</code> <code>style.css</code>有没有正常应用,检查<code>html</code>结构修改相应的类名。</p><p><code>#write</code> 是<code>ID</code>选择器，一个页面只能有一个<code>#write</code>,<code>.markdown-body</code> 是类选择器，可以复用于多个元素。</p><p>不同<code>markdown</code>解析器<code>class</code>名不同,解析器改变<code>css</code>文件中相应类名也要改变。</p></li></ul><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><ul><li><p><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;https://sdf/style.css&quot;&gt;</code> </p><p><code>rel</code>表示引入一个外部的<code>css</code>的样式表，<code>href</code>指定了文件路径</p></li><li><p><code>ejs</code>一种基于<code>JavaScript</code>的模板引擎，用于在<code>HTML</code>文件中嵌入<code>JavaScript</code>逻辑，以实现动态内容渲染。<code>ejs</code>文件最终被解析为标准的<code>html</code>，主要使用<code>JavaScript</code>语句，也可以使用普通的<code>html</code>语句。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
      <category>css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>learngit</title>
    <link href="/2025/03/01/learngit/"/>
    <url>/2025/03/01/learngit/</url>
    
    <content type="html"><![CDATA[<h2 id="感谢足基！感谢Angine学长！"><a href="#感谢足基！感谢Angine学长！" class="headerlink" title="感谢足基！感谢Angine学长！~"></a>感谢足基！感谢Angine学长！~</h2><ul><li>git是目前世界上最先进的分布式版本控制系统。</li><li>“Git is a free software distributed under the GPL.”<br>“Creating  a new branch is quick and simple.”</li></ul><hr><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li>版本管理</li><li>协作</li></ul><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><ul><li><code>git init</code>初始化一个git仓库         </li><li><code>git pull</code> 抓取新提交<br>  <code>git add</code> 添加文件<br> <code>git commit -m&quot;&quot;</code> 将暂存区修改一次性提交至分支<br> <code>git status</code> 查看工作区状态   </li><li><code>git diff</code> 查看修改内容<br>  <code>git log</code> 查看提交历史<br> <code>git reflog</code> 查看命令历史<br> <code>git reset --hard HEAD^回到上一状态 /commit_id</code>在版本历史中穿梭<br> <code>git checkout --file</code> 丢弃工作区修改&#x2F;恢复误删（用版本库里版本替换）<br> <code>git remote add origin git@name:path/reponame.git</code>关联远程库<br> <code>git push origin master</code>推送最新修改<br> <code>git clone</code>克隆仓库<br> <code>git branch</code>查看分支<br> <code>git branch &lt;name&gt;</code>创建分支<br> <code>git checkout/switch &lt;name&gt;</code> 切换分支<br> <code>git merge &lt;name&gt;</code>合并分支<br> <code>git checkout -b/switch -c &lt;name&gt;</code> 创建+切换<br> <code>git branch -d/-D</code>（强删）删除分支<br> <code>git log --graph</code>看分支合并图<br> <code>git merge --no-ff -m&quot;&quot; branchname</code>以普通模式合并<br> <code>git stash</code> 保存现场 修复bug后</li><li><code>git stash pop</code>回到现场<br>  <code>git cherry-pick &lt;commit&gt;</code> 复制修改<br> <code>git remote -v</code> 查看远程库信息<br> <code>git branch --set-upstream branchname origin/branchname</code>建立本地分支与远程分支联系<br> <code>git rebase git log --graph --pretty=oneline --abbrev-commit</code>整理分支历史成直线</li></ul><h2 id="Conventional-commit"><a href="#Conventional-commit" class="headerlink" title="Conventional commit"></a>Conventional commit</h2><h4 id="1-类型（Type）"><a href="#1-类型（Type）" class="headerlink" title="1.类型（Type）"></a>1.类型（Type）</h4><ul><li>提交类型指定了该提交的功能或目的。常见的类型包括：</li><li><code>feat</code>：新增功能 <code>feat/c</code><br>  <code>fix</code>：修复bug<br>  <code>docs</code>：文档变更<br>  <code>style</code>：代码样式（不影响功能的改变，如格式化）<br>  <code>refactor</code>：代码重构（不修复bug也不新增功能）<br>  <code>perf</code>：性能优化<br>  <code>test</code>：添加缺失的测试或修复现有的测试<br>  <code>chore</code>：日常任务（如修改配置文件、构建工具的更新等）<br>  <code>build</code>：影响构建系统或外部依赖的更改（例如：maven、webpack、gulp等）<br>  <code>ci</code>：持续集成相关的更改（例如：修改Github Actions、CircleCI配置等）<br>  <code>revert</code>:撤销先前的提交<br>  <code>merge</code>:合并提交</li></ul><h3 id="建议："><a href="#建议：" class="headerlink" title="建议："></a>建议：</h3><pre><code>1. “多创建branch”2. “多commit”</code></pre>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Crash Course Computer Science【计算机科学速成课】(3)</title>
    <link href="/2025/02/27/Crash-Course-Computer-Science%E3%80%90%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E3%80%91(3)/"/>
    <url>/2025/02/27/Crash-Course-Computer-Science%E3%80%90%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E3%80%91(3)/</url>
    
    <content type="html"><![CDATA[<h2 id="感谢速成课！感谢-Carrie-Anne！感谢中文翻译组！"><a href="#感谢速成课！感谢-Carrie-Anne！感谢中文翻译组！" class="headerlink" title="感谢速成课！感谢 Carrie Anne！感谢中文翻译组！~"></a>感谢速成课！感谢 Carrie Anne！感谢中文翻译组！~</h2><h4 id="原视频"><a href="#原视频" class="headerlink" title="原视频"></a>原视频</h4><p><a href="https://www.youtube.com/playlist?list=PL8dPuuaLjXtNlUrzyH5r6jN9ulIgZBpdo">Crash Course Computer Science</a><br><a href="https://github.com/1c7/crash-course-computer-science-chinese">https://github.com/1c7/crash-course-computer-science-chinese</a></p><h2 id="第-21-集-压缩"><a href="#第-21-集-压缩" class="headerlink" title="第 21 集 压缩"></a>第 21 集 压缩</h2><ol><li><p>为了使文件能小一点，存大量文件，传输也快一些，人们使用<strong>压缩</strong>，把数据占用的空间压得更小，用更少的位(bit)来表示数据。</p></li><li><p>以吃豆人为例图像是4像素x4像素，每个像素3个字节，总共占48个字节（16x3&#x3D;48），但我们可以压缩到少于 48 个字节。</p><blockquote><p>一种方法是减少重复信息，最简单的方法叫<strong>游程编码</strong>(Run-Length Encoding)适合经常出现相同值的文件，比如吃豆人有7个连续黄色像素与其全存下来可以插入一个额外字节，代表有7个连续黄色像素然后删掉后面的重复数据。为了让计算机能分辨哪些字节是”长度” 哪些字节是”颜色”，格式要一致所以我们要给所有像素前面标上长度，有时候数据反而会变多。但是没有损失任何数据，我们可以轻易恢复到原来的数据。解压缩后，数据和压缩前完全一样，这叫”<strong>无损压缩</strong>“，没有丢失任何数据。<br><img src="/images/Screenshot_20250426_112212.jpg"></p></blockquote><blockquote><p>另一种无损压缩“<strong>字典编码</strong>”，它用更紧凑的方式表示数据块,我们使用一个<strong>字典</strong>，存储”代码”和”数据”间的对应关系。个字典，存储”代码”和”数据”间的对应关系。我们可以把图像看成一块块，而不是一个个像素。例如，把2个像素当成1块，为四对：白黄 黑黄 黄黄 白白，生成紧凑代码(compact codes)根据频率生成 “<strong>霍夫曼树</strong>“（Huffman Tree）来生成每组对应一个唯一编码的字典。<br><img src="/images/Screenshot_20250426_112240.jpg"><br>字典也要保存下来，否则这 14 bit的编码毫无意义。现在加上字典，图像是 30 个字节(bytes)。<br><img src="/images/Screenshot_20250426_112303.jpg"></p></blockquote></li><li><p>“消除冗余”和”用更紧凑的表示方法”，这两种方法通常会组合使用，几乎所有无损压缩格式都用了它们，比如 GIF, PNG, PDF, ZIP。但其他一些文件，丢掉一些数据没什么关系。我们可以丢掉那些人类看不出区别的数据，大多数有损压缩技术，都用到了这点。这种删掉人类无法感知的数据的方法，叫”<strong>感知编码</strong>“。</p><blockquote><p>例如声音，用不同精度编码不同频段，听不出什么区别，不会明显影响体验。日常生活中你会经常碰到这类音频压缩所以你在电话里的声音和现实中不一样，压缩音频是为了让更多人能同时打电话，如果网速变慢了，压缩算法会删更多数据。和没压缩的音频格式相比，比如 WAV 或 FLAC，压缩音频文件如 <strong>MP3</strong>，能小10倍甚至更多。</p></blockquote></li><li><p>感知编码依赖于人类的感知模型，模型来自”心理物理学”领域，是各种”有损压缩图像格式”的基础，最著名的是 <strong>JPEG</strong>，就像听力一样，人的视觉系统也不是完美的，我们善于看到尖锐对比，比如物体的边缘，但我们看不出颜色的细微变化。JPEG 利用了这一点，把图像分解成 8x8 像素块。然后删掉大量高频率空间数据，很多人眼看不出的小细节，可以删掉用一个简单的块来代替。<br> <img src="/images/Screenshot_20250426_112408.jpg"><br> 对所有 8x8 块做一样的操作，图片依然可以认出是什么，只是更粗糙一些。这个例子比较极端，进行了高度压缩，通常可以取得平衡，图片看起来差不多，但文件小不少。</p></li><li><p>视频只是一长串连续图片，所以图片的很多方面也适用于视频，但视频可以做一些小技巧，因为帧和帧之间很多像素一样。比如背景，视频里不用每一帧都存这些像素，这叫<strong>时间冗余</strong>。我们可以利用了帧和帧之间的相似性，只存变了的部分，这比存所有像素更有效率。更高级的视频压缩格式会更进一步，找出帧和帧之间相似的<strong>补丁</strong>，然后用简单效果实现，比如移动和旋转，变亮和变暗。视频压缩器识别到相似性时，会用一个或多个补丁代表相似物体，然后帧之间直接移动这些补丁，所以你看到的不是实时的物体。</p></li><li><p><strong>MPEG-4</strong> 是常见标准，可以比原文件小20倍到200倍，但用补丁的移动和旋转来更新画面，当压缩太严重时会出错，没有足够空间更新补丁内的像素。即使补丁是错的，视频播放器也会照样播放，导致一些怪异又搞笑的结果。</p><p><img src="/images/Screenshot_20250426_112433.jpg"></p></li><li><p>学习压缩非常重要，因为可以高效存储图片，音乐，视频，如果没有压缩看多人共享实时影像几乎不可能，因为你的带宽可能不够（会很卡），而且供应商不愿意免费传输那么多数据。</p></li></ol><h2 id="第-22-集-命令行界面"><a href="#第-22-集-命令行界面" class="headerlink" title="第 22 集 命令行界面"></a>第 22 集 命令行界面</h2><ol><li><p>早期机械计算设备的<strong>人机交互</strong>使用齿轮，旋钮和开关等机械结构来输入输出，甚至早期电子计算机比如 Colossus 和 ENIAC，也是用一大堆机械面板和线来操作。输入一个程序可能要几星期，还没算上运行时间，运行完毕后想拿出数据，一般是打印到纸上。</p></li><li><p>到 1950 年代，机械输入完全消失，出现了<strong>打孔纸卡</strong>和磁带，但输出仍然是打印到纸上，还有大量指示灯，在运行中提供实时反馈，那个时代的特点是尽可能迁就机器，对人类好不好用是其次。例如打印纸带，为了方便计算机读取，纸带是连续的，纸孔可以方便地用机械或光学手段识别。而程序员则要花额外时间和精力转成计算机能理解的格式。</p></li><li><p>因为机器太贵了不能等人类慢慢敲命令和给数据，所以要同时放入程序和数据，这在 1950 年代晚期开始发生变化，一方面，小型计算机变得足够便宜，让人类来回和计算机交互变得可以接受，而另一方面大型计算机变得更快，能同时支持多个程序和多个用户。交互式操作时计算机需要某种方法来获得用户输入，人们借用了当时已经存在的数据录入机制：<strong>键盘</strong>。现代打字机是<strong>克里斯托弗·莱瑟姆·肖尔斯</strong>在 1868 年发明的，肖尔斯的打字机用了不寻常的布局，QWERTY，肖尔斯和他的团队设计了很多版才进化到这个布局。</p><blockquote><p>过去一个世纪有不少新的键盘布局被发明，宣称各种好处，但人们已经熟悉了 QWERTY 布局根本不想学新布局，这是经济学家所说的<strong>转换成本</strong>，所以现在都快1个半世纪了我们还在用 QWERTY 键盘布局。当然，有很多变体，比如法国 AZERTY 布局，以及中欧常见的 QWERTZ 布局。</p></blockquote><blockquote><p>早期计算机用了一种特殊打字机，是专门用来发电报的,叫<strong>电传打字机</strong>,这些打字机是强化过的，可以用电报线发送和接收文本,按一个字母，信号会通过电报线，发到另一端,另一端的电传打字机会打出来,使得两人可以长距离沟通,基本是个蒸汽朋克版聊天室。</p></blockquote></li><li><p>输入命令 <strong>ls</strong>，名字来自 list 的缩写，计算机会列出当前目录里的所有文件，<strong>unix</strong> 用 cat 命令显示文件内容，<strong>cat</strong> 是连接(concatenate)的缩写，然后指定文件名，指定的方法是写在 cat 命令后面，传给命令的值叫 参数。如果同一个网络里有其他人，可以用 <strong>finger</strong> 命令找朋友。<br><img src="/images/Screenshot_20250426_123525.jpg"></p></li><li><p>电传打字机直到1970年代左右都是主流交互方式，尽管屏幕最早出现在 1950 年代但对日常使用太贵而且分辨率低。然而因为针对普通消费者的电视机开始量产同时处理器与内存也在发展，到1970年代，屏幕代替电传打字机变得可行。与其为屏幕专门做全新的标准，工程师直接用现有的电传打字机协议，屏幕就像无限长度的纸，除了输入和输出字，没有其它东西，协议是一样的，所以计算机分不出是纸还是屏幕，这些”虚拟电传打字机”或”玻璃电传打字机”叫终端。到 1970 年代末屏幕成了标配，命令行界面太原始了，但即便只有文字程序员也找到了一些方法，让它变得有趣一些。</p><blockquote><p>例如早期的著名交互式文字游戏 <strong>Zork</strong>，出现于 1977 年早期游戏玩家需要丰富的想象力，想像自己身在虚构世界，比如”四周漆黑一片附近可能有怪物会吃掉你”。由 <strong>Will Crowther</strong> 在 1976 年开发，游戏中，玩家可以输入1个词或2个词的命令来移动人物，和其他东西交互，捡物品等，然后游戏会像旁白一样，输出你的当前位置，告诉你能做什么动作，以及你的动作造成的结果。<br><img src="/images/Screenshot_20250426_123518.jpg"><br>原始版本只有 66 个地方可供探索，但它被广泛认为是最早的互动式小说。游戏后来从纯文字进化成多人游戏简称 <strong>MUD</strong>，或多人地牢游戏，是如今 <strong>MMORPG</strong> 的前辈（大型多人在线角色扮演游戏)。</p></blockquote></li><li><p>命令行界面虽然简单但十分强大，编程大部分依然是打字活所以用命令行比较自然，即使是现在大多数程序员工作中依然用命令行界面。而且用命令行访问远程计算机是最常见的方式，比如服务器在另一个国家，我们可以在 Windows 搜索栏中输入 <strong>cmd</strong>或在 Mac 上搜 <strong>Terminal</strong>，然后就可以装 Zork 玩！</p></li></ol><h2 id="第-23-集-屏幕-2D图形显示"><a href="#第-23-集-屏幕-2D图形显示" class="headerlink" title="第 23 集  屏幕 &amp; 2D图形显示"></a>第 23 集  屏幕 &amp; 2D图形显示</h2><ol><li><p>早期的屏幕无法显示清晰的文字,而打印到纸上有更高的对比度和分辨率,早期屏幕的典型用途是跟踪程序的运行情况,比如寄存器的值。到1960年代，人们开始用屏幕做很多酷炫的事情，几十年间出现了很多显示技术，但最早最有影响力的是<strong>阴极射线管</strong>（CRT），原理是把电子发射到有磷光体涂层的屏幕上。当电子撞击涂层时会发光几分之一秒，由于电子是带电粒子，路径可以用磁场控制，屏幕内用板子或线圈把电子引导到想要的位置，既然可以这样控制，有 2 种方法绘制图形：</p><ol><li><p>引导电子束描绘出形状，这叫”<strong>矢量扫描</strong>“，因为发光只持续一小会儿，如果重复得足够快可以得到清晰的图像。</p></li><li><p>按固定路径，一行行来从上向下，从左到右，不断重复，只在特定的点打开电子束，以此绘制图形，这叫 “<strong>光栅扫描</strong>“，用这种方法，可以用很多小线段绘制形状甚至文字。</p></li></ol><p>因为显示技术的发展，我们终于可以在屏幕上显示清晰的点，叫”像素”，液晶显示器，简称 <strong>LCD</strong>，和以前的技术相当不同，但 LCD 也用光栅扫描，每秒更新多次像素里红绿蓝的颜色。</p></li><li><p>因为像素占太多内存，很多早期计算机不用像素，计算机科学家和工程师，得想一些技巧来渲染图形等内存发展到足够用。早期计算机不存大量像素值 而是存符号，80x25个符号最典型，如果每个字符用 8 位表示，比如用 ASCII，总共才 16000 位，这种大小更合理，为此，计算机需要额外硬件，来从内存读取字符，转换成光栅图形，这样才能显示到屏幕上。这个硬件叫 “<strong>字符生成器</strong>“，基本算是第一代<strong>显卡</strong>，它内部有一小块只读存储器，简称 <strong>ROM</strong>。存着每个字符的图形，叫”点阵图案”，如果图形卡看到一个 8 位二进制，发现是字母 K，那么会把字母 K 的点阵图案光栅扫描显示到屏幕的适当位置。为了显示，”字符生成器” 会访问内存中一块特殊区域这块区域专为图形保留，叫 <strong>屏幕缓冲区</strong>。程序想显示文字时，修改这块区域里的值就行。字符集实在太小，做不了什么复杂的事，因此对 ASCII 进行了各种扩展，加新字符。</p></li><li><p>字符生成器是一种省内存的技巧，但没办法绘制任意形状，绘制任意形状很重要，因为电路设计，建筑平面图，地图，好多东西都不是文字。为了绘制任意形状，同时不吃掉所有内存，计算机科学家用 CRT 上的”矢量模式”，概念非常简单：所有东西都由线组成。如果要显示文字，就用线条画出来。</p></li><li><p>1962 年是一个大里程碑 <strong>Sketchpad</strong> 诞生，一个交互式图形界面，用途是计算机辅助设计 (CAD)，它被广泛认为是第一个完整的图形程序，发明人 伊万·萨瑟兰 后来因此获得图灵奖。为了与图形界面交互 Sketchpad 用了当时发明不久的输入设备 <strong>光笔</strong>。一个有线连着电脑的触控笔，笔尖用光线传感器，可以检测到显示器刷新，笔尖用光线传感器，可以检测到显示器刷新，通过判断刷新时间，电脑可以知道笔的位置，有了光笔和各种按钮 用户可以画线和其他简单形状。Sketchpad 可以让线条完美平行，长度相同，完美垂直90度，甚至动态缩放。用户还可以保存设计结果，方便以后再次使用，甚至和其他人分享。你可以有一整个库，里面有电子元件和家具之类的，可以直接拖进来用。Sketchpad 和光笔让人大开眼界，它们代表了人机交互方式的关键转折点。</p></li><li><p>最早用真正像素的计算机和显示器出现于 1960 年代末，内存中的位(Bit) 对应屏幕上的像素，这叫 <strong>位图显示</strong>。现在我们可以把图形想成一个巨大像素值矩阵，绘制任意图形了。计算机把像素数据存在内存中一个特殊区域叫”<strong>帧缓冲区</strong>“，早期时，这些数据存在内存里后来存在高速视频内存里，简称 <strong>VRAM</strong>。VRAM 在显卡上，这样访问更快如今就是这样做的。程序可以操纵”帧缓冲区”中的像素数据，实现交互式图形。程序员不会浪费时间从零写绘图函数而是用预先写好的函数来做，画直线，曲线，图形，文字等。</p></li></ol><h2 id="第-25-集-个人计算机革命"><a href="#第-25-集-个人计算机革命" class="headerlink" title="第 25 集 个人计算机革命"></a>第 25 集 个人计算机革命</h2><ol><li><p>“第一台个人计算机”这个名号，有很多竞争者，不过第一台取得商业成功的个人计算机争议较小：<strong>Altair 8800</strong>，首次亮相在 1975 年《Popular Electronics》封面，售价 $439 美元，需要自己组装。但程序还是要用 机器码写，写起来很麻烦，即使计算机爱好者也讨厌写，年轻的<strong>比尔·盖茨和保罗·艾伦</strong>他们当时是19岁和22岁，联系了制造 Altair 8800 的 MITS 公司，建议说，如果能运行 <strong>BASIC</strong> 程序会对爱好者更有吸引力。BASIC 是一门更受欢迎更简单的编程语言，为此，他们需要一个程序把 BASIC 代码转成可执行机器码，这叫 <strong>解释器</strong> (interpreter)。”解释器”和”编译器”类似，区别是”解释器”运行时转换而”编译器”提前转换。</p></li><li><p>MITS 表示感兴趣，同意与 Bill 和 Paul 见个面，让他们演示一下，问题是，他们还没写好解释器，所以他们花了几个星期赶工，最后在飞机上完成了代码。他们在墨西哥阿尔伯克基（城市）的 MITS 总部做演示时，才知道代码可以成功运行，幸运的是进展顺利 MITS 同意在计算机上搭载他们的软件，Altair BASIC 成了微软的第一个产品。</p></li><li><p>Altair 8800 大量催生了更多计算机爱好者，最具传奇色彩的小组是”家酿计算机俱乐部”，第一次小组聚会在1975年3月24岁的 Steve Wozniak  被 Altair 8800 大大激励，开始想设计自己的计算机。1976年5月，他向小组展示了原型机，他的设计不同寻常要连到电视显示，并提供文本界面，同是俱乐部成员和大学朋友的 <strong>史蒂夫·乔布斯</strong>，建议说与其免费分享设计，不如直接出售装好的主板，但用户依然需要自己加键盘，电源和机箱，1976年7月开始发售，价格$666.66美元，它叫 <strong>Apple-I</strong> ，苹果计算机公司的第一个产品。</p></li><li><p>1977 年市场上有了三款开箱即用的计算机，第一款是 <strong>Apple-II</strong>，苹果公司第一个提供全套设备的产品，设计和制造工艺都是专业的，它还提供了简单彩色图形和声音输出，这些功能对低成本机器非常了不起，Apple-II 卖了上百万套，把苹果公司推到了个人计算机行业的前沿。第二款是”TRS-80 1型”，由 Tandy 公司生产，由 Radioshack 销售，所以叫 <strong>TRS</strong>。虽然不如 Apple-II 先进但因为价格只有一半，所以卖得很火爆。最后一款是 Commodore PET 2001，有一体化设计，集成了计算机，显示器，键盘和磁带驱动器，目标是吸引普通消费者，计算机和家用电器之间的界限开始变得模糊。它们都自带了 BASIC 解释器，让不那么精通计算机的人也能用 BASIC 写程序。</p></li><li><p>这引起了全球最大计算机公司 <strong>IBM</strong> 的注意，其市场份额从1970年的60％ 在1980年降到了30％左右，因为IBM忽略了增长的”微型计算机”市场。随着微型计算机演变成个人计算机，IBM 知道他们需要采取行动。经过短短一年，IBM 个人计算机发布了，简称 <strong>IBM PC</strong>，产品立马取得了成功，长期信任 IBM 品牌的企业买了很多，但最有影响力的是它使用 “<strong>开放式架构</strong>“，有良好的文档和扩展槽使得第三方可以做硬件&#x2F;外设，包括显卡，声卡，外置硬盘，游戏控制杆以及无数其它组件，这刺激了创新，激发了竞争，产生了巨大的生态系统。那些生产非”IBM兼容”计算机的公司 （一般性能更好）都失败了，只有苹果公司在没有”<strong>IBM兼容</strong>“的情况下保持了足够市场份额。苹果公司最终选了相反的方式：”<strong>封闭架构</strong>“，即自己设计一切，用户一般无法加新硬件到计算机中，意味着苹果公司要做自己的计算机，自己的操作系统，还有自己的外围设备，如显示器，键盘和打印机，通过控制整个范围，从硬件到软件，苹果能控制用户体验并提高可靠性。</p></li><li><p>为了在低成本个人计算机的竞争冲击下生存下来，苹果需要提高自身水平 提供比 PC 和 DOS 更好的用户体验，他们的答案是 <strong>Macintosh</strong>，于 1984 年发布，一台突破性价格适中的一体式计算机用的不是命令行界面，而是<strong>图形界面</strong>，还带一个鼠标。</p></li></ol><h2 id="第-26-集-图形用户界面"><a href="#第-26-集-图形用户界面" class="headerlink" title="第 26 集  图形用户界面"></a>第 26 集  图形用户界面</h2><ol><li><p>人们认为是 Macintosh 把图形用户界面（GUI）<strong>Graphical User Interfaces</strong> 变成主流，但实际上图形界面是数十年研究的成果。现代图形界面的先驱可以说是 <strong>道格拉斯·恩格尔巴特</strong>。</p><blockquote><p>二战期间恩格尔巴特驻扎在菲律宾做雷达操作员，他读了万尼瓦尔·布什的 Memex 文章，这些文章启发了他。当他海军服役结束时，他回到学校 1955年在 UCB 取得博士学位，他沉溺于新兴的计算机领域。他在1962年一份开创性报告中汇集了各种想法，报告名为：”<strong>增强人类智力</strong>“。恩格尔巴特认为，人类面临的问题比解决问题的能力增长得更快，因此，找到增强智力的方法似乎是必要且值得一做的目标。他构想计算机不仅做自动化工作，也可以成为未来知识型员工应对复杂问题的工具。伊凡·苏泽兰 的”几何画板”进一步启发了恩格尔巴特，他决定动手把愿景变为现实开始招募团队来做 oN-Line System。他意识到如果只有键盘对他想搭建的程序来说是不够的，1964年，和同事比尔·英格利希的共同努力下，他创造了第一个<strong>计算机鼠标</strong>，尾部有一根线，看起来很像老鼠。</p></blockquote></li><li><p>1968年 恩格尔巴特在”秋季计算机联合会议”展示了他的系统，这次演示 被视为如今所有<strong>演示</strong>（demo）的祖先，演示有90分钟展现了现代计算机的许多功能：包括位图图像，视频会议，文字处理，和实时协作编辑文件。还有现代图形界面的原型比如鼠标和多窗口，不过窗口不能重叠。就像其它”跨时代”的产品一样，它最终失败了，但它对当时的计算机研究者影响巨大，恩格尔巴特因此获得1997年图灵奖。</p></li><li><p>为了让计算机易于使用，需要的不只是花哨的图形，还要借助一些人们已经熟悉的概念。让人们不用培训就能很快明白如何使用，施乐的答案是将2D屏幕当作”<strong>桌面</strong>“，就像桌面上放很多文件一样，用户可以打开多个程序，每个程序都在一个框里，叫”窗口”。<br><img src="/images/Screenshot_20250426_142711.jpg"><br>就像桌上的文件一样，窗口可以重叠，挡住后面的东西，还有桌面配件，比如计算器和时钟。用户可以把配件在屏幕上四处移动，它不是现实桌面的完美复制，而是用桌面这种隐喻，因此叫”<strong>桌面隐喻</strong>“。有很多方法来设计界面但 Alto 团队用窗口，图标，菜单和指针来做，因此叫 <strong>WIMP 界面</strong>。</p></li><li><p>如今大部分图形界面都用这个，它还提供了一套基本部件，可复用的基本元素比如按钮，打勾框，滑动条和标签页，GUI 程序就是这些小组件组成的。</p><blockquote><p>试着写一个简单例子，首先，我们必须告诉操作系统为程序创建一个窗口，通过 GUI API 实现需要指定窗口的名字和大小，假设是 500×500 像素，现在再加一些小组件，一个文本框和一个按钮。创建它们需要一些参数，首先要指定出现在哪个窗口因为程序可以有多个窗口，还要指定默认文字窗口中的 X,Y 位置以及宽度和高度。现在我们有个看起来像 GUI 程序的东西但如果点 Roll 按钮，什么也不会发生，在之前的例子中，代码是从上到下执行的，但 GUI 是 “<strong>事件驱动编程</strong>“，代码可以在任意时间执行以响应事件。这里是用户触发事件 比如点击按钮，选一个菜单项，或滚动窗口。假设当用户点 Roll 按钮，产生1到20之间的随机数，然后在文本框中，显示这个数字，我们可以写一个函数来做到这些，最后，把代码与”事件”相连每次点按钮时都触发代码。<br><img src="/images/Screenshot_20250426_142733.jpg"></p></blockquote></li><li><p>施乐卖的是印刷机但在文本和图形制作工具领域也有领先，例如，他们首先使用了”<strong>剪切</strong>“”<strong>复制</strong>“”<strong>粘贴</strong>“这样的术语。这个比喻来自编辑打字机文件，真的是剪刀”剪切”然后胶水”粘贴” 到另一个文件。苹果第一款有图形界面和鼠标的产品，是 1983 年发行的 Apple Lisa，虽然比施乐之星便宜不少但在市场上同样失败。苹果的另一个项目Macintosh，于 1984 年发布，它成功了，开售100天就卖了7万台。一个大问题是：没人给这台新机器做软件，之后情况变得更糟，竞争对手赶上来了。随着苹果的财务状况日益严峻以及和苹果新 CEO <strong>约翰·斯卡利</strong>的关系日益紧张，史蒂夫乔布斯被赶出了苹果公司。几个月后，<strong>微软</strong>发布了 <strong>Windows 1.0</strong>，它也许不如 Mac OS 漂亮，但让微软在市场中站稳脚跟奠定了统治地位。十年内，95％的个人计算机上都有微软的 Windows。Windows 早期版本都是基于 DOS 而 DOS 设计时没想过运行图形界面，但 Windows 3.1 之后微软开始开发新的，面向消费者的 GUI 操作系统叫 <strong>Windows 95</strong>。这是一个意义非凡的版本不仅提供精美的界面，还有 Mac OS 没有的高级功能，比如”<strong>多任务</strong>“和”<strong>受保护内存</strong>“，Windows 95 引入了许多如今依然见得到的 GUI 元素，比如开始菜单，任务栏和 Windows 文件管理器。</p></li><li><p>今天无论你用的是Windows，Mac，Linux 或其他 GUI，几乎都是施乐奥托 WIMP 的变化版。</p></li></ol><h2 id="第-27-集-3D-图形"><a href="#第-27-集-3D-图形" class="headerlink" title="第 27 集 3D 图形"></a>第 27 集 3D 图形</h2><ol><li><p>在3D图像中, 点的坐标不再是两点, 而是三点, X,Y,Z，但2D的电脑屏幕上不可能有 XYZ 立体坐标轴，所以有图形算法负责把3D坐标”拍平”显示到2D屏幕上，这叫”<strong>3D投影</strong>“。所有的点都从3D转成2D后，就可以用画2D线段的函数来连接这些点，这叫 “<strong>线框渲染</strong>“。在3D图形学中我们叫三角形”多边形”(Polygons)，一堆多边形的集合叫 <strong>网格</strong>，网格越密，表面越光滑，细节越多，但意味着更多计算量，游戏设计者要平衡角色的真实度和多边形数量。因此有算法用来简化网格，之所以三角形更常用而不是用正方形，或其它更复杂的图形，是因为三角形的简单性，如果给3个3D点，我能画出一个平面，而且只有这一个答案。</p></li><li><p>3D图像需要填充，填充图形的经典算法叫 <strong>扫描线渲染</strong> (Scanline Rendering)于1967年诞生在犹他州大学，扫描线算法先读多边形的3个点，找最大和最小的Y值，只在这两点间工作，然后算法从上往下，一次处理一行，计算每一行和多边形相交的2个点，因为是三角形,如果相交一条边, 必然相交另一条。扫描线算法会填满2个相交点之间的像素。填充的速度叫 fillrate（填充速率），这样的三角形比较丑，边缘满是锯齿，一种减轻锯齿的方法叫<strong>抗锯齿</strong>(Antialiasing)。与其每个像素都涂成一样的颜色，可以判断多边形切过像素的程度，来调整颜色，如果像素在多边形内部，就直接涂颜色，如果多边形划过像素，颜色就浅一些，这种边缘羽化的效果看着更舒服些，抗锯齿被广泛使用，比如字体和图标。</p></li><li><p>在3D场景中，多边形到处都是，但只有一部分能看见因为其它的被挡住了这叫<strong>遮挡</strong>。最直接的处理办法是用排序算法，从远到近排列，然后从远到近渲染，这叫 <strong>画家算法</strong> 因为画家也是先画背景，然后再画更近的东西。还有一种方法叫 <strong>深度缓冲</strong>，因为这个算法不用排序，所以速度更快，简而言之，Z-buffering 算法会记录场景中每个像素和摄像机的距离，在内存里存一个数字矩阵，每个像素的距离被初始化为”无限大”，然后 Z-buffering 从列表里第一个多边形开始处理，也就是A，它和扫描线算法逻辑相同，但不是给像素填充颜色，而是把多边形的距离和 Z-Buffer 里的距离进行对比，它总是记录更低的值。</p></li><li><p>3D游戏中有个优化叫 <strong>背面剔除</strong>，三角形有两面,正面和背面，游戏角色的头部或地面，只能看到朝外的一面，所以为了节省处理时间，会忽略多边形背面，减了一半多边形面数，但有个bug是如果进入模型内部往外看头部和地面会消失。3D场景中, 物体表面应该有明暗变化，为了举例，我们从茶壶上挑3个不同位置的多边形，这次要考虑这些多边形面对的方向，它们不平行于屏幕，而是面对不同方向，他们面对的方向叫 “<strong>表面法线</strong>“，我们可以用一个垂直于表面的小箭头来显示这个方向，现在加个光源，每个多边形被照亮的程度不同有的更亮，因为面对的角度导致更多光线反射到观察者。</p><blockquote><p>举个例子，底部的多边形向下倾斜，远离光源，所以更暗一些，类似的，最右的多边形更背对光源所以只有部分照亮，最后是左上角的多边形，因为它面对的角度意味着会把光线反射到我们这里，所以会显得更亮。这叫 <strong>平面着色</strong>，是最基本的照明算法。</p></blockquote></li><li><p>为了使多边形的边界不明显，看起来更光滑，因此开发了更多算法比如 高洛德着色 和 冯氏着色，不只用一种颜色给整个多边形上色而是以巧妙的方式改变颜色，得到更好的效果。再大的场景，过程都是一样的一遍又一遍，处理所有多边形，扫描线填充, 抗锯齿, 光照, 纹理化。为了加速渲染，我们可以把3D场景分解成多个小部分，然后并行渲染，而不是按顺序渲染。CPU不是为此设计的，因此图形运算不快，所以，计算机工程师为图形做了专门的处理器，叫 <strong>GPU</strong> “<strong>图形处理单元</strong>“。GPU 在显卡上，周围有专用的 RAM，所有网格和纹理都在里面，让 GPU 的多个核心可以高速访问，现代显卡，如 GeForce GTX 1080 TI，有3584个处理核心，提供大规模并行处理，每秒处理上亿个多边形！</p></li></ol><h2 id="第-28-集-计算机网络"><a href="#第-28-集-计算机网络" class="headerlink" title="第 28 集 计算机网络"></a>第 28 集 计算机网络</h2><ol><li><p>我们可能觉得计算机和网络密切相关，但事实上，1970年以前大多数计算机是独立运行的。然而因为大型计算机开始随处可见，分享数据和资源渐渐变得有用起来，首个计算机网络出现了。第一个计算机网络出现在1950~1960年代，通常在公司或研究室内部使用，为了方便信息交换，比把纸卡或磁带送到另一栋楼里更快速可靠，这叫”<strong>球鞋网络</strong>“。第二个好处是能共享物理资源，举个例子，与其每台电脑配一台打印机可以共享一台联网的打印机，早期网络也会共享存储空间，因为每台电脑都配存储器太贵了。</p></li><li><p>计算机近距离构成的小型网络叫<strong>局域网</strong>，简称<strong>LAN</strong>。局域网能小到是同一个房间里的两台机器，或大到校园里的上千台机器。尽管开发和部署了很多不同 LAN 技术，其中最著名和成功的是”<strong>以太网</strong>“, 开发于1970年代在施乐的”帕洛阿尔托研究中心”诞生, 今日仍被广泛使用。以太网的最简单形式是：一条以太网电线连接数台计算机，当一台计算机要传数据给另一台计算机时，它以电信号形式，将数据传入电缆，以太网需要每台计算机有唯一的 媒体访问控制地址简称 <strong>MAC地址</strong>，这个唯一的地址放在头部，作为数据的前缀发送到网络中。所以，计算机只需要监听以太网电缆，只有看到自己的 MAC 地址，才处理数据。现在制造的每台计算机都自带唯一的MAC地址，用于以太网和无线网络。</p></li><li><p>多台电脑共享一个传输媒介，这种方法叫 “<strong>载波侦听多路访问</strong>“ 简称”CSMA”。以太网的”载体”是铜线 WiFi 的”载体”是传播无线电波的空气。很多计算机同时侦听载体，所以叫”侦听”和”多路访问”，而载体传输数据的速度 叫”<strong>带宽</strong>“。随着网络流量上升两台计算机想同时写入数据的概率也会上升，这叫冲突数据全都乱套了。计算机能够通过监听电线中的信号检测这些冲突，最明显的解决办法是停止传输，等待网络空闲,然后再试一遍，但其他等着的计算机可能在任何停顿间隙闯入，导致越来越多冲突。以太网有个超简单有效的解决方法，当计算机检测到冲突 就会在重传之前等待一小段时间，跟之前一样如果所有计算机用同样的等待时间是不行的，所以加入一个随机时间。但不能完全解决问题，所以要用另一个小技巧。</p><blockquote><p>如果再次发生冲突表明有网络拥塞，这次不等1秒，而是等2秒，如果再次发生冲突 等4秒 然后8秒 16秒等等直到成功传输。因为计算机的退避，冲突次数降低了，数据再次开始流动起来，网络变得顺畅。这种指数级增长等待时间的方法叫：<strong>指数退避</strong>。以太网和WiFi都用这种方法，很多其他传输协议也用。</p></blockquote></li><li><p>为了减少冲突+提升效率，我们需要减少同一载体中设备的数量，载体和其中的设备总称 “冲突域”。为了减少冲突，我们可以用<strong>交换机</strong>把它拆成两个冲突域，交换机位于两个更小的网络之间，必要时才在两个网络间传数据。交换机会记录一个列表写着哪个 MAC 地址在哪边网络，如果F想发数据给A  数据会通过交换机，两个网络都会被短暂占用，大的计算机网络也是这样构建的，包括最大的网络 - 互联网，也是多个连在一起的稍小一点网络使不同网络间可以传递信息。这些大型网络有趣之处是从一个地点到另一个地点通常有多条路线，这就带出了另一个话题 <strong>路由</strong>。连接两台相隔遥远的计算机或网路，最简单的办法是分配一条专用的通信线路，早期电话系统就是这样运作的。传输数据的另一个方法是 “<strong>报文交换</strong>“，不像之前A和B有一条专有线路，消息会经过好几个站点，报文交换的好处是可以用不同路由使通信更可靠更能容错。消息沿着路由跳转的次数叫”<strong>跳数</strong>“(hop count)，记录跳数很有用，因为可以分辨出路由问题。</p><blockquote><p>举例，假设芝加哥认为去米苏拉的最快路线是奥马哈，但奥马哈认为去米苏拉的最快路线是芝加哥，结果报文会在2个城市之间不停传来传去。如果看到某条消息的跳数很高，就知道路由肯定哪里错了。这叫”<strong>跳数限制</strong>“。</p></blockquote></li><li><p>报文交换的缺点之一是有时候报文比较大，会堵塞网络，因为要把整个报文从一站传到下一站后才能继续传递其他报文。传输一个大文件时整条路都阻塞了，即便你只有一个1KB的电子邮件要传输，也只能等大文件传完，或是选另一条效率稍低的路线。解决方法是将大报文分成很多小块，叫”<strong>数据包</strong>“。就像报文交换，每个数据包都有目标地址，因此路由器知道发到哪里。报文具体格式由”互联网协议”定义，简称 <strong>IP</strong> 这个标准创建于 1970 年代，每台联网的计算机都需要一个IP地址。路由器会平衡与其他路由器之间的负载，以确保传输可以快速可靠，这叫”<strong>阻塞控制</strong>“。到达顺序可能会不一样，这对一些软件是个问题，但在 IP 之上还有其他协议，比如 TCP&#x2F;IP, 可以解决乱序问题。</p></li></ol><h2 id="第-29-集-互联网"><a href="#第-29-集-互联网" class="headerlink" title="第 29 集 互联网"></a>第 29 集 互联网</h2><ol><li><p>互联网由无数互联设备组成，而且日益增多。计算机为了获取网上的视频，首先要连到局域网，也叫 <strong>LAN</strong>。你家 WIFI 路由器连着的所有设备，组成了局域网。局域网再连到广域网，广域网也叫 <strong>WAN</strong>。WAN 的路由器一般属于你的”互联网服务提供商”，简称 <strong>ISP</strong>。广域网里，先连到一个区域性路由器，这路由器可能覆盖一个街区。然后连到一个更大的 WAN，可能覆盖整个城市。可能再跳几次，但最终会到达互联网主干。互联网主干由一群超大型、带宽超高路由器组成。</p><blockquote><p>为了获取这个视频，数据包（packet）要先到互联网主干，沿着主干到达有对应视频文件的 YouTube <strong>服务器</strong>。数据包从你的计算机跳到 Youtube 服务器，可能要跳个10次，先跳4次到互联网主干，2次穿过主干，主干出来可能再跳4次，然后到 Youtube 服务器。</p></blockquote></li><li><p>数据包（packet）想在互联网上传输要符合”互联网协议”的标准，简称 <strong>IP</strong>。地址必须是独特的，并且大小和重量是有限制的。因为 IP 是一个非常底层的协议，数据包的头部（或者说前面）只有<strong>目标地址</strong>，头部存 “关于数据的数据”也叫 <strong>元数据</strong>(metadata)。但是不知道把包交给哪个程序，因此需要在 IP 之上，开发更高级的协议。这些协议里最简单最常见的叫”用户数据报协议”，简称 <strong>UDP</strong>。UDP 也有头部，这个头部位于数据前面，头部里包含有用的信息，信息之一是<strong>端口号</strong>，每个想访问网络的程序，都要向操作系统申请一个端口号。当一个数据包到达时，接收方的操作系统会读 UDP 头部，读里面的端口号，把数据包送到正确的程序。UDP 头部里还有”<strong>校验和</strong>“，用于检查数据是否正确，检查方式是把数据求和来对比。UDP中，”校验和”以 16 位形式存储 (就是16个0或1)，如果算出来的和，超过了 16 位能表示的最大值，高位数会被扔掉，保留低位。当接收方电脑收到这个数据包，把所有数据加在一起，89+111+33… 以此类推，如果结果和头部中的校验和一致代表一切正常。如果不一致，数据肯定坏掉了，但 UDP 不提供数据修复或数据重发的机制，接收方知道数据损坏后，一般只是扔掉。发送方发了之后，无法知道数据包是否到达目的地，但是有些程序不在意这些问题，因为 UDP 又简单又快。</p></li><li><p>如果”所有数据必须到达”就用”<strong>传输控制协议</strong>“，简称 <strong>TCP</strong>。TCP 和 UDP 一样，头部也在存数据前面，包括这二者在内的一系列协议被称为TCP&#x2F;IP协议族。就像 UDP ，TCP 头部也有”端口号”和”校验和”，但 TCP 有更高级的功能。其中重要的几个：</p><ol><li>TCP 数据包有<strong>序号</strong>，15号之后是16号，16号之后是17号，以此类推 发上百万个数据包也是有可能的。序号使接收方可以把数据包排成正确顺序，即使到达时间不同。</li><li>TCP 要求接收方的电脑收到数据包并且”校验和”检查无误后（数据没有损坏）给发送方发一个<strong>确认码</strong>，代表收到了。”确认码” 简称 ACK 得知上一个数据包成功抵达后，发送方会发下一个数据包。假设这次发出去之后，没收到确认码那么肯定哪里错了。如果过了一定时间还没收到确认码发送方会再发一次，注意：数据包可能的确到了，只是确认码延误了很久，或传输中丢失了。但这不碍事，因为收件方有序列号，如果收到重复的数据包就删掉。TCP可以同时发多个数据包，收多个确认码，这大大增加了效率，不用浪费时间等确认码。确认码的成功率和来回时间可以推测网络的拥堵程度。TCP 用这个信息，调整同时发包数量，解决拥堵问题。简单说，TCP 可以处理乱序和丢失数据包，丢了就重发，还可以根据拥挤情况自动调整传输率。</li></ol><p>TCP 最大的缺点是那些”确认码”数据包把数量翻了一倍,但并没有传输更多信息。有时候这种代价是不值得的，特别是对时间要求很高的程序，比如在线射击游戏。</p></li><li><p>当计算机访问一个网站时需要两个东西：1.IP地址 2.端口号,例如172.217.7.238 的 80 端口,这是谷歌的 IP 地址和端口号。输到浏览器里，然后就会进入谷歌首页。就像专为互联网的电话簿,它叫”<strong>域名系统</strong>“，简称 <strong>DNS</strong>。互联网有个特殊服务负责把<strong>域名</strong>和 IP 地址一一对应,显然 google.com 比一长串数字好记。在浏览器里输 youtube.com 浏览器会去问 <strong>DNS 服务器</strong>，它的 IP 地址是多少。一般 DNS 服务器是互联网供应商提供的,DNS 会查表，如果域名存在，就返回对应 IP 地址。然后浏览器会给这个 IP 地址发 <strong>TCP</strong> 请求来建立连接,如今有三千万个注册域名，所以为了更好管理,DNS 不是存成一个超长超长的列表，而是存成树状结构。<strong>顶级域名</strong>（简称 <strong>TLD</strong>）在最顶部，比如 .com 和 .gov,下一层是<strong>二级域名</strong>，比如 .com 下面有 google.com 和 dftba.com,再下一层叫<strong>子域名</strong>，比如 images.google.com, store.dftba.com,”三千万个域名”只是二级域名不是所有子域名。这些数据散布在很多 DNS 服务器上,不同服务器负责树的不同部分。</p></li><li><p>线路里的电信号，以及无线网络里的无线信号,这些叫”<strong>物理层</strong>“。而”<strong>数据链路层</strong>“负责操控”物理层”，数据链路层有：媒体访问控制地址（MAC），碰撞检测，指数退避，以及其他一些底层协议,再上一层是”<strong>网络层</strong>“:(IP)负责各种报文交换和路由,”<strong>传输层</strong>“比如 UDP 和 TCP 这些协议,负责在计算机之间进行点到点的传输,而且还会检测和修复错误。”<strong>会话层</strong>“使用 TCP 和 UDP 来创建连接，传递信息，然后关掉连接。查询 DNS 或看网页时，就会发生这一套流程。这是 <strong>开放式系统互联通信参考模型(OSI)</strong> 的底下5层。这个概念性框架把网络通信划分成多层,每一层处理各自的问题,如果不分层直接从上到下捏在一起实现网络通信，是完全不可能的。OSI 模型还有两层，”表示层”和”应用程序层”,其中有浏览器，Skype，HTML解码，在线看电影等。</p></li></ol><h2 id="第-30-集-万维网"><a href="#第-30-集-万维网" class="headerlink" title="第 30 集 万维网"></a>第 30 集 万维网</h2><ol><li><p>万维网(World Wide Web)和互联网(Internet)不是一回事,万维网在互联网上运行,互联网是传递数据的管道，各种程序都会用，其中<strong>传输最多数据的程序</strong>是<strong>万维网</strong>,分布在全球数百万个服务器上,可以用”浏览器”来访问万维网。</p></li><li><p>万维网的最基本单位，是单个页面,页面有内容，也有去往其他页面的链接 ,这些链接叫”<strong>超链接</strong>“。</p><p><img src="/images/Screenshot_20250426_200729.jpg"></p><p>这些<strong>超链接形成巨大的互联网络</strong>,这就是”万维网”名字的由来。</p><p><img src="/images/Screenshot_20250426_200740.jpg"></p><p>现在说起来觉得很简单，但在超链接做出来之前,计算机上每次想看另一个信息时,你需要在文件系统中找到它或是把地址输入搜索框,有了超链接，你可以在相关主题间轻松切换。因为文字超链接是如此强大,它得到了一个同样厉害的名字：”<strong>超文本</strong>“。如今超文本最常指向的，是另一个网页然后网页由浏览器渲染。为了使网页能相互连接，每个网页需要一个唯一的地址,这个地址叫 “<strong>统一资源定位器</strong>“，简称 <strong>URL</strong>。一个网页URL的例子是 “thecrashcourse.com&#x2F;courses”。</p><blockquote><p>当你访问一个网站时计算机首先会做”DNS查找”,DNS 会输出对应的IP地址,有了IP地址浏览器会发送 TCP 请求连接到这个 IP 地址,这个地址运行着”网页服务器”。网页服务器的标准端口是 80 端口,你的计算机连到了 thecrashcourse.com 的服务器,下一步是向服务器请求”courses”这个页面,这里会用”<strong>超文本传输协议</strong>“(<strong>HTTP</strong>)。HTTP的第一个标准，HTTP 0.9，创建于1991年,只有一个指令，”GET” 指令。我们向服务器发送指令:”GET &#x2F;courses”,该指令以”ASCII编码”发送到服务器,服务器会返回该地址对应的网页,然后浏览器会渲染到屏幕上。如果用户点了另一个链接，计算机会重新发一个GET请求,你浏览网站时，这个步骤会不断重复。在之后的版本，HTTP添加了<strong>状态码</strong>,状态码放在请求前面。</p><p><img src="/images/Screenshot_20250426_200845.jpg"></p><p>举例，状态码 200 代表 “网页找到了,给你”,状态码400~499代表客户端出错,比如网页不存在，就是可怕的404错误。</p></blockquote></li><li><p>“超文本”的存储和发送都是以普通文本形式,如果只有纯文本无法表明什么是链接，什么不是链接,所以有必要开发一种标记方法,因此开发了超文本标记语言（<strong>HTML</strong>)。HTML 第一版的版本号是 0.8，创建于 1990 年,有18种HTML指令。</p><p><img src="/images/Screenshot_20250426_200845.jpg"></p><p>如今的网页更复杂一些,最新版的 HTML，HTML5，有100多种标签,图片标签，表格标签，表单标签，按钮标签等等,还有其他相关技术比如 <strong>层叠样式表</strong> (<strong>CSS</strong>)和 <strong>JavaScript</strong>。</p></li><li><p>随着万维网日益繁荣，人们越来越需要搜索,如果你知道网站地址比如 ebay.com，直接输入浏览器就行,但不知道呢?起初人们会维护一个目录，链接到其他网站,其中最有名的叫”Jerry和David的万维网指南”,1994年改名为<strong>Yahoo</strong>。随着网络越来越大，人工编辑的目录变得不便利,所以开发了<strong>搜索引擎</strong>。</p><blockquote><p>长的最像现代搜索引擎的最早搜素引擎，叫JumpStation,由Jonathon Fletcher于1993年在斯特林大学创建。它有 3 个部分,第一个是爬虫，一个跟着链接到处跑的软件,每当看到新链接，就加进自己的列表里,第二个部分是不断扩张的索引,记录访问过的网页上，出现过哪些词,最后一个部分，是查询索引的搜索算法。早期搜索引擎的排名方式非常简单,取决于搜索词在页面上的出现次数。<strong>谷歌</strong>成名的一个很大原因是创造了一个聪明的算法来规避这个问题,与其信任网页上的内容,搜索引擎会看其他网站有没有链接到这个网站。这些”反向链接”的数量，特别是有信誉的网站,代表了网站质量。<strong>Google</strong> 一开始时是 1996 年斯坦福大学一个叫 BackRub 的研究项目,两年后分离出来，演变成如今的谷歌。</p></blockquote></li><li><p>“<strong>网络中立性</strong>“是应该平等对待所有数据包,不论这个数据包是我的邮件，或者是你在看视频,速度和优先级应该是一样的,但很多公司会乐意让它们的数据优先到达。<strong>节流</strong>(Throttled) 意思是故意给更少带宽和更低优先级。”网络中立性”的影响十分复杂而且广泛,这场争辩还会持续很久。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>CS0</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Crash Course Computer Science【计算机科学速成课】(2)</title>
    <link href="/2025/02/25/Crash-Course-Computer-Science%E3%80%90%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E3%80%91(2)/"/>
    <url>/2025/02/25/Crash-Course-Computer-Science%E3%80%90%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E3%80%91(2)/</url>
    
    <content type="html"><![CDATA[<h2 id="感谢速成课！感谢-Carrie-Anne！感谢中文翻译组！"><a href="#感谢速成课！感谢-Carrie-Anne！感谢中文翻译组！" class="headerlink" title="感谢速成课！感谢 Carrie Anne！感谢中文翻译组！~"></a>感谢速成课！感谢 Carrie Anne！感谢中文翻译组！~</h2><h4 id="原视频"><a href="#原视频" class="headerlink" title="原视频"></a>原视频</h4><p><a href="https://www.youtube.com/playlist?list=PL8dPuuaLjXtNlUrzyH5r6jN9ulIgZBpdo">Crash Course Computer Science</a><br><a href="https://github.com/1c7/crash-course-computer-science-chinese">https://github.com/1c7/crash-course-computer-science-chinese</a></p><h2 id="第-11-集：编程语言发展史"><a href="#第-11-集：编程语言发展史" class="headerlink" title="第 11 集：编程语言发展史"></a>第 11 集：编程语言发展史</h2><ol><li><p>计算机只能处理二进制，二进制是处理器的”母语”，称为<strong>machine language</strong>或<strong>machine code</strong></p></li><li><p>在计算机早期阶段，必须用机器码写程序</p><ul><li>先在纸上用英语写一个”高层次版”,这种对程序的高层次描述叫“<strong>伪代码</strong>”，在纸上写好后用“操作码表”转成机器码，喂入计算机运行。</li></ul></li><li><p>在 1940~1950 年代,程序员开发出一种新语言，更可读、更高层次，每个操作码分配一个简单名字，叫”<strong>助记符</strong>“，”助记符”后面紧跟数据，形成完整指令。</p><ul><li>比如存指令在内存地址<code>0</code>：<code>0010 1110</code>，前 4 位是操作码，假设对某CPU<code>0010</code>代表<code> LOAD_A</code> 指令,即把值从内存复制到寄存器A,后 4 位是内存地址，<code>1110</code> 是十进制的 14,所以这 8 位表达的意思是 <strong>“读内存地址 14，放入寄存器 A”</strong></li></ul></li></ol><p><img src="/images/Screenshot_20250329_173619.jpg"></p><ol start="4"><li><p>但是CPU不知道 <code>LOAD_A 14</code> 是什么，于是有了<strong>汇编器</strong>，它可以读取用”汇编语言”写的程序，然后转成”机器码”。</p><ul><li>随着时间推移，汇编器有越来越多功能，让编程更容易，比如自动分析JUMP地址，汇编器不用固定跳转地址，而是让你插入可跳转的标签，当程序被传入汇编器，汇编器会自己搞定跳转地址,程序员可以专心编程，不用管底层细节。<br> <img src="/images/Screenshot_20250329_173655.jpg"></li></ul></li><li><p>一般来说，一条汇编指令对应一条机器指令，所以汇编码和底层硬件的连接很紧密，汇编器仍然强迫程序员思考，用什么寄存器和内存地址。于是 Hopper 设计了一种高级语言，一行高级编程语言，可能会转成几十条二进制指令。为了做到这种复杂转换，Hopper 在 1952 年创造了第一个<strong>编译器</strong>，编译器专门把高级语言，转成低级语言，比如汇编或机器码（CPU 可以直接执行机器码）。</p><ul><li><em>FORTRAN，名字来自 “公式翻译”,这门语言数年后由 IBM 在 1957 年发布,主宰了早期计算机编程</em><br><em>FORTRAN 项目总监 John Backus 说过</em><br><em>“Much of my work has come from being lazy.I didn’t like writing programs,</em><br><em>and so … I started work on a programming system to make it easier to write programs.”</em></li></ul></li><li><p>当时 IBM 在卖计算机,因此最初 FORTRAN 代码只能跑在 IBM 计算机上。1950 年代大多数编程语言和编译器，只能运行在一种计算机上，如果升级电脑，可能要重写所有代码，因此工业界，学术界，政府的计算机专家，在 1959 年组建了一个联盟，数据系统语言委员会，Grace Hopper 担任顾问，开发一种通用编程语言，可以在不同机器上通用，最后诞生了一门高级，易于使用，”普通面向商业语言”，简称 COBOL。</p><ul><li>为了兼容不同底层硬件，每个计算架构需要一个 COBOL 编译器，最重要的是，这些编译器都可以接收相同 COBOL 代码，不管是什么电脑，这叫”一次编写，到处运行”。</li></ul></li><li><p>编程语言设计的黄金时代才刚刚开始，和硬件一起飞速发展</p><ul><li>在 1960 年代，有 ALGOL, LISP 和 BASIC 等语言 70年代有：Pascal，<strong>C</strong> 和 Smalltalk </li><li>80年代有：**C++**，Objective-C 和 Perl</li><li>90年代有：<strong>Python</strong>，Ruby 和 <strong>Java</strong> 新千年 Swift, C#, <strong>Go</strong> 在崛起</li></ul></li></ol><h2 id="第-12-集-编程原理"><a href="#第-12-集-编程原理" class="headerlink" title="第 12 集 编程原理"></a>第 12 集 编程原理</h2><ol><li>以游戏为切入点讲解条件语句，循环语句，函数的使用，体会函数的强大之处和现代编程的核心<ul><li><code>it&#39;s not magic,it&#39;s the power of abstraction</code></li></ul></li><li>比如浏览器这样的复杂程序，用一长串语句来写是不可能的,会有几百万行代码，没人能理解,所以现代软件由上千个函数组成,每个负责不同的事。<br>如今超过100行代码的函数很少见，如果多于 100 行，应该有东西可以拆出来做成一个函数，符合软件设计中“<strong>高内聚低耦合</strong>”的原则。</li><li><strong>模块化编程</strong>，不仅可以让单个程序员独立制作 App，也让团队协作可以写更大型的程序，不同程序员写不同函数，只需要确保自己的代码工作正常。</li><li>现代编程语言 有很多预先写好的函数集合，叫 “<strong>库</strong>“，由专业人员编写，不仅效率高，而且经过了仔细检查，几乎做所有事情都有库，网络、图像、声音。</li></ol><h2 id="第-13-集-编程入门"><a href="#第-13-集-编程入门" class="headerlink" title="第 13 集 编程入门"></a>第 13 集 编程入门</h2><ol><li>如何想出高效的算法是早在计算机出现前就有的问题，记载最多的算法之一是“排序”。</li><li>输入大小和运行步骤数之间的关系称为算法的复杂度，计算机科学家们用“大O表示法”，来表示运行速度的量级。<ul><li>比如 O(N)效率并不高，比如”归并排序”的算法复杂度是 O(n * log n)，n 是每次合并需要比较的次数和数组大小成正比，log N 是合并步骤的次数。<br> <img src="/images/Screenshot_20250329_164342.jpg"></li></ul></li><li>图搜索算法也有很多，有不同优缺点，每次用谷歌地图时，类似<strong>Dijkstra</strong> 的算法就在服务器上运行，寻找最佳路线，现实世界中算法无处不在。</li></ol><h2 id="第-14-集-数据结构"><a href="#第-14-集-数据结构" class="headerlink" title="第 14 集 数据结构"></a>第 14 集 数据结构</h2><ol><li><strong>数组</strong>（Array）也叫<strong>列表</strong>（list）或<strong>向量</strong>（Vector）（在其它编程语言里），数组的值一个个连续存在内存里。<ul><li>可以把多个值存在数组变量里，为了拿出数组中某个值，我们要指定一个下标（index）。大多数编程语言里，数组下标都从 0 开始，用方括号 [ ] 代表访问数组。</li><li>下标可以理解为<strong>偏移量</strong>，<code>offset</code> 为 0 ，说明为数组中第一个数。<br> <img src="/images/Screenshot_20250329_180708.jpg"></li></ul></li><li>字符串在内存里以 0 结尾,不是”字符0”，是”二进制值0”,这叫字符”<strong>null</strong>“，表示字符串结尾。如果调用 print 在屏幕上输出字符串,会从开始位置，逐个显示到屏幕,直到遇到<code>null</code>值停止。</li><li>多个变量打包在一起叫结构体 (Struct),结构体可以创建复杂的数据结构。</li><li>一个结构体存一个变量,一个指针（pointer）叫一个节点(node),”<strong>指针</strong>“是一种特殊变量（注意区分指针和指针变量），指向一个内存地址，用节点可以做链表（linked list）。</li><li><strong>链表</strong>是一种灵活数据结构，能存很多个节点 (node)，灵活性是通过每个节点指向下一个节点实现的。<br> <img src="/images/Screenshot_20250329_180736.jpg"><ul><li>第一个节点，值是 7，指向地址 <code>1008</code>，代表下一个节点，位于内存地址 <code>1008</code>，下一个节点值是 112，指向地址<code>1002</code> 是一个值为 14 的节点。这个节点指回地址 <code>1000</code>，也就是第一个节点。这叫循环链表，但链表也可以是非循环的，最后一个指针是 0，”<code>null</code>“，代表链表尽头。<br> <img src="/images/Screenshot_20250329_180751.jpg"></li></ul></li><li>数组大小需要预先定好,链表大小可以动态增减。<ul><li>可以创建一个新节点，通过改变指针值，把新节点插入链表，链表也很容易重新排序，两端缩减，分割，倒序等。</li></ul></li><li>很多复杂数据结构都用链表，比如<strong>队列</strong>（queue）和 <strong>栈</strong>（stack）<ul><li>队列<strong>先进先出</strong>（FIFO），栈<strong>后进先出</strong>(LIFO) 术语叫”入栈”（push） “出栈”（pop）。</li></ul></li><li>如果节点改一下，改成 2 个指针就能做<strong>树</strong>（tree）。<ul><li>很多算法用了 “树” 这种数据结构，同样，程序员很少看指针的具体值，而是把”树”抽象成这样：最高的节点叫”<strong>根节点</strong>“（root），”根节点”下的所有节点都叫”<strong>子节点</strong>“（children），任何子节点的直属上层节点，叫”<strong>母节点</strong>“（parent node），没有任何子节点的节点，也就是“树”结束的地方叫“<strong>叶节点</strong>”。</li></ul></li></ol><h2 id="第-15-集-阿兰·图灵"><a href="#第-15-集-阿兰·图灵" class="headerlink" title="第 15 集 阿兰·图灵"></a>第 15 集 阿兰·图灵</h2><ol><li>计算机科学之父<strong>阿兰·马蒂森·图灵</strong>于 1921 年出生在伦敦，从小就表现出惊人数学和科学能力。他对计算机科学的建树始于 1935 年，当时他是剑桥国王学院的硕士生，他开始解决德国数学家<strong>大卫·希尔伯特</strong>提出的问题，叫 Entscheidungsproblem （德语）即”<strong>可判定性问题</strong>“:是否存在一种算法，输入正式逻辑语句，输出准确的”是”或”否”答案？</li><li>图灵提出了一种假想的计算机，现在叫“<strong>图灵机</strong>”。图灵机是一台理论计算设备，有一个状态变量保存当前状态，一组规则描述机器着什么，可能是在纸带写入一个符号，或把读写头移动一格，或执行这些动作的组合。<br> <img src="/images/Screenshot_20250412_164742.jpg"><ul><li>比如读一个以零结尾的字符串，并计算 1 的出现次数，出现偶数次在纸带上写一个 1 ，奇数次写一个 0 。要使用图灵机来实现这一动作首先要定义规则，当前符号为 1 ，状态更新为奇数或偶数，读写头向右移动，如果当前符号是 0 ，状态为偶数那么在纸带上写一个 1，状态改为停机。<br> <img src="/images/Screenshot_20250412_164809.jpg"></li></ul></li><li>图灵证明了这个假想机器如果有足够的时间和内存，可以执行任何计算，他是一台通用计算机，一个可以创造任何东西的强大计算模型！但“停机问题”证明了不是所有问题都能用计算解决。</li><li>丘奇和图灵证明了计算是有极限的，起步了可计算性理论，现在叫”丘奇-图灵论题”。当时是1936年，图灵只有24岁。从1936年到1938年在丘奇指导下，他在普林斯顿拿到博士学位。毕业后回到剑桥，1939年后不久，英国卷入第二次世界大战。整个战争期间，图灵和同事在布莱切利园努力破解加密，位于”布莱切利园”的一个密码破译组织，他的工作内容之一是破解德国的通信加密，特别是”<strong>恩尼格玛机</strong>“加密的信息。</li><li>战后，图灵回到学术界为许多早期计算机工作做出贡献，比如曼彻斯特 1 号，一个早期有影响力的存储程序计算机，但他最有名的战后贡献是”<strong>人工智能</strong>“。1950 年，图灵设想了未来的计算机，拥有和人类一样的智力，或至少难以区分，图灵提出如果计算机能欺骗人类相信它是人类，才算是智能。你可以问他问题，如果你区分不出来哪个是人类，哪个是计算机，那么计算机就通过了<strong>图灵测试</strong>。</li><li>图灵那个时代，同性恋在英国和大部分国家都是违法的，1952 年调查他家的入室盗窃案时，向当局暴露了他的性取向，被起诉 “行为严重不检点”。图灵被定罪，有2个选择：1.入狱2.接受激素来压制性欲，他选了后者，部分原因是为了继续学术工作，但药物改变了他的情绪和性格,图灵于1954年服毒自尽，年仅41岁。</li></ol><h2 id="第-16-集-软件工程"><a href="#第-16-集-软件工程" class="headerlink" title="第 16 集 软件工程"></a>第 16 集 软件工程</h2><ol><li>微软的 Office 大约有 4000 万代码，为了写大型程序，程序员用各种工具和方法，所有形成了”软件工程”学科。把大项目分解成小函数，可以让多人同时工作，如果只是这样，微软 Office 会有几十万个函数还是太多了，解决办法是：把函数打包成层级，把相关代码都放在一起，打包成<strong>对象（objects）</strong>。<ul><li>例如，汽车软件中可能有几个和定速巡航有关的函数，比如 设定速度，逐渐加速减速，停止定速巡航因为这些函数都相关，可以包装成一个”定速巡航对象”。可能还有 “火花塞点火” “燃油泵” 和 “散热器”，我们可以做一个”引擎对象” 来包括所有”子”对象。同时也可能有自己的函数和变量。</li><li>总的来说，对象可以包其它对象，函数和变量。把函数打包成对象的思想叫 “<strong>面向对象编程</strong>“</li></ul></li><li>其他团队阅读代码时需要文档帮助理解代码都做什么，以及定义好的 “程序编程接口” -简称<strong>API</strong>，API 帮助不同程序员合作不用知道具体细节，只要知道怎么使用就行了。”面向对象”的编程语言可以指定函数是 public 或 private，来设置权限，”面向对象”的编程语言可以指定函数是 public 或 private，来设置权限，如果函数标记成 private意味着 只有同一个对象内的其他函数能调用它。</li><li>“面向对象”的核心是隐藏复杂度，选择性的公布功能。因为做大型项目很有效，所以广受欢迎，计算机上几乎所有软件，游戏机里几乎所有游戏<br>都是 “面向对象” 编程语言写的，比如 C++, C#, Objective-C 等。</li><li>集成开发环境，简称 IDE，IDE 帮助开发者整理和看代码，很多 IDE 还可以直接编译和运行代码，定位到出错代码，还会提供信息帮你解决问题这叫<strong>调试</strong>（debug）。</li><li>大多数程序员会花 70％~80％ 时间调试，而不是在写代码，好工具能极大帮助程序员防止和解决错误。程序员工作的另一个重要部分是给代码写<strong>文档</strong>，文档一般放在一个叫 README 的文件里告诉其他程序员，看代码前先看这个文件，文档也可以直接写成”注释”，放在源代码里。</li><li>源代码管理也叫”<strong>版本控制</strong>“帮助团队协作，把代码放到一个中心服务器上叫”代码仓库”，这样多名程序员可以同时写代码，建立庞大的系统。源代码管理可以跟踪所有变化，如果发现 bug，全部或部分代码，可以”回滚”到之前的稳定版，”源代码管理” 也记录了谁改了什么代码。</li><li>测试一般由个人或小团队完成，测试可以统称 “质量保证测试”，简称 <strong>QA</strong>。严格测试软件的方方面面，模拟各种可能情况，看软件会不会出错，基本上就是找 bug，解决大大小小的错误需要很多工作但对确保软件质量至关重要，让软件在各种情况下按预期运行。<ul><li>“beta 版” 软件，意思是软件接近完成但不是100％完全测试过。公司有时会向公众发布 beta 版，以帮助发现问题，用户就像免费的 QA 团队。</li><li>alpha 版本般很粗糙，错误很多，经常只在公司内部测试。</li></ul></li></ol><h2 id="第-17-集-集成电路-摩尔定律"><a href="#第-17-集-集成电路-摩尔定律" class="headerlink" title="第 17 集 集成电路 &amp; 摩尔定律"></a>第 17 集 集成电路 &amp; 摩尔定律</h2><ol><li>大约 1940年代~1960年代中期这段时间里计算机都由独立部件组成叫”分立元件”，然后不同组件再用线连在一起。1950 年代中期，晶体管开始商业化（市场上买得到），但晶体管依然是分立元件。</li><li>解决方法就是把多个组件包在一起，变成一个新的独立组件，这就是<strong>集成电路</strong>（IC），在1959年 Robert Noyce 的仙童半导体让集成电路变为现实，仙童半导体公司用硅，硅的蕴藏量丰富，占地壳四分之一，也更稳定可靠，Noyce 被公认为现代集成电路之父。开创了电子时代，创造了硅谷（仙童公司所在地）。</li><li>为了创造更大更复杂的电路，于是有了<strong>印刷电路板</strong>，简称 PCB，PCB 可以大规模生产，无需焊接或用一大堆线，它通过蚀刻金属线的方式，把零件连接到一起。把 PCB 和 IC 结合使用可以大幅减少独立组件和电线，但做到相同的功能。</li><li>为了实现更复杂的设计，需要全新的制作工艺”<strong>光刻</strong>“。光把复杂图案印到材料上，比如半导体。晶圆做基础把复杂金属电路放上面，集成所有东西。<ul><li>硅片顶部加一层薄薄的氧化层, 作为保护层然后加一层特殊化学品, 叫 “光刻胶”，光刻胶被光照射后会变得可溶可以用一种特殊化学药剂洗掉，把光掩膜盖到晶圆上，用强光照射挡住光的地方，光刻胶不会变化，光照到的地方，光刻胶会发生化学变化洗掉它之后，暴露出氧化层用另一种化学物质洗掉”氧化层”露出的部分, 蚀刻到硅层现在硅又露出来了。我们修改硅露出来的区域让它导电性更好，”掺杂”通常用高温气体来做，比如磷，渗透进暴露出的硅，改变电学性质最后一步，在氧化层上做通道放一层薄薄的金属，比如铝或铜，连接不同晶体管。</li></ul></li><li>1965年，戈登·摩尔看到了趋势：每两年左右，得益于材料和制造技术的发展同样大小的空间，能塞进两倍数量的晶体管，叫<strong>摩尔定律</strong>。</li><li>CPU 不是唯一受益的元件，大多数电子器件都在指数式发展：内存，显卡，固态硬盘，摄像头感光元件，等等。</li><li>专家们几十年来一直在预言摩尔定律的终结进一步做小，会面临 2 个大问题1. 用光掩膜把图案弄到晶圆上，因为光的波长，精度已达极限所以科学家在研制波长更短的光源，投射更小的形状2. 当晶体管非常小，电极之间可能只距离几个原子电子会跳过间隙，这叫：<strong>量子隧道贯穿</strong>。如果晶体管漏电，就不是好开关。</li></ol><h2 id="第-18-集-操作系统"><a href="#第-18-集-操作系统" class="headerlink" title="第 18 集 操作系统"></a>第 18 集 操作系统</h2><ol><li><p>我们需要一种方式让计算机自动运作，而不是让操作员去放程序，于是”<strong>操作系统</strong>“诞生了。</p></li><li><p>操作系统，简称 OS，其实也是程序，但它有操作硬件的特殊权限，可以运行和管理其它程序。操作系统一般是开机第一个启动的程序，其他所有程序都由操作系统启动。操作系统开始于 1950 年代那时计算机开始变得更强大更流行。</p></li><li><p>第一个操作系统加强了程序加载方式，之前只能一次给一个程序，现在可以一次多个，当计算机运行完一个程序，会自动运行下一个程序，这就叫“<strong>批处理</strong>”。</p></li><li><p>为了兼容不同型号外部设备，操作系统充当软件和硬件之间的媒介。更具体地说，操作系统提供 API 来抽象硬件，叫”<strong>设备驱动程序</strong>“，程序员可以用标准化机制和输入输出硬件（I&#x2F;O）交互。</p></li><li><p>在单个 CPU 上通过调度来同时运行几个程序，如 print 函数运行需要一点时间，大概上千个时钟周期，但因为打印机比 CPU 慢，与其等着它完成操作，os会把程序休眠，运行另一个程序，把程序标记成可继续运行，之后在某时刻会安排给 CPU 运行，并继续 print 语句之后的下一行代码。使多个程序可同时进行，这叫做“<strong>多任务处理</strong>”。</p></li><li><p>同时运行多个程序会有一个问题，每个程序都会占一些内存，当切换到另一个程序时，我们不能丢失数据。解决方案是给每个程序安排一个专属内存块，举个例子，假设计算机一共有 10000 个内存位置，程序 A 分配到内存地址 0 到 999，而程序 B 分配到内存地址 1000 到 1999，<br><img src="/images/Screenshot_20250425_100114.jpg"><br>以此类推如果一个程序请求更多内存，操作系统会决定是否同意，如果同意，分配哪些内存块。</p></li><li><p>这种灵活性会带来一个后果，可能分配到不连续的内存块，这对程序员来说就难以追踪了，为了隐藏这种复杂性，os会把内存地址虚拟化，叫“虚拟内存”，程序可以假定内存总是从地址 0 开始，而实际物理位置被隐藏和抽象了。os 会自动处理虚拟内存和物理内存之间的映射，这种机制使程序的内存大小可以灵活增减，叫“<strong>动态内存分配</strong>”。<br><img src="/images/Screenshot_20250425_100134.jpg"></p></li><li><p>这样对程序来说，内存就变成连续的了，如果一个程序出错，开始写乱七八糟的数据，它只能捣乱自己的内存，不会影响到其它程序，这叫 “<strong>内存保护</strong>“。这对防止恶意软件（如病毒）也很有用，例如，我们不希望其他程序有能力，读或改邮件程序的内存。如果有这种权限，恶意软件可能以你的名义发邮件，甚至窃取个人信息。</p></li><li><p>1970年代，计算机不仅能同时运行多个程序，还能让多用户同时访问，为了确保其中一个人不会占满计算机资源，开发了分时操作系统，意思是每个用户只能用一部分的处理器和内存，因为计算够快所以就算只分配到 1&#x2F;50 的资源也足以完成许多任务。</p></li><li><p>早期分时操作系统中，最有影响力的是 Multics（多任务信息与计算系统），于 1969 年发布，Multics 是第一个从设计时就考虑到安全的操作系统，开发人员不希望恶意用户访问不该访问的数据。</p></li><li><p>Multics 的研究人员之一 Dennis Ritchie 曾说过”阻碍 Multics 获得商业成功的一个明显问题是从某种方面来说，它被过度设计了，功能太多了”。所以 Dennis 和另一个 Multics 研究员 Ken Thompson 联手打造新的操作系统，叫 <strong>Unix</strong>。</p></li><li><p>他们将 os 主要分为两部分，首先是核心功能，如内存管理，多任务和输入&#x2F;输出处理，这叫“<strong>内核</strong>”（kernel）。第二部分是一堆有用的工具，但不是内核的一部分。紧凑的内核意味着功能没那么全面，原则即追求简单，也是后来的Linux系统一脉相承的原则。如果有错误发生就让内核“恐慌”（panic），调用他时机器会崩溃，这就是”<strong>内核恐慌</strong>“（kernel panic）。</p></li><li><p>这种简单性意味着 Unix 可以在更便宜更多的硬件上运行，使 Unix 在 Dennis 和 Ken 工作的贝尔实验室大受欢迎，越来越多开发人员用 Unix 写程序和运行程序，成为1970~80年代最流行的操作系统之一。</p></li><li><p>微软 1985 年发布的早期 Windows 虽然在 90 年代很流行，但却缺乏”内存保护”，当程序行为不当时，就会”蓝屏”。代表程序崩溃的非常严重，把系统也带崩溃了，幸好新版Windows有更好的保护，不会经常崩溃。</p></li></ol><h2 id="第-19-集-内存-储存介质"><a href="#第-19-集-内存-储存介质" class="headerlink" title="第 19 集 内存 &amp; 储存介质"></a>第 19 集 内存 &amp; 储存介质</h2><ol><li><p>存储器（Storage）和内存（Memory）有点不同，任何写入”<strong>存储器</strong>“的数据，比如你的硬盘数据会一直存着，直到被覆盖或删除，断电也不会丢失。</p></li><li><p>最早的存储介质是打孔纸卡以及纸卡的亲戚打孔纸带，他们便宜耐用但是不好存临时值，读取慢且只能写入一次。J. Presper Eckert 在 1944 年建造 ENIAC 时发明了一种方法,叫”<strong>延迟线存储器</strong>“（Delay Line Memory）。</p><blockquote><p>原理：拿一个管子装满液体，如水银管子一端放扬声器，另一端放麦克风扬声器发出脉冲时  会产生压力波压力波需要时间  传播到另一端的麦克风麦克风将压力波 转换回电信号用压力波的传播延迟  来存储数据假设有压力波代表 1，没有代表 0扬声器可以输出 1010 0111压力波沿管子传播，过了一会儿，撞上麦克风，将信号转换回 1 和 0如果加一个电路，连接麦克风和扬声器再加一个放大器（Amplifier）来弥补信号衰弱就能做一个存储数据的循环信号沿电线传播几乎是瞬时的,所以任何时间点只显示  1 bit 数据但管子中可以存储多个位(bit)</p></blockquote><p><img src="/images/Screenshot_20250425_104835.jpg"></p></li><li><p>“<strong>延迟线存储器</strong>“的一大缺点是每一个时刻只能读一位 (bit)，数据如果想访问一个特定的 bit，比如第 112 位(bit)，你得等待它从循环中出现所以又叫 “顺序存储器”或”循环存储器”。而我们想要的是 “随机存取存储器”可以随时访问任何位置，增加内存密度也是一个挑战，把压力波变得更紧密，意味着更容易混在一起。虽然出现了其他类型的 “延迟线存储器”如 “<strong>磁致伸缩延迟存储器</strong>“，然而延迟线存储器在 1950 年代中期就基本过时了。</p></li><li><p>“<strong>磁芯存储器</strong>“，用了像甜甜圈的小型磁圈如果给磁芯绕上电线，并施加电流，可以将磁化在一个方向如果关掉电流，磁芯保持磁化如果沿相反方向施加电流磁化的方向（极性）会翻转这样就可以存 1 和 0 ！如果只存 1 位不够有用，所以把小甜甜圈排列成网格有电线负责选行和列，也有电线贯穿每个磁芯, 用于读写一位(bit)更重要的是，不像”延迟线存储器”磁芯存储器能随时访问任何一位(bit)”。磁芯存储器” 从 1950 年代中期开始成为主流，流行了 20 多年而且一般还是手工编织的！<br><img src="/images/Screenshot_20250425_104907.jpg"></p></li><li><p>到 1951 年，Eckert 和 Mauchly 创立了自己的公司设计了一台叫 UNIVAC 的新电脑，最早进行商业销售的电脑之一，它推出了一种新存储：<strong>磁带</strong>。磁带可以在”磁带驱动器”内前后移动，里面有一个”写头”绕了电线，电流通过产生磁场导致磁带的一小部分被磁化，电流方向决定了极性，代表 1 和 0。还有一个”读头”，可以非破坏性地检测极性。虽然磁带驱动器很贵，但磁带又便宜又小，因此磁带至今仍用于存档。磁带的主要缺点是访问速度并且磁带是连续的，必须倒带或快进到达特定位置1950,60年代，有个类似技术是 “<strong>磁鼓存储器</strong>“，有金属圆筒，盖满了磁性材料以记录数据。滚筒会持续旋转，周围有数十个读写头等滚筒转到正确的位置，读写头会读或写 1 位(bit)，数据为了尽可能缩短延迟,鼓轮每分钟上千转！</p></li><li><p><strong>硬盘</strong>和磁鼓很相似原理是一样的，磁盘表面有磁性写入头和读取头，可以处理上面的 1 和 0。硬盘的好处是薄，可以叠在一起提供更多表面积来存数据。要访问某个特定 bit，一个读&#x2F;写磁头会向上或向下移动，找到正确的磁盘然后磁头会滑进去就像磁鼓存储器一样，磁盘也会高速旋转所以读写头要等到正确的部分转过来访问任意数据，平均只要六分之一秒左右也叫寻道时间。</p></li><li><h3 id="成本与速度间的平衡"><a href="#成本与速度间的平衡" class="headerlink" title="成本与速度间的平衡"></a>成本与速度间的平衡</h3><blockquote><p>一小部分高速+昂贵的内存，一部分稍慢+相对便宜些的内存，还有更慢+更便宜的内存，这种混合在<em><strong>成本和速度</strong></em>间取得平衡。<br><img src="/images/Screenshot_20250425_105031.jpg"></p></blockquote></li><li><p>如今的硬盘可以轻易容纳 1TB 的数据，现代硬盘的平均寻道时间低于 1&#x2F;100 秒，简单地提一下硬盘的亲戚，<strong>软盘</strong>。软盘是为了便携，在 1970~1990 非常流行。光学存储器于 1972 年出现，12 英寸的”激光盘”<strong>光盘</strong>（简称 CD）以及 90 年代流行的 <strong>DVD</strong>，功能和硬盘软盘一样，都是存数据。但用的不是磁性，光盘表面有很多小坑，造成光的不同反射，光学传感器会捕获到，并解码为 1 和 0。</p></li><li><p>如今，存储技术在朝固态前进，没有机械活动部件比如这个硬盘，以及 <strong>U 盘</strong>里面是集成电路（NAND闪存）。第一个 RAM 集成电路出现于 1972 年，成本每比特 1 美分使”磁芯存储器”迅速过时。如今成本下降了更多，<strong>机械硬盘</strong>被<strong>固态硬盘</strong>逐渐替代，简称<strong>SSD</strong>。由于 SSD 没有移动部件，磁头不用等磁盘转，所以 SSD 访问时间低于 1&#x2F;1000 秒但还是比 RAM 慢很多倍所以现代计算机仍然用存储层次结构。</p></li></ol><h2 id="第-20-集-文件系统"><a href="#第-20-集-文件系统" class="headerlink" title="第 20 集 文件系统"></a>第 20 集 文件系统</h2><ol><li>随意排列文件数据完全没问题，但按格式排会更好这叫 “文件格式”。你可以发明自己的文件格式（！！！），程序员偶尔会这样做。但最好用现成标准，比如 JPEG 和 MP3。</li><li>最简单的是文本文件，也叫 <strong>TXT</strong> 文件,里面包含的是文字，就像所有其它文件，文本文件只是一长串二进制数。解码数据的关键是 ASCII 编码，第一个值 72 在 ASCII 中是大写字母 H，以此类推解码其他数字。</li><li>波形(Wave)文件，也叫 <strong>WAV</strong> 它存音频数据，在正确读取数据前，需要知道一些信息，比如码率(bit rate)，以及是单声道还是立体声，关于数据的数据，叫”<strong>元数据</strong>“(meta data)。元数据存在文件开头，在实际数据前面，因此也叫 <strong>文件头</strong>(Header)。WAV 文件的前 44 个字节长这样<br><img src="/images/Screenshot_20250425_120053.jpg"><br>其他部分的内容，会根据数据变化。音频数据紧跟在元数据后面，是一长串数字,数字代表每秒捕获多次的声音幅度。</li><li>计算机上，图片由很多个叫”像素”的方块组成,每个像素由三种颜色组成：红，绿，蓝,用红绿蓝值或 RGB 值表示。就像 WAV 文件一样，<strong>BMP</strong> 文件开头也是元数据,有图片宽度，图片高度，颜色深度。</li><li>为了存多个文件需要一个特殊文件，记录其他文件的位置,这里泛称 “<strong>目录文件</strong>“,这个文件经常存在最开头，方便找到。目录文件里，存所有其他文件的名字,格式是文件名 + 一个句号 + 扩展名，比如 BMP 或 WAV,扩展名帮助得知文件类型,目录文件还存文件的元数据，比如创建时间,最后修改时间，文件所有者是谁,是否能读&#x2F;写或读写都行。最重要的是，目录文件有文件起始位置和长度,如果要添加文件，删除文件，更改文件名等,必须更新目录文件。文件系统专门负责管理文件,刚刚的例子叫”<strong>平面文件系统</strong>“,因为文件都在同一个层次。</li><li>为了避免覆盖,现代文件系统会做两件事,1. 把空间划分成一块块,导致有一些 “预留空间”,可以方便改动同时也方便管理,目录文件要记录文件在哪些块里。2. 拆分文件，存在多个块里。只要分配块，文件可以轻松增大缩小。假设想删掉 carrie.bmp,只需要在目录文件删掉那条记录,让一块空间变成了可用,<strong>注意这里没有擦除数据，只是把记录删了</strong>,之后某个时候，那些块会被新数据覆盖,但在此之前，数据还在原处,所以计算机取证团队可以”恢复”数据。</li><li>碎片是增&#x2F;删&#x2F;改文件导致的，不可避免,计算机会把数据来回移动，排列成正确的顺序。容量爆炸式增长，文件数量也飞速增长很快，所有文件都存在同一层变得不切实际,然后文件夹套文件夹。这叫”<strong>分层文件系统</strong>“最大的变化是目录文件不仅要指向文件,还要指向目录。我们需要额外元数据来区分开文件和目录，这个目录文件在最顶层，因此叫<strong>根目录</strong>。所有其他文件和文件夹，都在根目录下。</li><li>如果想把 theme.wav 从根目录移到音乐目录不用移动任何数据块只需要改两个目录文件,一个文件里删一条记录，另一个文件里加一条记录theme.wav 依然在块5。文件系统使我们不必关心文件在磁带或磁盘的具体位置,整理和访问文件更加方便,我们像普通用户一样直观操纵数据，比如打开和整理文件。</li></ol>]]></content>
    
    
    <categories>
      
      <category>CS0</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Crash Course Computer Science【计算机科学速成课】(1)</title>
    <link href="/2025/02/22/Crash%20Course%20Computer%20Science%E3%80%90%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E3%80%91(1)/"/>
    <url>/2025/02/22/Crash%20Course%20Computer%20Science%E3%80%90%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E3%80%91(1)/</url>
    
    <content type="html"><![CDATA[<h2 id="感谢速成课！感谢-Carrie-Anne！感谢中文翻译组！"><a href="#感谢速成课！感谢-Carrie-Anne！感谢中文翻译组！" class="headerlink" title="感谢速成课！感谢 Carrie Anne！感谢中文翻译组！~"></a>感谢速成课！感谢 Carrie Anne！感谢中文翻译组！~</h2><h4 id="原视频"><a href="#原视频" class="headerlink" title="原视频"></a>原视频</h4><p><a href="https://www.youtube.com/playlist?list=PL8dPuuaLjXtNlUrzyH5r6jN9ulIgZBpdo">Crash Course Computer Science</a><br><a href="https://github.com/1c7/crash-course-computer-science-chinese">https://github.com/1c7/crash-course-computer-science-chinese</a></p><h2 id="第-1-集：计算机早期历史"><a href="#第-1-集：计算机早期历史" class="headerlink" title="第 1 集：计算机早期历史"></a>第 1 集：计算机早期历史</h2><ul><li>算盘 → 步进计算器 → 差分机 → 分析机 → 打孔卡片制表机</li></ul><ol><li>最早的计算设备是算盘，大约公元前 2500 年发明于”美索不达米亚”.</li><li>在接下来 4000 年，人类发明了各种巧妙的计算设备 比如星盘，让船只可以在海上计算纬度 或计算尺，帮助计算乘法和除法.</li><li>最早使用 “计算机” 一词的文献是1613 年的一本书，作者 Richard Braithwait 然而指的不是机器，而是一种职业，指负责计算的人.</li><li>1800 年后Computer逐渐开始从指代职业变成指代机器.  </li><li>机器里有名的是：步进计算器,第一个可以做加减乘除的机器,沿用了 3 个世纪.</li><li>炮弹为了精准，要计算弹道，二战是查表来做，但每次改设计了就需要做一张新表.</li><li><strong>Charles Babbage</strong> 提出了 “<strong>差分机</strong>“, 一个更复杂的机器，能近似多项式，在构造差分机期间，想出了<strong>分析机</strong>, 分析机是通用计算机 ,它可以做很多事情,不只是一种特定运算.</li><li>Ada Lovelace 给分析机写了假想程序，因此成为了第一位程序员  </li><li>美国政府在 1890 年的人口普查中面临着严重的问题,预计要 13 年完成,Herman Hollerith 的打孔卡片制表机大大提升了效率,使人口普查在短短两年半内完成.</li><li>Hollerith 成立了制表机器公司,这家公司后来在 1924 年与其它机械制造商合并成为了 “<strong>国际商业机器公司</strong>“，简称 <strong>IBM</strong>.</li></ol><h2 id="第-2-集：电子计算机"><a href="#第-2-集：电子计算机" class="headerlink" title="第 2 集：电子计算机"></a>第 2 集：电子计算机</h2><ul><li>继电器 → 真空管 → 晶体管</li></ul><ol><li>20世纪的发展要求更强的计算能力,柜子大小的计算机发展到房间大小 ,最大的机电计算机之一是哈佛 Mark 1 号,IBM 1944 年做的,大脑是”<strong>继电器</strong>“,给”曼哈顿计划”跑模拟.</li><li>1940 年代一个好的继电器 1 秒能翻转 50 次,哈佛马克一号1 秒能做 3 次加法或减法运算,一次乘法要花 6 秒，除法要花 15 秒</li><li>除了速度慢，另一个限制是齿轮磨损,随着继电器数量增加，故障概率也会增加,同时这些巨大，黑色，温暖的机器也会吸引昆虫,1947年9月，哈佛马克2型的操作员从故障继电器中，拔出一只死虫这就是术语 “<strong>bug</strong>“（虫子）的来源.</li><li>1904 年，热电子管出现，世界上第一个<strong>真空管</strong>。改进为三极真空管后变成和继电器的功能一样,并且真空管内没有会动的组件,更少的磨损,每秒可以开闭数千次.</li><li>“巨人1号” 计算机在英国,布莱切利园,首次大规模使用真空管,用于破解纳粹通信,被认为是第一个可编程的电子计算机但编程麻烦，还要配置.  </li><li>1946 年，宾夕法尼亚大学的 <strong>ENIAC</strong> 是第一个通用可编程计算机,每秒可执行 5000 次十位数加减法.</li><li>1947 年，<strong>贝尔实验室</strong>做出了<strong>晶体管</strong>，晶体管有诸多好处,每秒可以切换上百万次，并且能工作几十年,IBM 很快全面转向晶体管  </li><li>很多晶体管和半导体的开发在”圣克拉拉谷”,在加州位于”旧金山”和”圣荷西”之间,而生产半导体最常见的材料是硅,所以这个地区被称为 “<strong>硅谷</strong>“</li><li>William Shockley 搬了过去，创立了肖克利半导体 → 仙童半导体 → 英特尔</li></ol><h2 id="第-3-集：布尔逻辑和逻辑门"><a href="#第-3-集：布尔逻辑和逻辑门" class="headerlink" title="第 3 集：布尔逻辑和逻辑门"></a>第 3 集：布尔逻辑和逻辑门</h2><ol><li>3个基本操作：NOT，AND，OR以及XOR 异或，异为真，同为假<br><img src="/images/image.png"></li></ol><h2 id="第-4-集：二进制"><a href="#第-4-集：二进制" class="headerlink" title="第 4 集：二进制"></a>第 4 集：二进制</h2><ol><li>8 位能表示的最小数是 0，最大数是 255,1 bytes &#x3D; 8 bits 存储单位MB GB TB 等,32 位能表示的最大数是 43 亿左右,64 位能表达最大数大约是 9.2×10 ^ 18,</li><li>Instagram 照片很清晰,它们有上百万种颜色,因为如今都用 32 位颜色</li><li>大部分计算机用第一位表示正负,1 是负，0 是正,最常见的是 IEEE 754 标准表示浮点数，在 32 位浮点数中第 1 位表示数的符号——正或负，接下来 8 位存指数，剩下 23 位存有效位数</li><li>美国信息交换标准代码 - ASCII, 用来表示字符<br><img src="/images/image(1).png"></li><li>UNICODE 1992 年诞生，是字符编码标准， 解决 ASCII 不够表达所有语言的问题,最常见的 Unicode 是 16 位的，有超过一百万个位置</li></ol><h2 id="第-5-集：算数逻辑单元-ALU"><a href="#第-5-集：算数逻辑单元-ALU" class="headerlink" title="第 5 集：算数逻辑单元 - ALU"></a>第 5 集：算数逻辑单元 - ALU</h2><ol><li><p>ALU 算术逻辑单元，有 2 个单元，1 个算术单元和 1 个逻辑单元</p></li><li><p>算术单元，负责计算机里的所有数字操作  </p><ul><li>半加器 (处理1个 bit，2个输入)  输出”总和”和”进位”<br><img src="/images/image(2).png"></li><li>全加器 (处理1个 bit，3个输入)<br><img src="/images/image(3).png"></li></ul></li><li><p>8 bit 加法 (1个半加器，7个全加器）  </p><ul><li>把这个全加器的进位连到下个全加器的输入，8位行波进位加法器<br> <img src="/images/image(4).png"></li><li>如果第 9 位有进位，代表着 2 个数字的和太大了，超过了 8 位这叫 “<strong>溢出</strong>“ (overflow)。著名的例子是，吃豆人用 8 位存当前关卡数，如果你玩到了第 256 关（ 8 位 bit 最大表示 255），ALU 会溢出，造成一连串错误和乱码，使得该关卡无法进行，这个 bug 成了厉害吃豆人玩家的代表</li><li>缺点是每次进位都要一点时间但如今的量级是每秒几十亿次运算，所以会造成影响，所以，现代计算机用的加法电路有点不同，叫 “超前进位加法器”</li><li>乘法用多次加法来实现，除法用迭代减法实现</li></ul></li><li><p>逻辑单元  </p><ul><li>能做简单的数值测试，检测数字是否为 0 的电路（一堆 OR 门最后加个 NOT 门）</li></ul></li><li><p>工程师不想在用 ALU 时去想那些事情,ALU抽象成一个 V 符号  </p></li><li><p>ALU 还会输出一堆Flag 标志（是否相等，是否小于，是否溢出等等）</p></li></ol><h2 id="第-6-集：寄存器和内存"><a href="#第-6-集：寄存器和内存" class="headerlink" title="第 6 集：寄存器和内存"></a>第 6 集：寄存器和内存</h2><p>本集重点是 Memory （存储 &#x2F; 内存 两种含义）</p><ol><li>“<strong>随机存取存储器</strong>“，简称”<strong>RAM</strong>“，在断电时损失数据</li><li>存 1 位 “AND-OR <strong>锁存器</strong>“(Gated Latch - 锁存器）<ul><li>它有两个输入，”设置”输入, 把输出变成 1，”复位”输入, 把输出变成 0 ，如果”设置”和”复位”都是 0，电路会输出最后放入的内容<br><img src="/images/image(5).png"></li><li>一根线来”启用”内存，这条线叫 “允许写入线”<br><img src="/images/image(6).png"></li></ul></li><li>存 8 位 (Register - <strong>寄存器</strong>)<ul><li>如果我们并排放 8 个锁存器，可以存 8 位信息，比如一个 8 bit 数字，一组这样的锁存器叫 “寄存器”，寄存器能存一个数字，这个数字有多少位，叫”位宽”，如今许多计算机都有 64 位宽的寄存器<br><img src="/images/image(7).png"></li><li>为了减少线的数量，在矩阵中做成网格，要启用某个锁存器，就打开相应的行线和列线，只有行线和列线均为1， AND 门才输出 1</li></ul></li><li>16x16 的矩阵存 256 位，数据选择器&#x2F;<strong>多路复用器</strong> (Multiplexer) 解码 8 位地址，定位到单个锁存器，输入一个 8 位地址，4 位代表行， 4 位代表列</li><li>不断把内存打包到更大规模，随着内存地址增多，内存地址也必须增长，内存的一个重要特性是：可以随时访问任何位置，因此叫 “随机存取存储器” ，简称 RAM</li></ol><h2 id="第-7-集：中央处理器（CPU"><a href="#第-7-集：中央处理器（CPU" class="headerlink" title="第 7 集：中央处理器（CPU)"></a>第 7 集：中央处理器（CPU)</h2><ol><li>RAM + 寄存器 + ALU 做个 CPU  <ul><li>一个寄存器追踪程序运行到哪里了，我们叫它  “指令地址寄存器”，存当前指令的内存地址 </li><li>另一个寄存器存当前指令，叫  “指令寄存器”</li></ul></li><li>进行”<strong>取指令→解码→执行</strong>“ 这个循环  </li><li>时钟以精确的间隔  触发电信号控制单元会用这个信号，推进 CPU 的内部操作，确保一切按步骤进行，CPU “取指令→解码→执行” 的速度叫 “<strong>时钟速度</strong>“, 单位是赫兹<ul><li>第一个单芯片 CPU 是 “英特尔 4004” 1971 年发布的 4 位CPU，时钟速度达到了 740 千赫兹 - 每秒 74 万次</li><li>一兆赫兹是 1 秒 1 百万个<strong>时钟周期</strong>，而看视频的电脑或手机，肯定有几千兆赫兹</li></ul></li><li>超频，修改时钟速度，加快 CPU 的速度，提升性能,但超频太多会让 CPU 过热或产生乱码，因为信号跟不上时钟，而降频省电，这叫 “<strong>动态调整频率</strong>“</li></ol><h2 id="第-8-集：指令和程序"><a href="#第-8-集：指令和程序" class="headerlink" title="第 8 集：指令和程序"></a>第 8 集：指令和程序</h2><p>本集重点：一步步带你运行一遍程序</p><ol><li>”指令集” <ul><li>LOAD_A，LOAD_B，SUB，JUMP，ADD，HALT 等指令<br> <img src="/images/image(8).png"></li><li>JUMP 0 可以跳回开头，JUMP 在底层的实现方式是用指令后 4 位的值覆盖掉 “指令地址寄存器” 里的值</li><li>带条件跳转，JUMP NEGATIVE 只在 ALU 的 “负数标志” 为真时，即算术结果是负数才跳转，还有其他类型的 JUMP </li><li>真正现代 CPU 用更多指令集，位数更长。</li></ul></li><li>1971年的英特尔 4004 处理器，有 46 个指令，如今英特尔酷睿 i7, 有上千条指令</li></ol><h2 id="第-9-集：高级-CPU-设计"><a href="#第-9-集：高级-CPU-设计" class="headerlink" title="第 9 集：高级 CPU 设计"></a>第 9 集：高级 CPU 设计</h2><ol><li>早期是加快晶体管切换速度，来提升 CPU 速度，但这种提速方法最终会碰到瓶颈，处理器厂商发明各种新技术来提升性能，不但让简单指令运行更快也让它能进行更复杂的运算<ul><li>现代处理器有专门电路来处理图形操作, 解码压缩视频, 加密文档 等等，给 CPU 专门的除法电路 + 其他电路来做复杂操作，比如游戏，视频解码</li></ul></li><li>一条”从内存读数据”的指令可能要多个时钟周期，CPU 空等数据，解决延迟的方法之一是给 CPU 加缓存，提高数据存取速度，更快喂给 CPU</li><li>缓存和 RAM 不一致了，这种不一致必须记录下来，之后要同步，因此缓存里每块空间有一个特殊标记叫脏位 Dirty bit  </li><li>另一种提升性能的方法叫<strong>流水线设计</strong>,并行处理 - parallelize,更进一步，动态排序有依赖关系的指令,最小化流水线的停工时间,乱序执行 - out-of-order execution</li><li>简单的流水线处理器，看到 JUMP 指令会停一会儿,等待条件值确定下来,一旦 JUMP 的结果出了，处理器就继续流水线,因为空等会造成延迟，所以高端处理器会用一些技巧<ul><li>可以把 JUMP 想成是 “岔路口”，高端 CPU 会猜哪条路的可能性大一些,然后提前把指令放进流水线，这叫 “<strong>推测执行</strong>“</li><li>当 JUMP 的结果出了，如果 CPU 猜对了,流水线已经塞满正确指令，可以马上运行,如果 CPU 猜错了，就要清空流水线,为了尽可能减少清空流水线的次数，CPU 厂商开发了复杂的方法来猜测哪条分支更有可能，叫”<strong>分支预测</strong>“</li><li>现代 CPU 的正确率超过 90%</li></ul></li><li>另一个提升性能的方法是<strong>同时运行多个指令流用多核处理器</strong>,如双核或四核处理器意思是一个 CPU 芯片里，有多个独立处理单元，很像是有多个独立 CPU，但因为它们整合紧密，可以共享一些资源，比如缓存，使得多核可以合作运算，但多核不够时，可以用多个 CPU，高端计算机，比如Youtube 服务器需要更多马力，让上百人能同时流畅观看，2个或4个CPU是最常见的，但有时人们有更高的性能要求所以造了超级计算机！</li></ol><h2 id="第-10-集：早期的编程方式"><a href="#第-10-集：早期的编程方式" class="headerlink" title="第 10 集：早期的编程方式"></a>第 10 集：早期的编程方式</h2><ol><li>早期计算机如何编程  <ul><li>打孔纸卡 → 插线板 → 面板拨开关</li></ul></li><li>程序和数据都存在一个地方，叫<strong>冯诺依曼架构</strong>  Von Neumann Architecture </li><li><strong>冯诺依曼计算机</strong>的标志是，一个处理器(有算术逻辑单元)+数据寄存器+指令寄存器+指令地址寄存器+内存（负责存数据和指令)</li><li>第一款取得商业成功的家用计算机: Altair 8800 ，编程依然很困难，人们需要更友好更简单的方式编程</li></ol>]]></content>
    
    
    <categories>
      
      <category>CS0</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Knuth-Morris-Pratt（KMP）算法【详解】</title>
    <link href="/2025/01/11/Knuth-Morris-Pratt%EF%BC%88KMP%EF%BC%89%E7%AE%97%E6%B3%95%E3%80%90%E8%AF%A6%E8%A7%A3%E3%80%91/"/>
    <url>/2025/01/11/Knuth-Morris-Pratt%EF%BC%88KMP%EF%BC%89%E7%AE%97%E6%B3%95%E3%80%90%E8%AF%A6%E8%A7%A3%E3%80%91/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>笔者在学习字符串的过程中，接触到求子字符串位置的问题，除了暴力解法外了解到有一种名为KMP（烤馍片）的巧妙算法也顺便了解了一下发明者之一的“神”<code>Kunth</code>的履历，但不在此赘述。虽然网上有很多详细图解之类，但我还是不能充分理解。在看完Tushar Roy的讲解后才恍然大悟，本文主要根据他的讲解，结合自己的思考在此写出我的理解。</p><hr><h1 id="一、从问题谈起，如何最直接地搜索一个字符串？"><a href="#一、从问题谈起，如何最直接地搜索一个字符串？" class="headerlink" title="一、从问题谈起，如何最直接地搜索一个字符串？"></a>一、从问题谈起，如何最直接地搜索一个字符串？</h1><ul><li>示例：<br>给定字符串是<code>absdglx</code>,目标字符串是<code>sdgl</code>，给每个字符标上序号，分别是<code>m0,m1,m2,m3,m4,m5,m6</code>,<code>n0,n1,n2,n3</code>。最直接的搜索并定位目标字符串的方法就是将目标字符串的每个字符给定字符串的字符逐一比较。</li><li>从<code>m0</code>，<code>n0</code>开始，若匹配则两字符串都从比较的字符往后移动一个字符，继续进行比较；若不相同，则给定字符串回到从起始比较位往后移动一个字符的位置，目标字符串回到<code>n0</code>从头开始比较，直到在给定字符串超过最后一个字符<code>m7</code>前，目标字符串匹配完最后一个字符<code>n3</code>，即搜索到目标字符串。</li><li>要将上述过程通过编程实现，我们可以用两个指针<code>i,j</code>分别指向给定字符串和目标字符串，按上述过程进行指针的后移和回退，直到<code>i</code>或<code>j</code>指向字符串的最后一个字符。</li></ul><h1 id="二、实现优化的kmp算法如何操作？"><a href="#二、实现优化的kmp算法如何操作？" class="headerlink" title="二、实现优化的kmp算法如何操作？"></a>二、实现优化的kmp算法如何操作？</h1><p>我们可以发现上文朴素(暴力)算法的不便和存在大量低效、重复的匹配操作，那么我们可不可以通过某些目标字符串本身特性来减少回退而多进行回溯，提高效率。</p><h2 id="1-引入前缀数组"><a href="#1-引入前缀数组" class="headerlink" title="1.引入前缀数组"></a>1.引入前缀数组</h2><ul><li><p>前缀数组的每个元素对应着目标字符串的每个字符，其元素表示了该字符前的子字符串（包括该字符）中的最长的相等的前缀和后缀的长度，即前文所指的目标字符串的某些特性。<br>  举例：<code>abcabcd</code>的前缀数组可以用下面这个表格来表示。</p><table><thead><tr><th>a</th><th>b</th><th>c</th><th>a</th><th>b</th><th>c</th><th>d</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>1</td><td>2</td><td>3</td><td>0</td></tr></tbody></table></li><li><p>我们用一个例子来详细解释如何手推前缀数组,过程中会用到前缀和回溯的思想。<br> 1.<code>abcdabca</code>使用两个指针<code>i,j</code>分别指向<code>a,b</code>,i和j指向的元素显然为0，将<code>j</code>向后移动，<code>j</code>移动到j移动到第二个<code>a</code>时有了相同前后缀元素记为1，然后将<code>i</code>和<code>j</code>都向后移动j指向<code>b</code>相同前后缀长为2，数组元素记为2，再次将<code>i</code>和<code>j</code>向后移动，<code>j</code>指向<code>c</code>同理，当<code>j</code>指向末尾的<code>a</code>时两指针所指字符不同，需要进行回溯。观察到<code>j</code>指针所指字符的前一个字符对应元素为0，即没有相同前后缀，则将<code>j</code>回退至首字符，此时<code>i</code>和<code>j</code>所指字符均为<code>a</code>，则<code>i</code>所指字符对应元素记为1。该字符串前缀数组即为<strong>00001231</strong>。</p></li></ul><h2 id="2-给定字符串和目标字符串分别如何回溯？"><a href="#2-给定字符串和目标字符串分别如何回溯？" class="headerlink" title="2.给定字符串和目标字符串分别如何回溯？"></a>2.给定字符串和目标字符串分别如何回溯？</h2><ul><li>举例：给定字符串<code>abxabcabcaby</code>,目标字符串<code>abcaby</code>,对应前缀数组为<strong>000120</strong>。（同样使用<code>i</code> <code>j</code>指针但分别指向给定字符串和目标字符串）<br>两字符串前两个字符匹配，第三个字符分别为<code>x</code>和<code>c</code>不匹配，<code>j</code>前一字符对应元素为0，<code>j</code>回到首位指向<code>a</code>仍与<code>x</code>不匹配，<code>j</code>不移动，将<code>i</code>往后移动指向<code>a</code>与<code>j</code>所指匹配，<code>i</code>和<code>j</code>都往后移动。同理继续匹配直到<code>i</code>指向<code>c</code>，<code>j</code>指向<code>y</code>不匹配，<code>j</code>前一字符对应元素为2，<code>j</code>回溯到第三个字符<code>c</code>与<code>i</code>匹配，<code>i</code>和<code>j</code>都往后移动继续匹配直到最后完成匹配。</li></ul><h1 id="三、如何用代码来实现kmp算法？"><a href="#三、如何用代码来实现kmp算法？" class="headerlink" title="三、如何用代码来实现kmp算法？"></a>三、如何用代码来实现kmp算法？</h1><p>同样主要分为两步，</p><h2 id="1-计算目标字符串的前缀数组"><a href="#1-计算目标字符串的前缀数组" class="headerlink" title="1. 计算目标字符串的前缀数组"></a>1. 计算目标字符串的前缀数组</h2><ul><li>前缀数组定义为<code>prefix[]</code>,<code>j</code>和<code>i</code>分别指向第一、二个字符，让<code>i</code>遍历目标字符串每个字符，<code>j = prefix[j-1]</code>就是<code>j</code>回溯至<code>j</code>所指前一个字符对应元素的位置。<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"> <span class="token keyword">void</span> <span class="token function">Prefix</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> pattern<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> prefix<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    prefix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pattern<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>pattern<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>            prefix<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                   j <span class="token operator">=</span> prefix<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                prefix<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="2-借助前缀数组进行字符串的匹配"><a href="#2-借助前缀数组进行字符串的匹配" class="headerlink" title="2.借助前缀数组进行字符串的匹配"></a>2.借助前缀数组进行字符串的匹配</h2><ul><li><code>pattern</code>为目标字符串，<code>text</code>为给定字符串，<code>i</code>和<code>j</code>分别指向给定字符串和目标字符串，同样遍历给定字符串，若j指向了目标字符串最后一个字符，则<code>i-j</code>为<code>text</code>中<code>pattern</code>的首字符位置。<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">kmpsearch</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span>text<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span>pattern<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> wid <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> prefix<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">Prefix</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span>prefix<span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> wid<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pattern<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>text<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span>len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>i<span class="token operator">-</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>           j <span class="token operator">=</span> prefix<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>wid<span class="token operator">&amp;&amp;</span>pattern<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span>text<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            j <span class="token operator">=</span> prefix<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文详细解释了kmp算法如何实现，kmp算法通过目标字符串由自身特性生成的前缀数组来减少回溯的过程，建议亲自动手推一推生成前缀数组和模式匹配的过程，这样可以更好地理解其思想和原理。</p><blockquote><p>如果发现文章中存在错误敬请批评指正，感谢您的阅读。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LaTex笔记</title>
    <link href="/2025/01/08/latex/"/>
    <url>/2025/01/08/latex/</url>
    
    <content type="html"><![CDATA[<h2 id="一、LaTex中常见希腊字母"><a href="#一、LaTex中常见希腊字母" class="headerlink" title="一、LaTex中常见希腊字母"></a>一、LaTex中常见希腊字母</h2><blockquote><p>\alpha \beta \gamma \delta \epsilon \zeta \eta \pi \sigma \tau \phi \psi \chi</p></blockquote><h2 id="二、LaTex常用指令"><a href="#二、LaTex常用指令" class="headerlink" title="二、LaTex常用指令"></a>二、LaTex常用指令</h2><table><thead><tr><th>名称</th><th>指令</th><th>名称</th><th>指令</th></tr></thead><tbody><tr><td>分数</td><td>\frac{分子}{分母}</td><td>乘号</td><td>\times</td></tr><tr><td>开方</td><td>\sqrt[m]{n}</td><td>求和</td><td>\sum</td></tr><tr><td>求积</td><td>\prod</td><td>积分</td><td>\int</td></tr><tr><td>上标</td><td>^</td><td>下标</td><td>_</td></tr><tr><td>小于等于</td><td>\leq</td><td>大于等于</td><td>\geq</td></tr><tr><td>除法</td><td>\div</td><td>点乘</td><td>\cdot</td></tr></tbody></table><h2 id="三、数学符号"><a href="#三、数学符号" class="headerlink" title="三、数学符号"></a>三、数学符号</h2><table><thead><tr><th>$\vec a$</th><th>\vec a</th><th>$\int_{i&#x3D;m}^{n}$</th><th>\int_{i&#x3D;m}^{n}</th></tr></thead><tbody><tr><td>$\sum_{i&#x3D;m}^{n}$</td><td>\sum_{i&#x3D;m}^{n}</td><td>$\prod_{i&#x3D;m}^{n}$</td><td>\prod_{i&#x3D;m}^{n}</td></tr><tr><td>$\binom53$</td><td>\binom53</td><td>$\forall$</td><td>forall</td></tr><tr><td>$\partial$</td><td>\partial</td><td>$\mathop{\lim}_{n\to\infty}f(x)$</td><td>\mathop{\lim}_{n\to\infty}f(x)</td></tr><tr><td>$\sum_{n&#x3D;0}^{\infty}$</td><td>sum_{n&#x3D;0}^{\infty}</td><td>$\oint$</td><td>\oint</td></tr><tr><td>$\oiint$</td><td>\oiint</td><td>$\oiiint$</td><td>\oiiint</td></tr><tr><td>$\sqrt[3]{1000}$</td><td>\sqrt[3]{1000}</td><td>$\int_a^bf(x)$</td><td>\int_a^bf(x)</td></tr><tr><td>$\left\langle\right\rangle$</td><td>\left\langle    \right\rangle</td><td>{}</td><td>\left{ \right}</td></tr></tbody></table><h2 id="四、简单数学公式"><a href="#四、简单数学公式" class="headerlink" title="四、简单数学公式"></a>四、简单数学公式</h2><p>$$<br>y &#x3D; x^2<br>$$<br>$$<br>E &#x3D; mc^2<br>$$<br>$$<br>e^x&#x3D;\sum_{n&#x3D;0}^\infty\frac{1}{n!}x^i<br>$$</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">$</span>e<span class="built_in">^</span>x=<span class="keyword">\sum</span><span class="built_in">_</span>&#123;n=0&#125;<span class="built_in">^</span><span class="keyword">\infty</span><span class="keyword">\frac</span>&#123;1&#125;&#123;n!&#125;x<span class="built_in">^</span>i<span class="built_in">$</span></span><br></pre></td></tr></table></figure><p>$$<br>\begin{equation}<br>S_{n+1} &#x3D; S_{n} + S_{n},<br>S_{n} &#x3D; 1 &#x3D;2^{n}<br>\end{equation}<br>$$</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;equation&#125;</span><br><span class="line">S<span class="built_in">_</span>&#123;n+1&#125; = S<span class="built_in">_</span>&#123;n&#125; + S<span class="built_in">_</span>&#123;n&#125;,</span><br><span class="line">S<span class="built_in">_</span>&#123;n&#125; = 1 =2<span class="built_in">^</span>&#123;n&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;equation&#125;</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure><h2 id="五、矩阵"><a href="#五、矩阵" class="headerlink" title="五、矩阵"></a>五、矩阵</h2><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;pmatrix&#125;</span><br><span class="line">1      <span class="built_in">&amp;</span> a<span class="built_in">_</span>1    <span class="built_in">&amp;</span> a<span class="built_in">_</span>1<span class="built_in">^</span>2  <span class="built_in">&amp;</span> <span class="keyword">\cdots</span> <span class="built_in">&amp;</span> a<span class="built_in">_</span>1<span class="built_in">^</span>n <span class="keyword">\\</span></span><br><span class="line">1      <span class="built_in">&amp;</span> a<span class="built_in">_</span>2    <span class="built_in">&amp;</span> a<span class="built_in">_</span>2<span class="built_in">^</span>2  <span class="built_in">&amp;</span> <span class="keyword">\cdots</span> <span class="built_in">&amp;</span> a<span class="built_in">_</span>2<span class="built_in">^</span>n <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\vdots</span> <span class="built_in">&amp;</span> <span class="keyword">\vdots</span> <span class="built_in">&amp;</span> <span class="keyword">\vdots</span> <span class="built_in">&amp;</span> <span class="keyword">\ddots</span> <span class="built_in">&amp;</span> <span class="keyword">\vdots</span><span class="keyword">\\</span></span><br><span class="line">1      <span class="built_in">&amp;</span> a<span class="built_in">_</span>m    <span class="built_in">&amp;</span> a<span class="built_in">_</span>m<span class="built_in">^</span>2  <span class="built_in">&amp;</span> <span class="keyword">\cdots</span> <span class="built_in">&amp;</span> a<span class="built_in">_</span>m<span class="built_in">^</span>n <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\end</span>&#123;pmatrix&#125;</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure><p><img src="/images/image-20250108141320306.png"></p><h2 id="六-、方程组"><a href="#六-、方程组" class="headerlink" title="六 、方程组"></a>六 、方程组</h2><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\left</span><span class="keyword">\&#123;</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;array&#125;&#123;c&#125;</span><br><span class="line">a<span class="built_in">_</span>1x+b<span class="built_in">_</span>1y+c<span class="built_in">_</span>1z = d<span class="built_in">_</span>1 <span class="keyword">\\</span></span><br><span class="line">a<span class="built_in">_</span>2x+b<span class="built_in">_</span>2y+c<span class="built_in">_</span>2z = d<span class="built_in">_</span>2 <span class="keyword">\\</span></span><br><span class="line">a<span class="built_in">_</span>3x+b<span class="built_in">_</span>3y+c<span class="built_in">_</span>3z = d<span class="built_in">_</span>3 <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\end</span>&#123;array&#125;</span><br><span class="line"><span class="keyword">\right</span>.</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure><p><img src="/images/image-20250108141449757.png"></p>]]></content>
    
    
    <categories>
      
      <category>LaTex</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>指针的const限定</title>
    <link href="/2025/01/07/c%20review/"/>
    <url>/2025/01/07/c%20review/</url>
    
    <content type="html"><![CDATA[<h1 id="指针的const限定"><a href="#指针的const限定" class="headerlink" title="指针的const限定"></a>指针的<code>const</code>限定</h1><h2 id="1-指向const对象的指针"><a href="#1-指向const对象的指针" class="headerlink" title="1.指向const对象的指针"></a>1.指向<code>const</code>对象的指针</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> *p;<span class="comment">//或int const *p;</span></span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line">p = &amp;a;<span class="comment">//正确，p不是只读的</span></span><br><span class="line">*p = <span class="number">42</span>;<span class="comment">//错误,*p是只读的</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *cptrf = &amp;f;<span class="comment">//正确</span></span><br><span class="line"><span class="type">int</span> *ptr = &amp;p;<span class="comment">//错误</span></span><br></pre></td></tr></table></figure><ul><li>非<code>const</code>对象指针的地址可以赋给<code>const</code>对象的指针，<code>const</code>对象指针的地址不能赋给非<code>const</code>对象的指针。</li><li><strong>不能使用指向<code>const</code>对象的指针修改指向对象。</strong></li><li><strong>不能保证指向<code>const</code>的指针所指对象的值一定不被其他方式该改变</strong>（如果指向对象是一个普通变量就可以直接修改）。</li></ul><h2 id="2-const指针"><a href="#2-const指针" class="headerlink" title="2.const指针"></a>2.<code>const</code>指针</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *<span class="type">const</span> ptr;</span><br></pre></td></tr></table></figure><ul><li>这表示 <code>ptr</code>是一个常量指针，指针本身的地址不能修改，但可以通过指针修改它所指向的对象的值。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ptr = &amp;b;</span><br><span class="line">ptr = pc;</span><br><span class="line">ptr++;<span class="comment">//均错误，ptr是只读的</span></span><br></pre></td></tr></table></figure></li><li>与任何<code>const</code>量一样，<code>const</code>指针必须在定义时初始化。</li></ul><h2 id="3-指向const对象的const指针"><a href="#3-指向const对象的const指针" class="headerlink" title="3.指向const对象的const指针"></a>3.指向<code>const</code>对象的<code>const</code>指针</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">double</span> <span class="type">const</span>* pi = <span class="number">3</span>;</span><br></pre></td></tr></table></figure><ul><li>这表示<code>pi</code>是一个常量指针，指向的对象是常量。不能通过<code>pi</code>修改所指向对象的值，并且指针本身的地址也不能修改。</li></ul>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/01/07/hello-world/"/>
    <url>/2025/01/07/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
