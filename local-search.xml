<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>AI</title>
    <link href="/2025/04/18/AI/"/>
    <url>/2025/04/18/AI/</url>
    
    <content type="html"><![CDATA[<p>图里奖得主杨立昆：AI在这四个方向还有更多有意思的东西，</p><ul><li>如何让机器理解物理世界？</li><li>如何做到没有多少人谈论的拥有持续记忆</li><li>如何实现推理能力和规划能力</li></ul>]]></content>
    
    
    <categories>
      
      <category>AI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ssh协议</title>
    <link href="/2025/04/15/ssh/"/>
    <url>/2025/04/15/ssh/</url>
    
    <content type="html"><![CDATA[<h2 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h2><ul><li><p>Secure Shell，由IETF的网络小组所制定，是建立在应用层基础上的安全协议。</p><ul><li><p>对称加密</p></li><li><p>非对称加密</p></li></ul></li><li><p>为了使用上述两种方法把密钥安全地发送给对方，而不让别人知道具体的密钥，使用DH（Diffie Hellman）密钥交换。</p><p>我给箱子上把锁发给对方，对方上把锁发回来，我把我的锁打开再发过去，对方安全打开自己的锁。</p></li><li><p>但是有可能中间人截取上一把自己的锁发回来</p></li><li><p>为了证明信息没有被纂改，我们需要对信息进行哈希运算，得出同种算法的唯一哈希值。</p></li><li></li></ul>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IP地址和子网掩码</title>
    <link href="/2025/04/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <url>/2025/04/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<h2 id="IP-地址"><a href="#IP-地址" class="headerlink" title="IP 地址"></a>IP 地址</h2><ul><li><p>IP地址:32位二进制数组成 网络号+主机号</p></li><li><p>用于网络通信，路由器和交换机通过IP地址来转发数据包，确保数据的正确传输。</p><table><thead><tr><th>类</th><th>范围</th><th>网络数</th><th>主机数</th></tr></thead><tbody><tr><td>A</td><td>0.0.0.0 ~ 127.255.255.255</td><td>128</td><td>16777216</td></tr><tr><td>B</td><td>128.0.0.0 ~ 191.255.255.255</td><td>16384</td><td>65536</td></tr><tr><td>C</td><td>192.0.0.0 ~ 223.255.255.255</td><td>2097152</td><td>256</td></tr></tbody></table><p>A类第一个字节表示网络号，B类前两个字节，C类前三个字节。</p></li><li><p>还有特殊的D类（多播：同时发送给多个接收者）和E类（保留未来使用）。</p></li><li><p>为了解决简单分类导致的IP分配不合理（可能只有四台主机不需要给该网络分配256个），诞生了子网掩码。</p></li></ul><h2 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h2><ul><li><p>那么就需要用一种方法来表示这四个IP地址同属一个网络，</p><p>相同的部分锁定为1，不同的部分为0，192.168.0.0~192.168.0.3子网掩码即为255.255.255.252，</p><p>把子网掩码和IP地址放在一起别人就能知道网络号和主机号的界限了。这个掩码很长可以用一种叫CIDR的方法来表示，</p><p>这里有30个1就用192.168.0.0&#x2F;30表示。</p></li><li><p>这里说的都是IPv4，但互联网发展迅猛，于是有了IPv6。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>The modification report of the academic presentation</title>
    <link href="/2025/04/05/modification%20report/"/>
    <url>/2025/04/05/modification%20report/</url>
    
    <content type="html"><![CDATA[<ul><li><p>The language of our report is not academic enough and need to be more academic and formal,so we should employ more terminology and academic phrases such as:</p><p>“The hypothesis suggests…” “The evidence indicates…””In contrast to…” </p></li><li><p>While the content coverage is relatively comprehensive,the logical flow requires strengthening and the structure lacks smooth transitions. I recommend organizing the content in the way that first introduces the problem through observed phenomena,then analyses the symptoms and causes,and finally examines existing solutions,and explores alternative approaches.</p></li><li><p>Our citations lack consistency and need proper format. I suggest ensuring that all data claims have explicit references and adhere to the IEEE format guidance.</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>English learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛笔记</title>
    <link href="/2025/03/20/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E7%AC%94%E8%AE%B0/"/>
    <url>/2025/03/20/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>贪心：根据某个最优策略选出一个方案，这个方案就是最优解，通常就是排序</p><p>动态规划：多决策问题中，寻找最多或最少情况</p><p>暴力：双指针、BFS\DFS </p><p>数学题：</p><ul><li>打表：用电脑找一些合法答案，然后在这些合法答案中找规律</li></ul><p>tips：</p><ul><li>排序时确保元素都已经初始化</li></ul><p>一定要注意不满足条件输出“-1”的情况</p>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端经验</title>
    <link href="/2025/03/07/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    <url>/2025/03/07/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><ul><li><code>&lt;script src=&quot;...&quot;&gt;</code>标签用于加载并执行外部<code>JavaScript</code>文件，浏览器会下载并执行<code>src</code>属性指定的<code>URL</code>中的<code>JavaScript</code>代码。</li><li><code>&lt;script&gt;</code>标签内部代码通常会当作<code>JavaScript</code>代码来执行，但是如果<code>&lt;script&gt;</code>标签具有<code>src</code>属性，浏览器会忽略标签内部内容，只执行<code>src</code>属性指定的外部<code>JavaScript</code>文件。</li><li><code>console.log(&quot;Hello, world!&quot;);</code>用于在控制台输出信息。</li></ul><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><ul><li><p><code>#waifu-tips</code>的样式如果已经在<code>waifu.css</code>中设置, 那么自定义的<code>css</code>不会生效,因为<code>waifu.css</code>中的规则优先级更高,如果需要改变样式就要在自定义的<code>styles.css</code>中写更具体的选择器, 或者使用<code>!important</code>.</p></li><li><p>将<code>#write</code>(用于<code>typora</code>)改为<code>.markdown-body</code>,F12看<code>elements</code>标签<code>class</code> <code>style.css</code>有没有正常应用,检查<code>html</code>结构修改相应的类名。</p><p><code>#write</code> 是<code>ID</code>选择器，一个页面只能有一个<code>#write</code>,<code>.markdown-body</code> 是类选择器，可以复用于多个元素。</p><p>不同<code>markdown</code>解析器<code>class</code>名不同,解析器改变<code>css</code>文件中相应类名也要改变。</p></li></ul><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><ul><li><p><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;https://sdf/style.css&quot;&gt;</code> </p><p><code>rel</code>表示引入一个外部的<code>css</code>的样式表，<code>href</code>指定了文件路径</p></li><li><p><code>ejs</code>一种基于<code>JavaScript</code>的模板引擎，用于在<code>HTML</code>文件中嵌入<code>JavaScript</code>逻辑，以实现动态内容渲染。<code>ejs</code>文件最终被解析为标准的<code>html</code>，主要使用<code>JavaScript</code>语句，也可以使用普通的<code>html</code>语句。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
      <category>css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>learngit</title>
    <link href="/2025/03/01/learngit/"/>
    <url>/2025/03/01/learngit/</url>
    
    <content type="html"><![CDATA[<h2 id="感谢足基！感谢Angine学长！"><a href="#感谢足基！感谢Angine学长！" class="headerlink" title="感谢足基！感谢Angine学长！~"></a>感谢足基！感谢Angine学长！~</h2><ul><li>git是目前世界上最先进的分布式版本控制系统。</li><li>“Git is a free software distributed under the GPL.”<br>“Creating  a new branch is quick and simple.”</li></ul><hr><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li>版本管理</li><li>协作</li></ul><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><ul><li><code>git init</code>初始化一个git仓库         </li><li><code>git pull</code> 抓取新提交<br>  <code>git add</code> 添加文件<br> <code>git commit -m&quot;&quot;</code> 将暂存区修改一次性提交至分支<br> <code>git status</code> 查看工作区状态   </li><li><code>git diff</code> 查看修改内容<br>  <code>git log</code> 查看提交历史<br> <code>git reflog</code> 查看命令历史<br> <code>git reset --hard HEAD^回到上一状态 /commit_id</code>在版本历史中穿梭<br> <code>git checkout --file</code> 丢弃工作区修改&#x2F;恢复误删（用版本库里版本替换）<br> <code>git remote add origin git@name:path/reponame.git</code>关联远程库<br> <code>git push origin master</code>推送最新修改<br> <code>git clone</code>克隆仓库<br> <code>git branch</code>查看分支<br> <code>git branch &lt;name&gt;</code>创建分支<br> <code>git checkout/switch &lt;name&gt;</code> 切换分支<br> <code>git merge &lt;name&gt;</code>合并分支<br> <code>git checkout -b/switch -c &lt;name&gt;</code> 创建+切换<br> <code>git branch -d/-D</code>（强删）删除分支<br> <code>git log --graph</code>看分支合并图<br> <code>git merge --no-ff -m&quot;&quot; branchname</code>以普通模式合并<br> <code>git stash</code> 保存现场 修复bug后</li><li><code>git stash pop</code>回到现场<br>  <code>git cherry-pick &lt;commit&gt;</code> 复制修改<br> <code>git remote -v</code> 查看远程库信息<br> <code>git branch --set-upstream branchname origin/branchname</code>建立本地分支与远程分支联系<br> <code>git rebase git log --graph --pretty=oneline --abbrev-commit</code>整理分支历史成直线</li></ul><h2 id="Conventional-commit"><a href="#Conventional-commit" class="headerlink" title="Conventional commit"></a>Conventional commit</h2><h4 id="1-类型（Type）"><a href="#1-类型（Type）" class="headerlink" title="1.类型（Type）"></a>1.类型（Type）</h4><ul><li>提交类型指定了该提交的功能或目的。常见的类型包括：</li><li><code>feat</code>：新增功能 <code>feat/c</code><br>  <code>fix</code>：修复bug<br>  <code>docs</code>：文档变更<br>  <code>style</code>：代码样式（不影响功能的改变，如格式化）<br>  <code>refactor</code>：代码重构（不修复bug也不新增功能）<br>  <code>perf</code>：性能优化<br>  <code>test</code>：添加缺失的测试或修复现有的测试<br>  <code>chore</code>：日常任务（如修改配置文件、构建工具的更新等）<br>  <code>build</code>：影响构建系统或外部依赖的更改（例如：maven、webpack、gulp等）<br>  <code>ci</code>：持续集成相关的更改（例如：修改Github Actions、CircleCI配置等）<br>  <code>revert</code>:撤销先前的提交<br>  <code>merge</code>:合并提交</li></ul><h3 id="建议："><a href="#建议：" class="headerlink" title="建议："></a>建议：</h3><pre><code>1. “多创建branch”2. “多commit”</code></pre>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Crash Course Computer Science【计算机科学速成课】(2)</title>
    <link href="/2025/02/25/Crash-Course-Computer-Science%E3%80%90%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E3%80%91(2)/"/>
    <url>/2025/02/25/Crash-Course-Computer-Science%E3%80%90%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E3%80%91(2)/</url>
    
    <content type="html"><![CDATA[<h2 id="感谢速成课！感谢-Carrie-Anne！感谢中文翻译组！"><a href="#感谢速成课！感谢-Carrie-Anne！感谢中文翻译组！" class="headerlink" title="感谢速成课！感谢 Carrie Anne！感谢中文翻译组！~"></a>感谢速成课！感谢 Carrie Anne！感谢中文翻译组！~</h2><h4 id="原视频"><a href="#原视频" class="headerlink" title="原视频"></a>原视频</h4><p><a href="https://www.youtube.com/playlist?list=PL8dPuuaLjXtNlUrzyH5r6jN9ulIgZBpdo">Crash Course Computer Science</a><br><a href="https://github.com/1c7/crash-course-computer-science-chinese">https://github.com/1c7/crash-course-computer-science-chinese</a></p><h2 id="第-11-集：编程语言发展史"><a href="#第-11-集：编程语言发展史" class="headerlink" title="第 11 集：编程语言发展史"></a>第 11 集：编程语言发展史</h2><ol><li><p>计算机只能处理二进制，二进制是处理器的”母语”，称为<strong>machine language</strong>或<strong>machine code</strong></p></li><li><p>在计算机早期阶段，必须用机器码写程序</p><ul><li>先在纸上用英语写一个”高层次版”,这种对程序的高层次描述叫“<strong>伪代码</strong>”，在纸上写好后用“操作码表”转成机器码，喂入计算机运行。</li></ul></li><li><p>在 1940~1950 年代,程序员开发出一种新语言，更可读、更高层次，每个操作码分配一个简单名字，叫”<strong>助记符</strong>“，”助记符”后面紧跟数据，形成完整指令。</p><ul><li>比如存指令在内存地址<code>0</code>：<code>0010 1110</code>，前 4 位是操作码，假设对某CPU<code>0010</code>代表<code> LOAD_A</code> 指令,即把值从内存复制到寄存器A,后 4 位是内存地址，<code>1110</code> 是十进制的 14,所以这 8 位表达的意思是 <strong>“读内存地址 14，放入寄存器 A”</strong></li></ul></li></ol><p><img src="/images/Screenshot_20250329_173619.jpg"></p><ol start="4"><li><p>但是CPU不知道 <code>LOAD_A 14</code> 是什么，于是有了<strong>汇编器</strong>，它可以读取用”汇编语言”写的程序，然后转成”机器码”。</p><ul><li>随着时间推移，汇编器有越来越多功能，让编程更容易，比如自动分析JUMP地址，汇编器不用固定跳转地址，而是让你插入可跳转的标签，当程序被传入汇编器，汇编器会自己搞定跳转地址,程序员可以专心编程，不用管底层细节。<br> <img src="/images/Screenshot_20250329_173655.jpg"></li></ul></li><li><p>一般来说，一条汇编指令对应一条机器指令，所以汇编码和底层硬件的连接很紧密，汇编器仍然强迫程序员思考，用什么寄存器和内存地址。于是 Hopper 设计了一种高级语言，一行高级编程语言，可能会转成几十条二进制指令。为了做到这种复杂转换，Hopper 在 1952 年创造了第一个<strong>编译器</strong>，编译器专门把高级语言，转成低级语言，比如汇编或机器码（CPU 可以直接执行机器码）。</p><ul><li><em>FORTRAN，名字来自 “公式翻译”,这门语言数年后由 IBM 在 1957 年发布,主宰了早期计算机编程</em><br><em>FORTRAN 项目总监 John Backus 说过</em><br><em>“Much of my work has come from being lazy.I didn’t like writing programs,</em><br><em>and so … I started work on a programming system to make it easier to write programs.”</em></li></ul></li><li><p>当时 IBM 在卖计算机,因此最初 FORTRAN 代码只能跑在 IBM 计算机上。1950 年代大多数编程语言和编译器，只能运行在一种计算机上，如果升级电脑，可能要重写所有代码，因此工业界，学术界，政府的计算机专家，在 1959 年组建了一个联盟，数据系统语言委员会，Grace Hopper 担任顾问，开发一种通用编程语言，可以在不同机器上通用，最后诞生了一门高级，易于使用，”普通面向商业语言”，简称 COBOL。</p><ul><li>为了兼容不同底层硬件，每个计算架构需要一个 COBOL 编译器，最重要的是，这些编译器都可以接收相同 COBOL 代码，不管是什么电脑，这叫”一次编写，到处运行”。</li></ul></li><li><p>编程语言设计的黄金时代才刚刚开始，和硬件一起飞速发展</p><ul><li>在 1960 年代，有 ALGOL, LISP 和 BASIC 等语言 70年代有：Pascal，<strong>C</strong> 和 Smalltalk </li><li>80年代有：**C++**，Objective-C 和 Perl</li><li>90年代有：<strong>Python</strong>，Ruby 和 <strong>Java</strong> 新千年 Swift, C#, <strong>Go</strong> 在崛起</li></ul></li></ol><h2 id="第-12-集-编程原理"><a href="#第-12-集-编程原理" class="headerlink" title="第 12 集 编程原理"></a>第 12 集 编程原理</h2><ol><li>以游戏为切入点讲解条件语句，循环语句，函数的使用，体会函数的强大之处和现代编程的核心<ul><li><code>it&#39;s not magic,it&#39;s the power of abstraction</code></li></ul></li><li>比如浏览器这样的复杂程序，用一长串语句来写是不可能的,会有几百万行代码，没人能理解,所以现代软件由上千个函数组成,每个负责不同的事。<br>如今超过100行代码的函数很少见，如果多于 100 行，应该有东西可以拆出来做成一个函数，符合软件设计中“<strong>高内聚低耦合</strong>”的原则。</li><li><strong>模块化编程</strong>，不仅可以让单个程序员独立制作 App，也让团队协作可以写更大型的程序，不同程序员写不同函数，只需要确保自己的代码工作正常。</li><li>现代编程语言 有很多预先写好的函数集合，叫 “<strong>库</strong>“，由专业人员编写，不仅效率高，而且经过了仔细检查，几乎做所有事情都有库，网络、图像、声音。</li></ol><h2 id="第-13-集-编程入门"><a href="#第-13-集-编程入门" class="headerlink" title="第 13 集 编程入门"></a>第 13 集 编程入门</h2><ol><li>如何想出高效的算法是早在计算机出现前就有的问题，记载最多的算法之一是“排序”。</li><li>输入大小和运行步骤数之间的关系称为算法的复杂度，计算机科学家们用“大O表示法”，来表示运行速度的量级。<ul><li>比如 O(N)效率并不高，比如”归并排序”的算法复杂度是 O(n * log n)，n 是每次合并需要比较的次数和数组大小成正比，log N 是合并步骤的次数。<br> <img src="/images/Screenshot_20250329_164342.jpg"></li></ul></li><li>图搜索算法也有很多，有不同优缺点，每次用谷歌地图时，类似<strong>Dijkstra</strong> 的算法就在服务器上运行，寻找最佳路线，现实世界中算法无处不在。</li></ol><h2 id="第-14-集-数据结构"><a href="#第-14-集-数据结构" class="headerlink" title="第 14 集 数据结构"></a>第 14 集 数据结构</h2><ol><li><strong>数组</strong>（Array）也叫<strong>列表</strong>（list）或<strong>向量</strong>（Vector）（在其它编程语言里），数组的值一个个连续存在内存里。<ul><li>可以把多个值存在数组变量里，为了拿出数组中某个值，我们要指定一个下标（index）。大多数编程语言里，数组下标都从 0 开始，用方括号 [ ] 代表访问数组。</li><li>下标可以理解为<strong>偏移量</strong>，<code>offset</code> 为 0 ，说明为数组中第一个数。<br> <img src="/images/Screenshot_20250329_180708.jpg"></li></ul></li><li>字符串在内存里以 0 结尾,不是”字符0”，是”二进制值0”,这叫字符”<strong>null</strong>“，表示字符串结尾。如果调用 print 在屏幕上输出字符串,会从开始位置，逐个显示到屏幕,直到遇到<code>null</code>值停止。</li><li>多个变量打包在一起叫结构体 (Struct),结构体可以创建复杂的数据结构。</li><li>一个结构体存一个变量,一个指针（pointer）叫一个节点(node),”<strong>指针</strong>“是一种特殊变量（注意区分指针和指针变量），指向一个内存地址，用节点可以做链表（linked list）。</li><li><strong>链表</strong>是一种灵活数据结构，能存很多个节点 (node)，灵活性是通过每个节点指向下一个节点实现的。<br> <img src="/images/Screenshot_20250329_180736.jpg"><ul><li>第一个节点，值是 7，指向地址 <code>1008</code>，代表下一个节点，位于内存地址 <code>1008</code>，下一个节点值是 112，指向地址<code>1002</code> 是一个值为 14 的节点。这个节点指回地址 <code>1000</code>，也就是第一个节点。这叫循环链表，但链表也可以是非循环的，最后一个指针是 0，”<code>null</code>“，代表链表尽头。<br> <img src="/images/Screenshot_20250329_180751.jpg"></li></ul></li><li>数组大小需要预先定好,链表大小可以动态增减。<ul><li>可以创建一个新节点，通过改变指针值，把新节点插入链表，链表也很容易重新排序，两端缩减，分割，倒序等。</li></ul></li><li>很多复杂数据结构都用链表，比如<strong>队列</strong>（queue）和 <strong>栈</strong>（stack）<ul><li>队列<strong>先进先出</strong>（FIFO），栈<strong>后进先出</strong>(LIFO) 术语叫”入栈”（push） “出栈”（pop）。</li></ul></li><li>如果节点改一下，改成 2 个指针就能做<strong>树</strong>（tree）。<ul><li>很多算法用了 “树” 这种数据结构，同样，程序员很少看指针的具体值，而是把”树”抽象成这样：最高的节点叫”<strong>根节点</strong>“（root），”根节点”下的所有节点都叫”<strong>子节点</strong>“（children），任何子节点的直属上层节点，叫”<strong>母节点</strong>“（parent node），没有任何子节点的节点，也就是“树”结束的地方叫“<strong>叶节点</strong>”。</li></ul></li></ol><h2 id="第-15-集-阿兰·图灵"><a href="#第-15-集-阿兰·图灵" class="headerlink" title="第 15 集 阿兰·图灵"></a>第 15 集 阿兰·图灵</h2><ol><li>计算机科学之父<strong>阿兰·马蒂森·图灵</strong>于 1921 年出生在伦敦，从小就表现出惊人数学和科学能力。他对计算机科学的建树始于 1935 年，当时他是剑桥国王学院的硕士生，他开始解决德国数学家<strong>大卫·希尔伯特</strong>提出的问题，叫 Entscheidungsproblem （德语）即”<strong>可判定性问题</strong>“:是否存在一种算法，输入正式逻辑语句，输出准确的”是”或”否”答案？</li><li>图灵提出了一种假想的计算机，现在叫“<strong>图灵机</strong>”。图灵机是一台理论计算设备，有一个状态变量保存当前状态，一组规则描述机器着什么，可能是在纸带写入一个符号，或把读写头移动一格，或执行这些动作的组合。<br> <img src="/images/Screenshot_20250412_164742.jpg"><ul><li>比如读一个以零结尾的字符串，并计算 1 的出现次数，出现偶数次在纸带上写一个 1 ，奇数次写一个 0 。要使用图灵机来实现这一动作首先要定义规则，当前符号为 1 ，状态更新为奇数或偶数，读写头向右移动，如果当前符号是 0 ，状态为偶数那么在纸带上写一个 1，状态改为停机。<br> <img src="/images/Screenshot_20250412_164809.jpg"></li></ul></li><li>图灵证明了这个假想机器如果有足够的时间和内存，可以执行任何计算，他是一台通用计算机，一个可以创造任何东西的强大计算模型！但“停机问题”证明了不是所有问题都能用计算解决。</li><li>丘奇和图灵证明了计算是有极限的，起步了可计算性理论，现在叫”丘奇-图灵论题”。当时是1936年，图灵只有24岁。从1936年到1938年在丘奇指导下，他在普林斯顿拿到博士学位。毕业后回到剑桥，1939年后不久，英国卷入第二次世界大战。整个战争期间，图灵和同事在布莱切利园努力破解加密，位于”布莱切利园”的一个密码破译组织，他的工作内容之一是破解德国的通信加密，特别是”<strong>恩尼格玛机</strong>“加密的信息。</li><li>战后，图灵回到学术界为许多早期计算机工作做出贡献，比如曼彻斯特 1 号，一个早期有影响力的存储程序计算机，但他最有名的战后贡献是”<strong>人工智能</strong>“。1950 年，图灵设想了未来的计算机，拥有和人类一样的智力，或至少难以区分，图灵提出如果计算机能欺骗人类相信它是人类，才算是智能。你可以问他问题，如果你区分不出来哪个是人类，哪个是计算机，那么计算机就通过了<strong>图灵测试</strong>。</li><li>图灵那个时代，同性恋在英国和大部分国家都是违法的，1952 年调查他家的入室盗窃案时，向当局暴露了他的性取向，被起诉 “行为严重不检点”。图灵被定罪，有2个选择：1.入狱2.接受激素来压制性欲，他选了后者，部分原因是为了继续学术工作，但药物改变了他的情绪和性格,图灵于1954年服毒自尽，年仅41岁。</li></ol><h2 id="第-16-集-软件工程"><a href="#第-16-集-软件工程" class="headerlink" title="第 16 集 软件工程"></a>第 16 集 软件工程</h2><ol><li>微软的 Office 大约有 4000 万代码，为了写大型程序，程序员用各种工具和方法，所有形成了”软件工程”学科。把大项目分解成小函数，可以让多人同时工作，如果只是这样，微软 Office 会有几十万个函数还是太多了，解决办法是：把函数打包成层级，把相关代码都放在一起，打包成<strong>对象（objects）</strong>。<ul><li>例如，汽车软件中可能有几个和定速巡航有关的函数，比如 设定速度，逐渐加速减速，停止定速巡航因为这些函数都相关，可以包装成一个”定速巡航对象”。可能还有 “火花塞点火” “燃油泵” 和 “散热器”，我们可以做一个”引擎对象” 来包括所有”子”对象。同时也可能有自己的函数和变量。</li><li>总的来说，对象可以包其它对象，函数和变量。把函数打包成对象的思想叫 “<strong>面向对象编程</strong>“</li></ul></li><li>其他团队阅读代码时需要文档帮助理解代码都做什么，以及定义好的 “程序编程接口” -简称<strong>API</strong>，API 帮助不同程序员合作不用知道具体细节，只要知道怎么使用就行了。”面向对象”的编程语言可以指定函数是 public 或 private，来设置权限，”面向对象”的编程语言可以指定函数是 public 或 private，来设置权限，如果函数标记成 private意味着 只有同一个对象内的其他函数能调用它。</li><li>“面向对象”的核心是隐藏复杂度，选择性的公布功能。因为做大型项目很有效，所以广受欢迎，计算机上几乎所有软件，游戏机里几乎所有游戏<br>都是 “面向对象” 编程语言写的，比如 C++, C#, Objective-C 等。</li><li>集成开发环境，简称 IDE，IDE 帮助开发者整理和看代码，很多 IDE 还可以直接编译和运行代码，定位到出错代码，还会提供信息帮你解决问题这叫<strong>调试</strong>（debug）。</li><li>大多数程序员会花 70％~80％ 时间调试，而不是在写代码，好工具能极大帮助程序员防止和解决错误。程序员工作的另一个重要部分是给代码写<strong>文档</strong>，文档一般放在一个叫 README 的文件里告诉其他程序员，看代码前先看这个文件，文档也可以直接写成”注释”，放在源代码里。</li><li>源代码管理也叫”<strong>版本控制</strong>“帮助团队协作，把代码放到一个中心服务器上叫”代码仓库”，这样多名程序员可以同时写代码，建立庞大的系统。源代码管理可以跟踪所有变化，如果发现 bug，全部或部分代码，可以”回滚”到之前的稳定版，”源代码管理” 也记录了谁改了什么代码。</li><li>测试一般由个人或小团队完成，测试可以统称 “质量保证测试”，简称 <strong>QA</strong>。严格测试软件的方方面面，模拟各种可能情况，看软件会不会出错，基本上就是找 bug，解决大大小小的错误需要很多工作但对确保软件质量至关重要，让软件在各种情况下按预期运行。<ul><li>“beta 版” 软件，意思是软件接近完成但不是100％完全测试过。公司有时会向公众发布 beta 版，以帮助发现问题，用户就像免费的 QA 团队。</li><li>alpha 版本般很粗糙，错误很多，经常只在公司内部测试。</li></ul></li></ol><h2 id="第-17-集-集成电路-摩尔定律"><a href="#第-17-集-集成电路-摩尔定律" class="headerlink" title="第 17 集 集成电路 &amp; 摩尔定律"></a>第 17 集 集成电路 &amp; 摩尔定律</h2><ol><li>大约 1940年代~1960年代中期这段时间里计算机都由独立部件组成叫”分立元件”，然后不同组件再用线连在一起。1950 年代中期，晶体管开始商业化（市场上买得到），但晶体管依然是分立元件。</li><li>解决方法就是把多个组件包在一起，变成一个新的独立组件，这就是<strong>集成电路</strong>（IC），在1959年 Robert Noyce 的仙童半导体让集成电路变为现实，仙童半导体公司用硅，硅的蕴藏量丰富，占地壳四分之一，也更稳定可靠，Noyce 被公认为现代集成电路之父。开创了电子时代，创造了硅谷（仙童公司所在地）。</li><li>为了创造更大更复杂的电路，于是有了<strong>印刷电路板</strong>，简称 PCB，PCB 可以大规模生产，无需焊接或用一大堆线，它通过蚀刻金属线的方式，把零件连接到一起。把 PCB 和 IC 结合使用可以大幅减少独立组件和电线，但做到相同的功能。</li><li>为了实现更复杂的设计，需要全新的制作工艺”<strong>光刻</strong>“。光把复杂图案印到材料上，比如半导体。晶圆做基础把复杂金属电路放上面，集成所有东西。<ul><li>硅片顶部加一层薄薄的氧化层, 作为保护层然后加一层特殊化学品, 叫 “光刻胶”，光刻胶被光照射后会变得可溶可以用一种特殊化学药剂洗掉，把光掩膜盖到晶圆上，用强光照射挡住光的地方，光刻胶不会变化，光照到的地方，光刻胶会发生化学变化洗掉它之后，暴露出氧化层用另一种化学物质洗掉”氧化层”露出的部分, 蚀刻到硅层现在硅又露出来了。我们修改硅露出来的区域让它导电性更好，”掺杂”通常用高温气体来做，比如磷，渗透进暴露出的硅，改变电学性质最后一步，在氧化层上做通道放一层薄薄的金属，比如铝或铜，连接不同晶体管。</li></ul></li><li>1965年，戈登·摩尔看到了趋势：每两年左右，得益于材料和制造技术的发展同样大小的空间，能塞进两倍数量的晶体管，叫<strong>摩尔定律</strong>。</li><li>CPU 不是唯一受益的元件，大多数电子器件都在指数式发展：内存，显卡，固态硬盘，摄像头感光元件，等等。</li><li>专家们几十年来一直在预言摩尔定律的终结进一步做小，会面临 2 个大问题1. 用光掩膜把图案弄到晶圆上，因为光的波长，精度已达极限所以科学家在研制波长更短的光源，投射更小的形状2. 当晶体管非常小，电极之间可能只距离几个原子电子会跳过间隙，这叫：<strong>量子隧道贯穿</strong>。如果晶体管漏电，就不是好开关。</li></ol><h2 id="第-18-集-操作系统"><a href="#第-18-集-操作系统" class="headerlink" title="第 18 集 操作系统"></a>第 18 集 操作系统</h2><ol><li></li></ol>]]></content>
    
    
    <categories>
      
      <category>CS0</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Crash Course Computer Science【计算机科学速成课】(1)</title>
    <link href="/2025/02/22/Crash%20Course%20Computer%20Science%E3%80%90%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E3%80%91(1)/"/>
    <url>/2025/02/22/Crash%20Course%20Computer%20Science%E3%80%90%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E3%80%91(1)/</url>
    
    <content type="html"><![CDATA[<h2 id="感谢速成课！感谢-Carrie-Anne！感谢中文翻译组！"><a href="#感谢速成课！感谢-Carrie-Anne！感谢中文翻译组！" class="headerlink" title="感谢速成课！感谢 Carrie Anne！感谢中文翻译组！~"></a>感谢速成课！感谢 Carrie Anne！感谢中文翻译组！~</h2><h4 id="原视频"><a href="#原视频" class="headerlink" title="原视频"></a>原视频</h4><p><a href="https://www.youtube.com/playlist?list=PL8dPuuaLjXtNlUrzyH5r6jN9ulIgZBpdo">Crash Course Computer Science</a><br><a href="https://github.com/1c7/crash-course-computer-science-chinese">https://github.com/1c7/crash-course-computer-science-chinese</a></p><h2 id="第-1-集：计算机早期历史"><a href="#第-1-集：计算机早期历史" class="headerlink" title="第 1 集：计算机早期历史"></a>第 1 集：计算机早期历史</h2><ul><li>算盘 → 步进计算器 → 差分机 → 分析机 → 打孔卡片制表机</li></ul><ol><li>最早的计算设备是算盘，大约公元前 2500 年发明于”美索不达米亚”.</li><li>在接下来 4000 年，人类发明了各种巧妙的计算设备 比如星盘，让船只可以在海上计算纬度 或计算尺，帮助计算乘法和除法.</li><li>最早使用 “计算机” 一词的文献是1613 年的一本书，作者 Richard Braithwait 然而指的不是机器，而是一种职业，指负责计算的人.</li><li>1800 年后Computer逐渐开始从指代职业变成指代机器.  </li><li>机器里有名的是：步进计算器,第一个可以做加减乘除的机器,沿用了 3 个世纪.</li><li>炮弹为了精准，要计算弹道，二战是查表来做，但每次改设计了就需要做一张新表.</li><li><strong>Charles Babbage</strong> 提出了 “<strong>差分机</strong>“, 一个更复杂的机器，能近似多项式，在构造差分机期间，想出了<strong>分析机</strong>, 分析机是通用计算机 ,它可以做很多事情,不只是一种特定运算.</li><li>Ada Lovelace 给分析机写了假想程序，因此成为了第一位程序员  </li><li>美国政府在 1890 年的人口普查中面临着严重的问题,预计要 13 年完成,Herman Hollerith 的打孔卡片制表机大大提升了效率,使人口普查在短短两年半内完成.</li><li>Hollerith 成立了制表机器公司,这家公司后来在 1924 年与其它机械制造商合并成为了 “<strong>国际商业机器公司</strong>“，简称 <strong>IBM</strong>.</li></ol><h2 id="第-2-集：电子计算机"><a href="#第-2-集：电子计算机" class="headerlink" title="第 2 集：电子计算机"></a>第 2 集：电子计算机</h2><ul><li>继电器 → 真空管 → 晶体管</li></ul><ol><li>20世纪的发展要求更强的计算能力,柜子大小的计算机发展到房间大小 ,最大的机电计算机之一是哈佛 Mark 1 号,IBM 1944 年做的,大脑是”<strong>继电器</strong>“,给”曼哈顿计划”跑模拟.</li><li>1940 年代一个好的继电器 1 秒能翻转 50 次,哈佛马克一号1 秒能做 3 次加法或减法运算,一次乘法要花 6 秒，除法要花 15 秒</li><li>除了速度慢，另一个限制是齿轮磨损,随着继电器数量增加，故障概率也会增加,同时这些巨大，黑色，温暖的机器也会吸引昆虫,1947年9月，哈佛马克2型的操作员从故障继电器中，拔出一只死虫这就是术语 “<strong>bug</strong>“（虫子）的来源.</li><li>1904 年，热电子管出现，世界上第一个<strong>真空管</strong>。改进为三极真空管后变成和继电器的功能一样,并且真空管内没有会动的组件,更少的磨损,每秒可以开闭数千次.</li><li>“巨人1号” 计算机在英国,布莱切利园,首次大规模使用真空管,用于破解纳粹通信,被认为是第一个可编程的电子计算机但编程麻烦，还要配置.  </li><li>1946 年，宾夕法尼亚大学的 <strong>ENIAC</strong> 是第一个通用可编程计算机,每秒可执行 5000 次十位数加减法.</li><li>1947 年，<strong>贝尔实验室</strong>做出了<strong>晶体管</strong>，晶体管有诸多好处,每秒可以切换上百万次，并且能工作几十年,IBM 很快全面转向晶体管  </li><li>很多晶体管和半导体的开发在”圣克拉拉谷”,在加州位于”旧金山”和”圣荷西”之间,而生产半导体最常见的材料是硅,所以这个地区被称为 “<strong>硅谷</strong>“</li><li>William Shockley 搬了过去，创立了肖克利半导体 → 仙童半导体 → 英特尔</li></ol><h2 id="第-3-集：布尔逻辑和逻辑门"><a href="#第-3-集：布尔逻辑和逻辑门" class="headerlink" title="第 3 集：布尔逻辑和逻辑门"></a>第 3 集：布尔逻辑和逻辑门</h2><ol><li>3个基本操作：NOT，AND，OR以及XOR 异或，异为真，同为假<br><img src="/images/image.png"></li></ol><h2 id="第-4-集：二进制"><a href="#第-4-集：二进制" class="headerlink" title="第 4 集：二进制"></a>第 4 集：二进制</h2><ol><li>8 位能表示的最小数是 0，最大数是 255,1 bytes &#x3D; 8 bits 存储单位MB GB TB 等,32 位能表示的最大数是 43 亿左右,64 位能表达最大数大约是 9.2×10 ^ 18,</li><li>Instagram 照片很清晰,它们有上百万种颜色,因为如今都用 32 位颜色</li><li>大部分计算机用第一位表示正负,1 是负，0 是正,最常见的是 IEEE 754 标准表示浮点数，在 32 位浮点数中第 1 位表示数的符号——正或负，接下来 8 位存指数，剩下 23 位存有效位数</li><li>美国信息交换标准代码 - ASCII, 用来表示字符<br><img src="/images/image(1).png"></li><li>UNICODE 1992 年诞生，是字符编码标准， 解决 ASCII 不够表达所有语言的问题,最常见的 Unicode 是 16 位的，有超过一百万个位置</li></ol><h2 id="第-5-集：算数逻辑单元-ALU"><a href="#第-5-集：算数逻辑单元-ALU" class="headerlink" title="第 5 集：算数逻辑单元 - ALU"></a>第 5 集：算数逻辑单元 - ALU</h2><ol><li><p>ALU 算术逻辑单元，有 2 个单元，1 个算术单元和 1 个逻辑单元</p></li><li><p>算术单元，负责计算机里的所有数字操作  </p><ul><li>半加器 (处理1个 bit，2个输入)  输出”总和”和”进位”<br><img src="/images/image(2).png"></li><li>全加器 (处理1个 bit，3个输入)<br><img src="/images/image(3).png"></li></ul></li><li><p>8 bit 加法 (1个半加器，7个全加器）  </p><ul><li>把这个全加器的进位连到下个全加器的输入，8位行波进位加法器<br> <img src="/images/image(4).png"></li><li>如果第 9 位有进位，代表着 2 个数字的和太大了，超过了 8 位这叫 “<strong>溢出</strong>“ (overflow)。著名的例子是，吃豆人用 8 位存当前关卡数，如果你玩到了第 256 关（ 8 位 bit 最大表示 255），ALU 会溢出，造成一连串错误和乱码，使得该关卡无法进行，这个 bug 成了厉害吃豆人玩家的代表</li><li>缺点是每次进位都要一点时间但如今的量级是每秒几十亿次运算，所以会造成影响，所以，现代计算机用的加法电路有点不同，叫 “超前进位加法器”</li><li>乘法用多次加法来实现，除法用迭代减法实现</li></ul></li><li><p>逻辑单元  </p><ul><li>能做简单的数值测试，检测数字是否为 0 的电路（一堆 OR 门最后加个 NOT 门）</li></ul></li><li><p>工程师不想在用 ALU 时去想那些事情,ALU抽象成一个 V 符号  </p></li><li><p>ALU 还会输出一堆Flag 标志（是否相等，是否小于，是否溢出等等）</p></li></ol><h2 id="第-6-集：寄存器和内存"><a href="#第-6-集：寄存器和内存" class="headerlink" title="第 6 集：寄存器和内存"></a>第 6 集：寄存器和内存</h2><p>本集重点是 Memory （存储 &#x2F; 内存 两种含义）</p><ol><li>“<strong>随机存取存储器</strong>“，简称”<strong>RAM</strong>“，在断电时损失数据</li><li>存 1 位 “AND-OR <strong>锁存器</strong>“(Gated Latch - 锁存器）<ul><li>它有两个输入，”设置”输入, 把输出变成 1，”复位”输入, 把输出变成 0 ，如果”设置”和”复位”都是 0，电路会输出最后放入的内容<br><img src="/images/image(5).png"></li><li>一根线来”启用”内存，这条线叫 “允许写入线”<br><img src="/images/image(6).png"></li></ul></li><li>存 8 位 (Register - <strong>寄存器</strong>)<ul><li>如果我们并排放 8 个锁存器，可以存 8 位信息，比如一个 8 bit 数字，一组这样的锁存器叫 “寄存器”，寄存器能存一个数字，这个数字有多少位，叫”位宽”，如今许多计算机都有 64 位宽的寄存器<br><img src="/images/image(7).png"></li><li>为了减少线的数量，在矩阵中做成网格，要启用某个锁存器，就打开相应的行线和列线，只有行线和列线均为1， AND 门才输出 1</li></ul></li><li>16x16 的矩阵存 256 位，数据选择器&#x2F;<strong>多路复用器</strong> (Multiplexer) 解码 8 位地址，定位到单个锁存器，输入一个 8 位地址，4 位代表行， 4 位代表列</li><li>不断把内存打包到更大规模，随着内存地址增多，内存地址也必须增长，内存的一个重要特性是：可以随时访问任何位置，因此叫 “随机存取存储器” ，简称 RAM</li></ol><h2 id="第-7-集：中央处理器（CPU"><a href="#第-7-集：中央处理器（CPU" class="headerlink" title="第 7 集：中央处理器（CPU)"></a>第 7 集：中央处理器（CPU)</h2><ol><li>RAM + 寄存器 + ALU 做个 CPU  <ul><li>一个寄存器追踪程序运行到哪里了，我们叫它  “指令地址寄存器”，存当前指令的内存地址 </li><li>另一个寄存器存当前指令，叫  “指令寄存器”</li></ul></li><li>进行”<strong>取指令→解码→执行</strong>“ 这个循环  </li><li>时钟以精确的间隔  触发电信号控制单元会用这个信号，推进 CPU 的内部操作，确保一切按步骤进行，CPU “取指令→解码→执行” 的速度叫 “<strong>时钟速度</strong>“, 单位是赫兹<ul><li>第一个单芯片 CPU 是 “英特尔 4004” 1971 年发布的 4 位CPU，时钟速度达到了 740 千赫兹 - 每秒 74 万次</li><li>一兆赫兹是 1 秒 1 百万个<strong>时钟周期</strong>，而看视频的电脑或手机，肯定有几千兆赫兹</li></ul></li><li>超频，修改时钟速度，加快 CPU 的速度，提升性能,但超频太多会让 CPU 过热或产生乱码，因为信号跟不上时钟，而降频省电，这叫 “<strong>动态调整频率</strong>“</li></ol><h2 id="第-8-集：指令和程序"><a href="#第-8-集：指令和程序" class="headerlink" title="第 8 集：指令和程序"></a>第 8 集：指令和程序</h2><p>本集重点：一步步带你运行一遍程序</p><ol><li>”指令集” <ul><li>LOAD_A，LOAD_B，SUB，JUMP，ADD，HALT 等指令<br> <img src="/images/image(8).png"></li><li>JUMP 0 可以跳回开头，JUMP 在底层的实现方式是用指令后 4 位的值覆盖掉 “指令地址寄存器” 里的值</li><li>带条件跳转，JUMP NEGATIVE 只在 ALU 的 “负数标志” 为真时，即算术结果是负数才跳转，还有其他类型的 JUMP </li><li>真正现代 CPU 用更多指令集，位数更长。</li></ul></li><li>1971年的英特尔 4004 处理器，有 46 个指令，如今英特尔酷睿 i7, 有上千条指令</li></ol><h2 id="第-9-集：高级-CPU-设计"><a href="#第-9-集：高级-CPU-设计" class="headerlink" title="第 9 集：高级 CPU 设计"></a>第 9 集：高级 CPU 设计</h2><ol><li>早期是加快晶体管切换速度，来提升 CPU 速度，但这种提速方法最终会碰到瓶颈，处理器厂商发明各种新技术来提升性能，不但让简单指令运行更快也让它能进行更复杂的运算<ul><li>现代处理器有专门电路来处理图形操作, 解码压缩视频, 加密文档 等等，给 CPU 专门的除法电路 + 其他电路来做复杂操作，比如游戏，视频解码</li></ul></li><li>一条”从内存读数据”的指令可能要多个时钟周期，CPU 空等数据，解决延迟的方法之一是给 CPU 加缓存，提高数据存取速度，更快喂给 CPU</li><li>缓存和 RAM 不一致了，这种不一致必须记录下来，之后要同步，因此缓存里每块空间有一个特殊标记叫脏位 Dirty bit  </li><li>另一种提升性能的方法叫<strong>流水线设计</strong>,并行处理 - parallelize,更进一步，动态排序有依赖关系的指令,最小化流水线的停工时间,乱序执行 - out-of-order execution</li><li>简单的流水线处理器，看到 JUMP 指令会停一会儿,等待条件值确定下来,一旦 JUMP 的结果出了，处理器就继续流水线,因为空等会造成延迟，所以高端处理器会用一些技巧<ul><li>可以把 JUMP 想成是 “岔路口”，高端 CPU 会猜哪条路的可能性大一些,然后提前把指令放进流水线，这叫 “<strong>推测执行</strong>“</li><li>当 JUMP 的结果出了，如果 CPU 猜对了,流水线已经塞满正确指令，可以马上运行,如果 CPU 猜错了，就要清空流水线,为了尽可能减少清空流水线的次数，CPU 厂商开发了复杂的方法来猜测哪条分支更有可能，叫”<strong>分支预测</strong>“</li><li>现代 CPU 的正确率超过 90%</li></ul></li><li>另一个提升性能的方法是<strong>同时运行多个指令流用多核处理器</strong>,如双核或四核处理器意思是一个 CPU 芯片里，有多个独立处理单元，很像是有多个独立 CPU，但因为它们整合紧密，可以共享一些资源，比如缓存，使得多核可以合作运算，但多核不够时，可以用多个 CPU，高端计算机，比如Youtube 服务器需要更多马力，让上百人能同时流畅观看，2个或4个CPU是最常见的，但有时人们有更高的性能要求所以造了超级计算机！</li></ol><h2 id="第-10-集：早期的编程方式"><a href="#第-10-集：早期的编程方式" class="headerlink" title="第 10 集：早期的编程方式"></a>第 10 集：早期的编程方式</h2><ol><li>早期计算机如何编程  <ul><li>打孔纸卡 → 插线板 → 面板拨开关</li></ul></li><li>程序和数据都存在一个地方，叫<strong>冯诺依曼架构</strong>  Von Neumann Architecture </li><li><strong>冯诺依曼计算机</strong>的标志是，一个处理器(有算术逻辑单元)+数据寄存器+指令寄存器+指令地址寄存器+内存（负责存数据和指令)</li><li>第一款取得商业成功的家用计算机: Altair 8800 ，编程依然很困难，人们需要更友好更简单的方式编程</li></ol>]]></content>
    
    
    <categories>
      
      <category>CS0</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Knuth-Morris-Pratt（KMP）算法【详解】</title>
    <link href="/2025/01/11/Knuth-Morris-Pratt%EF%BC%88KMP%EF%BC%89%E7%AE%97%E6%B3%95%E3%80%90%E8%AF%A6%E8%A7%A3%E3%80%91/"/>
    <url>/2025/01/11/Knuth-Morris-Pratt%EF%BC%88KMP%EF%BC%89%E7%AE%97%E6%B3%95%E3%80%90%E8%AF%A6%E8%A7%A3%E3%80%91/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>笔者在学习字符串的过程中，接触到求子字符串位置的问题，除了暴力解法外了解到有一种名为KMP（烤馍片）的巧妙算法也顺便了解了一下发明者之一的“神”<code>Kunth</code>的履历，但不在此赘述。虽然网上有很多详细图解之类，但我还是不能充分理解。在看完Tushar Roy的讲解后才恍然大悟，本文主要根据他的讲解，结合自己的思考在此写出我的理解。</p><hr><h1 id="一、从问题谈起，如何最直接地搜索一个字符串？"><a href="#一、从问题谈起，如何最直接地搜索一个字符串？" class="headerlink" title="一、从问题谈起，如何最直接地搜索一个字符串？"></a>一、从问题谈起，如何最直接地搜索一个字符串？</h1><ul><li>示例：<br>给定字符串是<code>absdglx</code>,目标字符串是<code>sdgl</code>，给每个字符标上序号，分别是<code>m0,m1,m2,m3,m4,m5,m6</code>,<code>n0,n1,n2,n3</code>。最直接的搜索并定位目标字符串的方法就是将目标字符串的每个字符给定字符串的字符逐一比较。</li><li>从<code>m0</code>，<code>n0</code>开始，若匹配则两字符串都从比较的字符往后移动一个字符，继续进行比较；若不相同，则给定字符串回到从起始比较位往后移动一个字符的位置，目标字符串回到<code>n0</code>从头开始比较，直到在给定字符串超过最后一个字符<code>m7</code>前，目标字符串匹配完最后一个字符<code>n3</code>，即搜索到目标字符串。</li><li>要将上述过程通过编程实现，我们可以用两个指针<code>i,j</code>分别指向给定字符串和目标字符串，按上述过程进行指针的后移和回退，直到<code>i</code>或<code>j</code>指向字符串的最后一个字符。</li></ul><h1 id="二、实现优化的kmp算法如何操作？"><a href="#二、实现优化的kmp算法如何操作？" class="headerlink" title="二、实现优化的kmp算法如何操作？"></a>二、实现优化的kmp算法如何操作？</h1><p>我们可以发现上文朴素(暴力)算法的不便和存在大量低效、重复的匹配操作，那么我们可不可以通过某些目标字符串本身特性来减少回退而多进行回溯，提高效率。</p><h2 id="1-引入前缀数组"><a href="#1-引入前缀数组" class="headerlink" title="1.引入前缀数组"></a>1.引入前缀数组</h2><ul><li><p>前缀数组的每个元素对应着目标字符串的每个字符，其元素表示了该字符前的子字符串（包括该字符）中的最长的相等的前缀和后缀的长度，即前文所指的目标字符串的某些特性。<br>  举例：<code>abcabcd</code>的前缀数组可以用下面这个表格来表示。</p><table><thead><tr><th>a</th><th>b</th><th>c</th><th>a</th><th>b</th><th>c</th><th>d</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>1</td><td>2</td><td>3</td><td>0</td></tr></tbody></table></li><li><p>我们用一个例子来详细解释如何手推前缀数组,过程中会用到前缀和回溯的思想。<br> 1.<code>abcdabca</code>使用两个指针<code>i,j</code>分别指向<code>a,b</code>,i和j指向的元素显然为0，将<code>j</code>向后移动，<code>j</code>移动到j移动到第二个<code>a</code>时有了相同前后缀元素记为1，然后将<code>i</code>和<code>j</code>都向后移动j指向<code>b</code>相同前后缀长为2，数组元素记为2，再次将<code>i</code>和<code>j</code>向后移动，<code>j</code>指向<code>c</code>同理，当<code>j</code>指向末尾的<code>a</code>时两指针所指字符不同，需要进行回溯。观察到<code>j</code>指针所指字符的前一个字符对应元素为0，即没有相同前后缀，则将<code>j</code>回退至首字符，此时<code>i</code>和<code>j</code>所指字符均为<code>a</code>，则<code>i</code>所指字符对应元素记为1。该字符串前缀数组即为<strong>00001231</strong>。</p></li></ul><h2 id="2-给定字符串和目标字符串分别如何回溯？"><a href="#2-给定字符串和目标字符串分别如何回溯？" class="headerlink" title="2.给定字符串和目标字符串分别如何回溯？"></a>2.给定字符串和目标字符串分别如何回溯？</h2><ul><li>举例：给定字符串<code>abxabcabcaby</code>,目标字符串<code>abcaby</code>,对应前缀数组为<strong>000120</strong>。（同样使用<code>i</code> <code>j</code>指针但分别指向给定字符串和目标字符串）<br>两字符串前两个字符匹配，第三个字符分别为<code>x</code>和<code>c</code>不匹配，<code>j</code>前一字符对应元素为0，<code>j</code>回到首位指向<code>a</code>仍与<code>x</code>不匹配，<code>j</code>不移动，将<code>i</code>往后移动指向<code>a</code>与<code>j</code>所指匹配，<code>i</code>和<code>j</code>都往后移动。同理继续匹配直到<code>i</code>指向<code>c</code>，<code>j</code>指向<code>y</code>不匹配，<code>j</code>前一字符对应元素为2，<code>j</code>回溯到第三个字符<code>c</code>与<code>i</code>匹配，<code>i</code>和<code>j</code>都往后移动继续匹配直到最后完成匹配。</li></ul><h1 id="三、如何用代码来实现kmp算法？"><a href="#三、如何用代码来实现kmp算法？" class="headerlink" title="三、如何用代码来实现kmp算法？"></a>三、如何用代码来实现kmp算法？</h1><p>同样主要分为两步，</p><h2 id="1-计算目标字符串的前缀数组"><a href="#1-计算目标字符串的前缀数组" class="headerlink" title="1. 计算目标字符串的前缀数组"></a>1. 计算目标字符串的前缀数组</h2><ul><li>前缀数组定义为<code>prefix[]</code>,<code>j</code>和<code>i</code>分别指向第一、二个字符，让<code>i</code>遍历目标字符串每个字符，<code>j = prefix[j-1]</code>就是<code>j</code>回溯至<code>j</code>所指前一个字符对应元素的位置。<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"> <span class="token keyword">void</span> <span class="token function">Prefix</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> pattern<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> prefix<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    prefix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pattern<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>pattern<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>            prefix<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                   j <span class="token operator">=</span> prefix<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                prefix<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="2-借助前缀数组进行字符串的匹配"><a href="#2-借助前缀数组进行字符串的匹配" class="headerlink" title="2.借助前缀数组进行字符串的匹配"></a>2.借助前缀数组进行字符串的匹配</h2><ul><li><code>pattern</code>为目标字符串，<code>text</code>为给定字符串，<code>i</code>和<code>j</code>分别指向给定字符串和目标字符串，同样遍历给定字符串，若j指向了目标字符串最后一个字符，则<code>i-j</code>为<code>text</code>中<code>pattern</code>的首字符位置。<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">kmpsearch</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span>text<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span>pattern<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> wid <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> prefix<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">Prefix</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span>prefix<span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> wid<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pattern<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>text<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span>len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>i<span class="token operator">-</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>           j <span class="token operator">=</span> prefix<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>wid<span class="token operator">&amp;&amp;</span>pattern<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span>text<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            j <span class="token operator">=</span> prefix<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文详细解释了kmp算法如何实现，kmp算法通过目标字符串由自身特性生成的前缀数组来减少回溯的过程，建议亲自动手推一推生成前缀数组和模式匹配的过程，这样可以更好地理解其思想和原理。</p><blockquote><p>如果发现文章中存在错误敬请批评指正，感谢您的阅读。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LaTex笔记</title>
    <link href="/2025/01/08/latex/"/>
    <url>/2025/01/08/latex/</url>
    
    <content type="html"><![CDATA[<h2 id="一、LaTex中常见希腊字母"><a href="#一、LaTex中常见希腊字母" class="headerlink" title="一、LaTex中常见希腊字母"></a>一、LaTex中常见希腊字母</h2><blockquote><p>\alpha \beta \gamma \delta \epsilon \zeta \eta \pi \sigma \tau \phi \psi \chi</p></blockquote><h2 id="二、LaTex常用指令"><a href="#二、LaTex常用指令" class="headerlink" title="二、LaTex常用指令"></a>二、LaTex常用指令</h2><table><thead><tr><th>名称</th><th>指令</th><th>名称</th><th>指令</th></tr></thead><tbody><tr><td>分数</td><td>\frac{分子}{分母}</td><td>乘号</td><td>\times</td></tr><tr><td>开方</td><td>\sqrt[m]{n}</td><td>求和</td><td>\sum</td></tr><tr><td>求积</td><td>\prod</td><td>积分</td><td>\int</td></tr><tr><td>上标</td><td>^</td><td>下标</td><td>_</td></tr><tr><td>小于等于</td><td>\leq</td><td>大于等于</td><td>\geq</td></tr><tr><td>除法</td><td>\div</td><td>点乘</td><td>\cdot</td></tr></tbody></table><h2 id="三、数学符号"><a href="#三、数学符号" class="headerlink" title="三、数学符号"></a>三、数学符号</h2><table><thead><tr><th>$\vec a$</th><th>\vec a</th><th>$\int_{i&#x3D;m}^{n}$</th><th>\int_{i&#x3D;m}^{n}</th></tr></thead><tbody><tr><td>$\sum_{i&#x3D;m}^{n}$</td><td>\sum_{i&#x3D;m}^{n}</td><td>$\prod_{i&#x3D;m}^{n}$</td><td>\prod_{i&#x3D;m}^{n}</td></tr><tr><td>$\binom53$</td><td>\binom53</td><td>$\forall$</td><td>forall</td></tr><tr><td>$\partial$</td><td>\partial</td><td>$\mathop{\lim}_{n\to\infty}f(x)$</td><td>\mathop{\lim}_{n\to\infty}f(x)</td></tr><tr><td>$\sum_{n&#x3D;0}^{\infty}$</td><td>sum_{n&#x3D;0}^{\infty}</td><td>$\oint$</td><td>\oint</td></tr><tr><td>$\oiint$</td><td>\oiint</td><td>$\oiiint$</td><td>\oiiint</td></tr><tr><td>$\sqrt[3]{1000}$</td><td>\sqrt[3]{1000}</td><td>$\int_a^bf(x)$</td><td>\int_a^bf(x)</td></tr><tr><td>$\left\langle\right\rangle$</td><td>\left\langle    \right\rangle</td><td>{}</td><td>\left{ \right}</td></tr></tbody></table><h2 id="四、简单数学公式"><a href="#四、简单数学公式" class="headerlink" title="四、简单数学公式"></a>四、简单数学公式</h2><p>$$<br>y &#x3D; x^2<br>$$<br>$$<br>E &#x3D; mc^2<br>$$<br>$$<br>e^x&#x3D;\sum_{n&#x3D;0}^\infty\frac{1}{n!}x^i<br>$$</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">$</span>e<span class="built_in">^</span>x=<span class="keyword">\sum</span><span class="built_in">_</span>&#123;n=0&#125;<span class="built_in">^</span><span class="keyword">\infty</span><span class="keyword">\frac</span>&#123;1&#125;&#123;n!&#125;x<span class="built_in">^</span>i<span class="built_in">$</span></span><br></pre></td></tr></table></figure><p>$$<br>\begin{equation}<br>S_{n+1} &#x3D; S_{n} + S_{n},<br>S_{n} &#x3D; 1 &#x3D;2^{n}<br>\end{equation}<br>$$</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;equation&#125;</span><br><span class="line">S<span class="built_in">_</span>&#123;n+1&#125; = S<span class="built_in">_</span>&#123;n&#125; + S<span class="built_in">_</span>&#123;n&#125;,</span><br><span class="line">S<span class="built_in">_</span>&#123;n&#125; = 1 =2<span class="built_in">^</span>&#123;n&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;equation&#125;</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure><h2 id="五、矩阵"><a href="#五、矩阵" class="headerlink" title="五、矩阵"></a>五、矩阵</h2><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;pmatrix&#125;</span><br><span class="line">1      <span class="built_in">&amp;</span> a<span class="built_in">_</span>1    <span class="built_in">&amp;</span> a<span class="built_in">_</span>1<span class="built_in">^</span>2  <span class="built_in">&amp;</span> <span class="keyword">\cdots</span> <span class="built_in">&amp;</span> a<span class="built_in">_</span>1<span class="built_in">^</span>n <span class="keyword">\\</span></span><br><span class="line">1      <span class="built_in">&amp;</span> a<span class="built_in">_</span>2    <span class="built_in">&amp;</span> a<span class="built_in">_</span>2<span class="built_in">^</span>2  <span class="built_in">&amp;</span> <span class="keyword">\cdots</span> <span class="built_in">&amp;</span> a<span class="built_in">_</span>2<span class="built_in">^</span>n <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\vdots</span> <span class="built_in">&amp;</span> <span class="keyword">\vdots</span> <span class="built_in">&amp;</span> <span class="keyword">\vdots</span> <span class="built_in">&amp;</span> <span class="keyword">\ddots</span> <span class="built_in">&amp;</span> <span class="keyword">\vdots</span><span class="keyword">\\</span></span><br><span class="line">1      <span class="built_in">&amp;</span> a<span class="built_in">_</span>m    <span class="built_in">&amp;</span> a<span class="built_in">_</span>m<span class="built_in">^</span>2  <span class="built_in">&amp;</span> <span class="keyword">\cdots</span> <span class="built_in">&amp;</span> a<span class="built_in">_</span>m<span class="built_in">^</span>n <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\end</span>&#123;pmatrix&#125;</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure><p><img src="/images/image-20250108141320306.png"></p><h2 id="六-、方程组"><a href="#六-、方程组" class="headerlink" title="六 、方程组"></a>六 、方程组</h2><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\left</span><span class="keyword">\&#123;</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;array&#125;&#123;c&#125;</span><br><span class="line">a<span class="built_in">_</span>1x+b<span class="built_in">_</span>1y+c<span class="built_in">_</span>1z = d<span class="built_in">_</span>1 <span class="keyword">\\</span></span><br><span class="line">a<span class="built_in">_</span>2x+b<span class="built_in">_</span>2y+c<span class="built_in">_</span>2z = d<span class="built_in">_</span>2 <span class="keyword">\\</span></span><br><span class="line">a<span class="built_in">_</span>3x+b<span class="built_in">_</span>3y+c<span class="built_in">_</span>3z = d<span class="built_in">_</span>3 <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\end</span>&#123;array&#125;</span><br><span class="line"><span class="keyword">\right</span>.</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure><p><img src="/images/image-20250108141449757.png"></p>]]></content>
    
    
    <categories>
      
      <category>LaTex</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>指针的const限定</title>
    <link href="/2025/01/07/c%20review/"/>
    <url>/2025/01/07/c%20review/</url>
    
    <content type="html"><![CDATA[<h1 id="指针的const限定"><a href="#指针的const限定" class="headerlink" title="指针的const限定"></a>指针的<code>const</code>限定</h1><h2 id="1-指向const对象的指针"><a href="#1-指向const对象的指针" class="headerlink" title="1.指向const对象的指针"></a>1.指向<code>const</code>对象的指针</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> *p;<span class="comment">//或int const *p;</span></span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line">p = &amp;a;<span class="comment">//正确，p不是只读的</span></span><br><span class="line">*p = <span class="number">42</span>;<span class="comment">//错误,*p是只读的</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *cptrf = &amp;f;<span class="comment">//正确</span></span><br><span class="line"><span class="type">int</span> *ptr = &amp;p;<span class="comment">//错误</span></span><br></pre></td></tr></table></figure><ul><li>非<code>const</code>对象指针的地址可以赋给<code>const</code>对象的指针，<code>const</code>对象指针的地址不能赋给非<code>const</code>对象的指针。</li><li><strong>不能使用指向<code>const</code>对象的指针修改指向对象。</strong></li><li><strong>不能保证指向<code>const</code>的指针所指对象的值一定不被其他方式该改变</strong>（如果指向对象是一个普通变量就可以直接修改）。</li></ul><h2 id="2-const指针"><a href="#2-const指针" class="headerlink" title="2.const指针"></a>2.<code>const</code>指针</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *<span class="type">const</span> ptr;</span><br></pre></td></tr></table></figure><ul><li>这表示 <code>ptr</code>是一个常量指针，指针本身的地址不能修改，但可以通过指针修改它所指向的对象的值。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ptr = &amp;b;</span><br><span class="line">ptr = pc;</span><br><span class="line">ptr++;<span class="comment">//均错误，ptr是只读的</span></span><br></pre></td></tr></table></figure></li><li>与任何<code>const</code>量一样，<code>const</code>指针必须在定义时初始化。</li></ul><h2 id="3-指向const对象的const指针"><a href="#3-指向const对象的const指针" class="headerlink" title="3.指向const对象的const指针"></a>3.指向<code>const</code>对象的<code>const</code>指针</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">double</span> <span class="type">const</span>* pi = <span class="number">3</span>;</span><br></pre></td></tr></table></figure><ul><li>这表示<code>pi</code>是一个常量指针，指向的对象是常量。不能通过<code>pi</code>修改所指向对象的值，并且指针本身的地址也不能修改。</li></ul>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/01/07/hello-world/"/>
    <url>/2025/01/07/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
