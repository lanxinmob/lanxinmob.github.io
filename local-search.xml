<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Crash Course Computer Science【计算机科学速成课】(1)</title>
    <link href="/2025/02/22/Crash%20Course%20Computer%20Science%E3%80%90%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E3%80%91(1)/"/>
    <url>/2025/02/22/Crash%20Course%20Computer%20Science%E3%80%90%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E3%80%91(1)/</url>
    
    <content type="html"><![CDATA[<h2 id="感谢速成课！感谢-Carrie-Anne！感谢中文翻译组！"><a href="#感谢速成课！感谢-Carrie-Anne！感谢中文翻译组！" class="headerlink" title="感谢速成课！感谢 Carrie Anne！感谢中文翻译组！~"></a>感谢速成课！感谢 Carrie Anne！感谢中文翻译组！~</h2><h4 id="原视频"><a href="#原视频" class="headerlink" title="原视频"></a>原视频</h4><p><a href="https://www.youtube.com/playlist?list=PL8dPuuaLjXtNlUrzyH5r6jN9ulIgZBpdo">Crash Course Computer Science</a><br><a href="https://github.com/1c7/crash-course-computer-science-chinese">https://github.com/1c7/crash-course-computer-science-chinese</a></p><h2 id="第-1-集：计算机早期历史"><a href="#第-1-集：计算机早期历史" class="headerlink" title="第 1 集：计算机早期历史"></a>第 1 集：计算机早期历史</h2><ul><li>算盘 → 步进计算器 → 差分机 → 分析机 → 打孔卡片制表机</li></ul><ol><li>最早的计算设备是算盘，大约公元前 2500 年发明于”美索不达米亚”.</li><li>在接下来 4000 年，人类发明了各种巧妙的计算设备 比如星盘，让船只可以在海上计算纬度 或计算尺，帮助计算乘法和除法.</li><li>最早使用 “计算机” 一词的文献是1613 年的一本书，作者 Richard Braithwait 然而指的不是机器，而是一种职业，指负责计算的人.</li><li>1800 年后Computer逐渐开始从指代职业变成指代机器.  </li><li>机器里有名的是：步进计算器,第一个可以做加减乘除的机器,沿用了 3 个世纪.</li><li>炮弹为了精准，要计算弹道，二战是查表来做，但每次改设计了就需要做一张新表.</li><li><strong>Charles Babbage</strong> 提出了 “<strong>差分机</strong>“, 一个更复杂的机器，能近似多项式，在构造差分机期间，想出了<strong>分析机</strong>, 分析机是通用计算机 ,它可以做很多事情,不只是一种特定运算.</li><li>Ada Lovelace 给分析机写了假想程序，因此成为了第一位程序员  </li><li>美国政府在 1890 年的人口普查中面临着严重的问题,预计要 13 年完成,Herman Hollerith 的打孔卡片制表机大大提升了效率,使人口普查在短短两年半内完成.</li><li>Hollerith 成立了制表机器公司,这家公司后来在 1924 年与其它机械制造商合并成为了 “<strong>国际商业机器公司</strong>“，简称 <strong>IBM</strong>.</li></ol><h2 id="第-2-集：电子计算机"><a href="#第-2-集：电子计算机" class="headerlink" title="第 2 集：电子计算机"></a>第 2 集：电子计算机</h2><ul><li>继电器 → 真空管 → 晶体管</li></ul><ol><li>20世纪的发展要求更强的计算能力,柜子大小的计算机发展到房间大小 ,最大的机电计算机之一是哈佛 Mark 1 号,IBM 1944 年做的,大脑是”<strong>继电器</strong>“,给”曼哈顿计划”跑模拟.</li><li>1940 年代一个好的继电器 1 秒能翻转 50 次,哈佛马克一号1 秒能做 3 次加法或减法运算,一次乘法要花 6 秒，除法要花 15 秒</li><li>除了速度慢，另一个限制是齿轮磨损,随着继电器数量增加，故障概率也会增加,同时这些巨大，黑色，温暖的机器也会吸引昆虫,1947年9月，哈佛马克2型的操作员从故障继电器中，拔出一只死虫这就是术语 “<strong>bug</strong>“（虫子）的来源.</li><li>1904 年，热电子管出现，世界上第一个<strong>真空管</strong>。改进为三极真空管后变成和继电器的功能一样,并且真空管内没有会动的组件,更少的磨损,每秒可以开闭数千次.</li><li>“巨人1号” 计算机在英国,布莱切利园,首次大规模使用真空管,用于破解纳粹通信,被认为是第一个可编程的电子计算机但编程麻烦，还要配置.  </li><li>1946 年，宾夕法尼亚大学的 <strong>ENIAC</strong> 是第一个通用可编程计算机,每秒可执行 5000 次十位数加减法.</li><li>1947 年，<strong>贝尔实验室</strong>做出了<strong>晶体管</strong>，晶体管有诸多好处,每秒可以切换上百万次，并且能工作几十年,IBM 很快全面转向晶体管  </li><li>很多晶体管和半导体的开发在”圣克拉拉谷”,在加州位于”旧金山”和”圣荷西”之间,而生产半导体最常见的材料是硅,所以这个地区被称为 “<strong>硅谷</strong>“</li><li>William Shockley 搬了过去，创立了肖克利半导体 → 仙童半导体 → 英特尔</li></ol><h2 id="第-3-集：布尔逻辑和逻辑门"><a href="#第-3-集：布尔逻辑和逻辑门" class="headerlink" title="第 3 集：布尔逻辑和逻辑门"></a>第 3 集：布尔逻辑和逻辑门</h2><ol><li>3个基本操作：NOT，AND，OR以及XOR 异或，异为真，同为假<br><img src="/images/image.png"></li></ol><h2 id="第-4-集：二进制"><a href="#第-4-集：二进制" class="headerlink" title="第 4 集：二进制"></a>第 4 集：二进制</h2><ol><li>8 位能表示的最小数是 0，最大数是 255,1 bytes &#x3D; 8 bits 存储单位MB GB TB 等,32 位能表示的最大数是 43 亿左右,64 位能表达最大数大约是 9.2×10 ^ 18,</li><li>Instagram 照片很清晰,它们有上百万种颜色,因为如今都用 32 位颜色</li><li>大部分计算机用第一位表示正负,1 是负，0 是正,最常见的是 IEEE 754 标准表示浮点数，在 32 位浮点数中第 1 位表示数的符号——正或负，接下来 8 位存指数，剩下 23 位存有效位数</li><li>美国信息交换标准代码 - ASCII, 用来表示字符<br>![](&#x2F;images&#x2F;image (1).png)</li><li>UNICODE 1992 年诞生，是字符编码标准， 解决 ASCII 不够表达所有语言的问题,最常见的 Unicode 是 16 位的，有超过一百万个位置</li></ol><h2 id="第-5-集：算数逻辑单元-ALU"><a href="#第-5-集：算数逻辑单元-ALU" class="headerlink" title="第 5 集：算数逻辑单元 - ALU"></a>第 5 集：算数逻辑单元 - ALU</h2><ol><li>ALU 算术逻辑单元，有 2 个单元，1 个算术单元和 1 个逻辑单元</li><li>算术单元，负责计算机里的所有数字操作</li></ol><ul><li>半加器 (处理1个 bit，2个输入)  输出”总和”和”进位”<br>![](&#x2F;images&#x2F;image (2).png)</li><li>全加器 (处理1个 bit，3个输入)<br>![](&#x2F;images&#x2F;image (3).png)</li></ul><ol start="3"><li>8 bit 加法 (1个半加器，7个全加器）</li></ol><ul><li>把这个全加器的进位连到下个全加器的输入，8位行波进位加法器<br>![](&#x2F;images&#x2F;image (4).png)</li><li>如果第 9 位有进位，代表着 2 个数字的和太大了，超过了 8 位这叫 “<strong>溢出</strong>“ (overflow)。著名的例子是，吃豆人用 8 位存当前关卡数，如果你玩到了第 256 关（ 8 位 bit 最大表示 255），ALU 会溢出，造成一连串错误和乱码，使得该关卡无法进行，这个 bug 成了厉害吃豆人玩家的代表</li><li>缺点是每次进位都要一点时间但如今的量级是每秒几十亿次运算，所以会造成影响，所以，现代计算机用的加法电路有点不同，叫 “超前进位加法器”</li><li>乘法用多次加法来实现，除法用迭代减法实现</li></ul><ol start="4"><li>逻辑单元</li></ol><ul><li>能做简单的数值测试，检测数字是否为 0 的电路（一堆 OR 门最后加个 NOT 门）</li></ul><ol start="5"><li>工程师不想在用 ALU 时去想那些事情,ALU抽象成一个 V 符号  </li><li>ALU 还会输出一堆Flag 标志（是否相等，是否小于，是否溢出等等）</li></ol><h2 id="第-6-集：寄存器和内存"><a href="#第-6-集：寄存器和内存" class="headerlink" title="第 6 集：寄存器和内存"></a>第 6 集：寄存器和内存</h2><p>本集重点是 Memory （存储 &#x2F; 内存 两种含义）</p><ol><li>“<strong>随机存取存储器</strong>“，简称”<strong>RAM</strong>“，在断电时损失数据</li><li>存 1 位 “AND-OR <strong>锁存器</strong>“(Gated Latch - 锁存器）</li></ol><ul><li>它有两个输入，”设置”输入, 把输出变成 1，”复位”输入, 把输出变成 0 ，如果”设置”和”复位”都是 0，电路会输出最后放入的内容<br>![](&#x2F;images&#x2F;image (5).png)</li><li>一根线来”启用”内存，这条线叫 “允许写入线”<br>![](&#x2F;images&#x2F;image (6).png)</li></ul><ol start="3"><li>存 8 位 (Register - <strong>寄存器</strong>)</li></ol><ul><li>如果我们并排放 8 个锁存器，可以存 8 位信息，比如一个 8 bit 数字，一组这样的锁存器叫 “寄存器”，寄存器能存一个数字，这个数字有多少位，叫”位宽”，如今许多计算机都有 64 位宽的寄存器<br>![](&#x2F;images&#x2F;image (7).png)</li><li>为了减少线的数量，在矩阵中做成网格，要启用某个锁存器，就打开相应的行线和列线，只有行线和列线均为1， AND 门才输出 1</li></ul><ol start="4"><li>16x16 的矩阵存 256 位，数据选择器&#x2F;<strong>多路复用器</strong> (Multiplexer) 解码 8 位地址，定位到单个锁存器，输入一个 8 位地址，4 位代表行， 4 位代表列</li><li>不断把内存打包到更大规模，随着内存地址增多，内存地址也必须增长，内存的一个重要特性是：可以随时访问任何位置，因此叫 “随机存取存储器” ，简称 RAM</li></ol><h2 id="第-7-集：中央处理器（CPU"><a href="#第-7-集：中央处理器（CPU" class="headerlink" title="第 7 集：中央处理器（CPU)"></a>第 7 集：中央处理器（CPU)</h2><ol><li>RAM + 寄存器 + ALU 做个 CPU</li></ol><ul><li>一个寄存器追踪程序运行到哪里了，我们叫它  “指令地址寄存器”，存当前指令的内存地址 </li><li>另一个寄存器存当前指令，叫  “指令寄存器”</li></ul><ol start="2"><li>进行”<strong>取指令→解码→执行</strong>“ 这个循环  </li><li>时钟以精确的间隔  触发电信号控制单元会用这个信号，推进 CPU 的内部操作，确保一切按步骤进行，CPU “取指令→解码→执行” 的速度叫 “<strong>时钟速度</strong>“, 单位是赫兹</li></ol><ul><li>第一个单芯片 CPU 是 “英特尔 4004” 1971 年发布的 4 位CPU，时钟速度达到了 740 千赫兹 - 每秒 74 万次</li><li>一兆赫兹是 1 秒 1 百万个<strong>时钟周期</strong>，而看视频的电脑或手机，肯定有几千兆赫兹</li></ul><ol start="4"><li>超频，修改时钟速度，加快 CPU 的速度，提升性能,但超频太多会让 CPU 过热或产生乱码，因为信号跟不上时钟，而降频省电，这叫 “<strong>动态调整频率</strong>“</li></ol><h2 id="第-8-集：指令和程序"><a href="#第-8-集：指令和程序" class="headerlink" title="第 8 集：指令和程序"></a>第 8 集：指令和程序</h2><p>本集重点：一步步带你运行一遍程序</p><ol><li>”指令集”</li></ol><ul><li>LOAD_A，LOAD_B，SUB，JUMP，ADD，HALT 等指令<br>![](&#x2F;images&#x2F;image (8).png)</li><li>JUMP 0 可以跳回开头，JUMP 在底层的实现方式是用指令后 4 位的值覆盖掉 “指令地址寄存器” 里的值</li><li>带条件跳转，JUMP NEGATIVE 只在 ALU 的 “负数标志” 为真时，即算术结果是负数才跳转，还有其他类型的 JUMP </li><li>真正现代 CPU 用更多指令集，位数更长。</li></ul><ol start="2"><li>1971年的英特尔 4004 处理器，有 46 个指令，如今英特尔酷睿 i7, 有上千条指令</li></ol><h2 id="第-9-集：高级-CPU-设计"><a href="#第-9-集：高级-CPU-设计" class="headerlink" title="第 9 集：高级 CPU 设计"></a>第 9 集：高级 CPU 设计</h2><ol><li>早期是加快晶体管切换速度，来提升 CPU 速度，但这种提速方法最终会碰到瓶颈，处理器厂商发明各种新技术来提升性能，不但让简单指令运行更快也让它能进行更复杂的运算</li></ol><ul><li>现代处理器有专门电路来处理图形操作, 解码压缩视频, 加密文档 等等，给 CPU 专门的除法电路 + 其他电路来做复杂操作，比如游戏，视频解码</li></ul><ol start="2"><li>一条”从内存读数据”的指令可能要多个时钟周期，CPU 空等数据，解决延迟的方法之一是给 CPU 加缓存，提高数据存取速度，更快喂给 CPU</li><li>缓存和 RAM 不一致了，这种不一致必须记录下来，之后要同步，因此缓存里每块空间有一个特殊标记叫脏位 Dirty bit  </li><li>另一种提升性能的方法叫<strong>流水线设计</strong>,并行处理 - parallelize,更进一步，动态排序有依赖关系的指令,最小化流水线的停工时间,乱序执行 - out-of-order execution</li><li>简单的流水线处理器，看到 JUMP 指令会停一会儿,等待条件值确定下来,一旦 JUMP 的结果出了，处理器就继续流水线,因为空等会造成延迟，所以高端处理器会用一些技巧</li></ol><ul><li>可以把 JUMP 想成是 “岔路口”，高端 CPU 会猜哪条路的可能性大一些,然后提前把指令放进流水线，这叫 “<strong>推测执行</strong>“</li><li>当 JUMP 的结果出了，如果 CPU 猜对了,流水线已经塞满正确指令，可以马上运行,如果 CPU 猜错了，就要清空流水线,为了尽可能减少清空流水线的次数，CPU 厂商开发了复杂的方法来猜测哪条分支更有可能，叫”<strong>分支预测</strong>“</li><li>现代 CPU 的正确率超过 90%</li></ul><ol start="6"><li>另一个提升性能的方法是<strong>同时运行多个指令流用多核处理器</strong>,如双核或四核处理器意思是一个 CPU 芯片里，有多个独立处理单元，很像是有多个独立 CPU，但因为它们整合紧密，可以共享一些资源，比如缓存，使得多核可以合作运算，但多核不够时，可以用多个 CPU，高端计算机，比如Youtube 服务器需要更多马力，让上百人能同时流畅观看，2个或4个CPU是最常见的，但有时人们有更高的性能要求所以造了超级计算机！</li></ol><h2 id="第-10-集：早期的编程方式"><a href="#第-10-集：早期的编程方式" class="headerlink" title="第 10 集：早期的编程方式"></a>第 10 集：早期的编程方式</h2><ol><li>早期计算机如何编程</li></ol><ul><li>打孔纸卡 → 插线板 → 面板拨开关</li></ul><ol start="2"><li>程序和数据都存在一个地方，叫<strong>冯诺依曼架构</strong>  Von Neumann Architecture </li><li><strong>冯诺依曼计算机</strong>的标志是，一个处理器(有算术逻辑单元)+数据寄存器+指令寄存器+指令地址寄存器+内存（负责存数据和指令)</li><li>第一款取得商业成功的家用计算机: Altair 8800 ，编程依然很困难，人们需要更友好更简单的方式编程</li></ol>]]></content>
    
    
    <categories>
      
      <category>CS0</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Knuth-Morris-Pratt（KMP）算法【详解】</title>
    <link href="/2025/01/11/Knuth-Morris-Pratt%EF%BC%88KMP%EF%BC%89%E7%AE%97%E6%B3%95%E3%80%90%E8%AF%A6%E8%A7%A3%E3%80%91/"/>
    <url>/2025/01/11/Knuth-Morris-Pratt%EF%BC%88KMP%EF%BC%89%E7%AE%97%E6%B3%95%E3%80%90%E8%AF%A6%E8%A7%A3%E3%80%91/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>笔者在学习字符串的过程中，接触到求子字符串位置的问题，除了暴力解法外了解到有一种名为KMP（烤馍片）的巧妙算法也顺便了解了一下发明者之一的“神”Kunth的履历，但不在此赘述。虽然网上有很多详细图解之类，但我还是不能充分理解。在看完Tushar Roy的讲解后才恍然大悟，本文主要根据他的讲解，结合自己的思考在此写出我的理解。</p><hr><h1 id="一、从问题谈起，如何最直接地搜索一个字符串？"><a href="#一、从问题谈起，如何最直接地搜索一个字符串？" class="headerlink" title="一、从问题谈起，如何最直接地搜索一个字符串？"></a>一、从问题谈起，如何最直接地搜索一个字符串？</h1><ul><li>示例：<br>给定字符串是<code>absdglx</code>,目标字符串是<code>sdgl</code>，给每个字符标上序号，分别是<code>m0,m1,m2,m3,m4,m5,m6</code>,<code>n0,n1,n2,n3</code>。最直接的搜索并定位目标字符串的方法就是将目标字符串的每个字符给定字符串的字符逐一比较。</li><li>从<code>m0</code>，<code>n0</code>开始，若匹配则两字符串都从比较的字符往后移动一个字符，继续进行比较；若不相同，则给定字符串回到从起始比较位往后移动一个字符的位置，目标字符串回到<code>n0</code>从头开始比较，直到在给定字符串超过最后一个字符<code>m7</code>前，目标字符串匹配完最后一个字符<code>n3</code>，即搜索到目标字符串。</li><li>要将上述过程通过编程实现，我们可以用两个指针<code>i,j</code>分别指向给定字符串和目标字符串，按上述过程进行指针的后移和回退，直到<code>i</code>或<code>j</code>指向字符串的最后一个字符。</li></ul><h1 id="二、实现优化的kmp算法如何操作？"><a href="#二、实现优化的kmp算法如何操作？" class="headerlink" title="二、实现优化的kmp算法如何操作？"></a>二、实现优化的kmp算法如何操作？</h1><p>我们可以发现上文朴素(暴力)算法的不便和存在大量低效、重复的匹配操作，那么我们可不可以通过某些目标字符串本身特性来减少回退而多进行回溯，提高效率。</p><h2 id="1-引入前缀数组"><a href="#1-引入前缀数组" class="headerlink" title="1.引入前缀数组"></a>1.引入前缀数组</h2><ul><li><p>前缀数组的每个元素对应着目标字符串的每个字符，其元素表示了该字符前的子字符串（包括该字符）中的最长的相等的前缀和后缀的长度，即前文所指的目标字符串的某些特性。<br>  举例：<code>abcabcd</code>的前缀数组可以用下面这个表格来表示。</p><table><thead><tr><th>a</th><th>b</th><th>c</th><th>a</th><th>b</th><th>c</th><th>d</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>1</td><td>2</td><td>3</td><td>0</td></tr></tbody></table></li><li><p>我们用一个例子来详细解释如何手推前缀数组,过程中会用到前缀和回溯的思想。<br> 1.<code>abcdabca</code>使用两个指针<code>i,j</code>分别指向<code>a,b</code>,i和j指向的元素显然为0，将<code>j</code>向后移动，<code>j</code>移动到j移动到第二个<code>a</code>时有了相同前后缀元素记为1，然后将<code>i</code>和<code>j</code>都向后移动j指向<code>b</code>相同前后缀长为2，数组元素记为2，再次将<code>i</code>和<code>j</code>向后移动，<code>j</code>指向<code>c</code>同理，当<code>j</code>指向末尾的<code>a</code>时两指针所指字符不同，需要进行回溯。观察到<code>j</code>指针所指字符的前一个字符对应元素为0，即没有相同前后缀，则将<code>j</code>回退至首字符，此时<code>i</code>和<code>j</code>所指字符均为<code>a</code>，则<code>i</code>所指字符对应元素记为1。该字符串前缀数组即为<strong>00001231</strong>。</p></li></ul><h2 id="2-给定字符串和目标字符串分别如何回溯？"><a href="#2-给定字符串和目标字符串分别如何回溯？" class="headerlink" title="2.给定字符串和目标字符串分别如何回溯？"></a>2.给定字符串和目标字符串分别如何回溯？</h2><ul><li>举例：给定字符串<code>abxabcabcaby</code>,目标字符串<code>abcaby</code>,对应前缀数组为<strong>000120</strong>。（同样使用<code>i</code> <code>j</code>指针但分别指向给定字符串和目标字符串）<br>两字符串前两个字符匹配，第三个字符分别为<code>x</code>和<code>c</code>不匹配，<code>j</code>前一字符对应元素为0，<code>j</code>回到首位指向<code>a</code>仍与<code>x</code>不匹配，<code>j</code>不移动，将<code>i</code>往后移动指向<code>a</code>与<code>j</code>所指匹配，<code>i</code>和<code>j</code>都往后移动。同理继续匹配直到<code>i</code>指向<code>c</code>，<code>j</code>指向<code>y</code>不匹配，<code>j</code>前一字符对应元素为2，<code>j</code>回溯到第三个字符<code>c</code>与<code>i</code>匹配，<code>i</code>和<code>j</code>都往后移动继续匹配直到最后完成匹配。</li></ul><h1 id="三、如何用代码来实现kmp算法？"><a href="#三、如何用代码来实现kmp算法？" class="headerlink" title="三、如何用代码来实现kmp算法？"></a>三、如何用代码来实现kmp算法？</h1><p>同样主要分为两步，</p><h2 id="1-计算目标字符串的前缀数组"><a href="#1-计算目标字符串的前缀数组" class="headerlink" title="1. 计算目标字符串的前缀数组"></a>1. 计算目标字符串的前缀数组</h2><ul><li>前缀数组定义为<code>prefix[]</code>,<code>j</code>和<code>i</code>分别指向第一、二个字符，让<code>i</code>遍历目标字符串每个字符，<code>j = prefix[j-1]</code>就是<code>j</code>回溯至<code>j</code>所指前一个字符对应元素的位置。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"> <span class="hljs-type">void</span> <span class="hljs-title function_">Prefix</span><span class="hljs-params">(<span class="hljs-type">char</span>* pattern, <span class="hljs-type">int</span>* prefix, <span class="hljs-type">int</span> len)</span><br>&#123;<br>    <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>    prefix[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> i= <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(i&lt;len)&#123;<br>        <span class="hljs-keyword">if</span>(pattern[i]==pattern[j])&#123;<br>            j++;<br>            prefix[i] = j;<br>            i++;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span> (j!=<span class="hljs-number">0</span>)<br>            &#123;   <br>                j = prefix[j<span class="hljs-number">-1</span>];<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                prefix[i] = <span class="hljs-number">0</span>;<br>                i++;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="2-借助前缀数组进行字符串的匹配"><a href="#2-借助前缀数组进行字符串的匹配" class="headerlink" title="2.借助前缀数组进行字符串的匹配"></a>2.借助前缀数组进行字符串的匹配</h2><ul><li><code>pattern</code>为目标字符串，<code>text</code>为给定字符串，<code>i</code>和<code>j</code>分别指向给定字符串和目标字符串，同样遍历给定字符串，若j指向了目标字符串最后一个字符，则<code>i-j</code>为<code>text</code>中<code>pattern</code>的首字符位置。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">kmpsearch</span><span class="hljs-params">(<span class="hljs-type">char</span>*text,<span class="hljs-type">char</span>*pattern)</span><br>&#123; <br>    <span class="hljs-type">int</span> len = <span class="hljs-built_in">strlen</span>(pattern);<br>    <span class="hljs-type">int</span> wid = <span class="hljs-built_in">strlen</span>(text);<br>    <span class="hljs-type">int</span> prefix[len];<br>    Prefix(pattern,prefix,len);<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">while</span> (i &lt; wid)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(pattern[j]==text[i])&#123;<br>            i++;<br>            j++;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(j==len)&#123;<br>           <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,i-j);<br>           j = prefix[j<span class="hljs-number">-1</span>];<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i&lt;wid&amp;&amp;pattern[j]!=text[i])&#123;<br>           <span class="hljs-keyword">if</span>(j!=<span class="hljs-number">0</span>)&#123;<br>            j = prefix[j<span class="hljs-number">-1</span>];<br>           &#125;<span class="hljs-keyword">else</span>&#123;<br>            i++;<br>           &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文详细解释了kmp算法如何实现，kmp算法通过目标字符串由自身特性生成的前缀数组来减少回溯的过程，建议亲自动手推一推生成前缀数组和模式匹配的过程，这样可以更好地理解其思想和原理。</p><blockquote><p>如果发现文章中存在错误敬请批评指正，感谢您的阅读。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>About</title>
    <link href="/2025/01/08/about/"/>
    <url>/2025/01/08/about/</url>
    
    <content type="html"><![CDATA[<p>欢迎来到我的博客！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>LaTex笔记</title>
    <link href="/2025/01/08/latex/"/>
    <url>/2025/01/08/latex/</url>
    
    <content type="html"><![CDATA[<h2 id="一、LaTex中常见希腊字母"><a href="#一、LaTex中常见希腊字母" class="headerlink" title="一、LaTex中常见希腊字母"></a>一、LaTex中常见希腊字母</h2><blockquote><p>\alpha \beta \gamma \delta \epsilon \zeta \eta \pi \sigma \tau \phi \psi \chi</p></blockquote><h2 id="二、LaTex常用指令"><a href="#二、LaTex常用指令" class="headerlink" title="二、LaTex常用指令"></a>二、LaTex常用指令</h2><table><thead><tr><th>名称</th><th>指令</th><th>名称</th><th>指令</th></tr></thead><tbody><tr><td>分数</td><td>\frac{分子}{分母}</td><td>乘号</td><td>\times</td></tr><tr><td>开方</td><td>\sqrt[m]{n}</td><td>求和</td><td>\sum</td></tr><tr><td>求积</td><td>\prod</td><td>积分</td><td>\int</td></tr><tr><td>上标</td><td>^</td><td>下标</td><td>_</td></tr><tr><td>小于等于</td><td>\leq</td><td>大于等于</td><td>\geq</td></tr><tr><td>除法</td><td>\div</td><td>点乘</td><td>\cdot</td></tr></tbody></table><h2 id="三、数学符号"><a href="#三、数学符号" class="headerlink" title="三、数学符号"></a>三、数学符号</h2><table><thead><tr><th>$\vec a$</th><th>\vec a</th><th>$\int_{i&#x3D;m}^{n}$</th><th>\int_{i&#x3D;m}^{n}</th></tr></thead><tbody><tr><td>$\sum_{i&#x3D;m}^{n}$</td><td>\sum_{i&#x3D;m}^{n}</td><td>$\prod_{i&#x3D;m}^{n}$</td><td>\prod_{i&#x3D;m}^{n}</td></tr><tr><td>$\binom53$</td><td>\binom53</td><td>$\forall$</td><td>forall</td></tr><tr><td>$\partial$</td><td>\partial</td><td>$\mathop{\lim}_{n\to\infty}f(x)$</td><td>\mathop{\lim}_{n\to\infty}f(x)</td></tr><tr><td>$\sum_{n&#x3D;0}^{\infty}$</td><td>sum_{n&#x3D;0}^{\infty}</td><td>$\oint$</td><td>\oint</td></tr><tr><td>$\oiint$</td><td>\oiint</td><td>$\oiiint$</td><td>\oiiint</td></tr><tr><td>$\sqrt[3]{1000}$</td><td>\sqrt[3]{1000}</td><td>$\int_a^bf(x)$</td><td>\int_a^bf(x)</td></tr><tr><td>$\left\langle\right\rangle$</td><td>\left\langle    \right\rangle</td><td>{}</td><td>\left{ \right}</td></tr></tbody></table><h2 id="四、简单数学公式"><a href="#四、简单数学公式" class="headerlink" title="四、简单数学公式"></a>四、简单数学公式</h2><p>$$<br>y &#x3D; x^2<br>$$<br>$$<br>E &#x3D; mc^2<br>$$<br>$$<br>e^x&#x3D;\sum_{n&#x3D;0}^\infty\frac{1}{n!}x^i<br>$$</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-built_in">$</span>e<span class="hljs-built_in">^</span>x=<span class="hljs-keyword">\sum</span><span class="hljs-built_in">_</span>&#123;n=0&#125;<span class="hljs-built_in">^</span><span class="hljs-keyword">\infty</span><span class="hljs-keyword">\frac</span>&#123;1&#125;&#123;n!&#125;x<span class="hljs-built_in">^</span>i<span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure><p>$$<br>\begin{equation}<br>S_{n+1} &#x3D; S_{n} + S_{n},<br>S_{n} &#x3D; 1 &#x3D;2^{n}<br>\end{equation}<br>$$</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br><span class="hljs-keyword">\begin</span>&#123;equation&#125;<br>S<span class="hljs-built_in">_</span>&#123;n+1&#125; = S<span class="hljs-built_in">_</span>&#123;n&#125; + S<span class="hljs-built_in">_</span>&#123;n&#125;,<br>S<span class="hljs-built_in">_</span>&#123;n&#125; = 1 =2<span class="hljs-built_in">^</span>&#123;n&#125;<br><span class="hljs-keyword">\end</span>&#123;equation&#125;<br><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure><h2 id="五、矩阵"><a href="#五、矩阵" class="headerlink" title="五、矩阵"></a>五、矩阵</h2><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br><span class="hljs-keyword">\begin</span>&#123;pmatrix&#125;<br>1      <span class="hljs-built_in">&amp;</span> a<span class="hljs-built_in">_</span>1    <span class="hljs-built_in">&amp;</span> a<span class="hljs-built_in">_</span>1<span class="hljs-built_in">^</span>2  <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\cdots</span> <span class="hljs-built_in">&amp;</span> a<span class="hljs-built_in">_</span>1<span class="hljs-built_in">^</span>n <span class="hljs-keyword">\\</span><br>1      <span class="hljs-built_in">&amp;</span> a<span class="hljs-built_in">_</span>2    <span class="hljs-built_in">&amp;</span> a<span class="hljs-built_in">_</span>2<span class="hljs-built_in">^</span>2  <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\cdots</span> <span class="hljs-built_in">&amp;</span> a<span class="hljs-built_in">_</span>2<span class="hljs-built_in">^</span>n <span class="hljs-keyword">\\</span><br><span class="hljs-keyword">\vdots</span> <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\vdots</span> <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\vdots</span> <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\ddots</span> <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\vdots</span><span class="hljs-keyword">\\</span><br>1      <span class="hljs-built_in">&amp;</span> a<span class="hljs-built_in">_</span>m    <span class="hljs-built_in">&amp;</span> a<span class="hljs-built_in">_</span>m<span class="hljs-built_in">^</span>2  <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\cdots</span> <span class="hljs-built_in">&amp;</span> a<span class="hljs-built_in">_</span>m<span class="hljs-built_in">^</span>n <span class="hljs-keyword">\\</span><br><span class="hljs-keyword">\end</span>&#123;pmatrix&#125;<br><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure><p><img src="/images/image-20250108141320306.png"></p><h2 id="六-、方程组"><a href="#六-、方程组" class="headerlink" title="六 、方程组"></a>六 、方程组</h2><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br><span class="hljs-keyword">\left</span><span class="hljs-keyword">\&#123;</span><br><span class="hljs-keyword">\begin</span>&#123;array&#125;&#123;c&#125;<br>a<span class="hljs-built_in">_</span>1x+b<span class="hljs-built_in">_</span>1y+c<span class="hljs-built_in">_</span>1z = d<span class="hljs-built_in">_</span>1 <span class="hljs-keyword">\\</span><br>a<span class="hljs-built_in">_</span>2x+b<span class="hljs-built_in">_</span>2y+c<span class="hljs-built_in">_</span>2z = d<span class="hljs-built_in">_</span>2 <span class="hljs-keyword">\\</span><br>a<span class="hljs-built_in">_</span>3x+b<span class="hljs-built_in">_</span>3y+c<span class="hljs-built_in">_</span>3z = d<span class="hljs-built_in">_</span>3 <span class="hljs-keyword">\\</span><br><span class="hljs-keyword">\end</span>&#123;array&#125;<br><span class="hljs-keyword">\right</span>.<br><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure><p><img src="/images/image-20250108141449757.png"></p>]]></content>
    
    
    <categories>
      
      <category>LaTex</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>指针的const限定</title>
    <link href="/2025/01/07/c%20review/"/>
    <url>/2025/01/07/c%20review/</url>
    
    <content type="html"><![CDATA[<h1 id="指针的const限定"><a href="#指针的const限定" class="headerlink" title="指针的const限定"></a>指针的<code>const</code>限定</h1><h2 id="1-指向const对象的指针"><a href="#1-指向const对象的指针" class="headerlink" title="1.指向const对象的指针"></a>1.指向<code>const</code>对象的指针</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">const</span> <span class="hljs-type">int</span> *p;<span class="hljs-comment">//或int const *p;</span><br><span class="hljs-type">int</span> a;<br>p = &amp;a;<span class="hljs-comment">//正确，p不是只读的</span><br>*p = <span class="hljs-number">42</span>;<span class="hljs-comment">//错误,*p是只读的</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> *cptrf = &amp;f;<span class="hljs-comment">//正确</span><br><span class="hljs-type">int</span> *ptr = &amp;p;<span class="hljs-comment">//错误</span><br></code></pre></td></tr></table></figure><ul><li>非<code>const</code>对象指针的地址可以赋给<code>const</code>对象的指针，<code>const</code>对象指针的地址不能赋给非<code>const</code>对象的指针。</li><li><strong>不能使用指向<code>const</code>对象的指针修改指向对象。</strong></li><li><strong>不能保证指向<code>const</code>的指针所指对象的值一定不被其他方式该改变</strong>（如果指向对象是一个普通变量就可以直接修改）。</li></ul><h2 id="2-const指针"><a href="#2-const指针" class="headerlink" title="2.const指针"></a>2.<code>const</code>指针</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> *<span class="hljs-type">const</span> ptr;<br></code></pre></td></tr></table></figure><ul><li>这表示 <code>ptr</code>是一个常量指针，指针本身的地址不能修改，但可以通过指针修改它所指向的对象的值。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">ptr = &amp;b;<br>ptr = pc;<br>ptr++;<span class="hljs-comment">//均错误，ptr是只读的</span><br></code></pre></td></tr></table></figure></li><li>与任何<code>const</code>量一样，<code>const</code>指针必须在定义时初始化。</li></ul><h2 id="3-指向const对象的const指针"><a href="#3-指向const对象的const指针" class="headerlink" title="3.指向const对象的const指针"></a>3.指向<code>const</code>对象的<code>const</code>指针</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">const</span> <span class="hljs-type">double</span> <span class="hljs-type">const</span>* pi = <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><ul><li>这表示<code>pi</code>是一个常量指针，指向的对象是常量。不能通过<code>pi</code>修改所指向对象的值，并且指针本身的地址也不能修改。</li></ul>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/01/07/hello-world/"/>
    <url>/2025/01/07/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
